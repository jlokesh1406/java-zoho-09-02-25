1.Two Sum
    Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
    You may assume that each input would have exactly one solution, and you may not use the same element twice.
    You can return the answer in any order.

Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int len = nums.length;
        for(int i=0;i<len-1;i++)
        {
            for(int j=i+1;j<len;j++)
            {
                if(nums[i]+nums[j]==target)
                {
                    return new int[]{i,j};
                }
            }
        }
        return new int[]{};
    }
}

2.Longest Substring Without Repeating Characters

Example 1:
Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:
Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

class Solution {
    public int lengthOfLongestSubstring(String s) {
        ArrayList <Character> temp = new ArrayList<Character>();
        int i=0,max=0;
        while(i<s.length())
        {
            int j=i;
            while(j<s.length())
            {
                if(!temp.contains(s.charAt(j)))
                {
                    temp.add(s.charAt(j));
                }
                else
                {  
                    break;
                }
                j++;
            }
            if(max<temp.size())
            {
                max=temp.size();
            }
            temp.removeAll(temp);  
            i++;
        }
        return max;
    }
}


3.Median of Two Sorted Arrays
Example 1:
Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:
Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int l1=nums1.length,l2=nums2.length;
        int i,arr[]=new int[l1+l2];
        for(i=0;i<l1;i++)
        {
            arr[i]=nums1[i];
        }
        for(i=0;i<l2;i++)
        {
            arr[l1+i]=nums2[i];
        }
        Arrays.sort(arr);
        if(arr.length%2==1)
        {
            return ((double)(arr[arr.length/2]));
        }
        else
        {
            return ((double)((arr[arr.length/2]+arr[arr.length/2-1])/2.0));
        }
    }
}

4.Longest Palindromic Substring
xample 1:
Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.
Example 2:
Input: s = "cbbd"
Output: "bb"

class Solution {
    public String longestPalindrome(String s)
    {
        return Longest_Palindromic(s);
    }
    static String Longest_Palindromic(String str)
    {
        if (str.length() <= 1)
        return str;
  
      String LPS = "";
  
      for (int i = 1; i < str.length(); i++) {
  
        // Consider odd length
        int low = i;
        int high = i;
        while(str.charAt(low) == str.charAt(high)) {
          low--;
          high++;
  
          if (low == -1 || high == str.length())
            break;
        }
  
        String palindrome = str.substring(low+1, high);
        if (palindrome.length() > LPS.length()) {
          LPS = palindrome;
        }
  
        // Consider even length
        low = i-1;
        high = i;
        while(str.charAt(low) == str.charAt(high)) {
          low--;
          high++;
  
          if (low == -1 || high == str.length())
            break;
        }
  
        palindrome = str.substring(low+1, high);
        if (palindrome.length() > LPS.length()) {
          LPS = palindrome;
        }
      }
  
      return LPS;
    }
}


5.Reverse integer
Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21

class Solution {
    public int reverse(int x) {
        int sum=0;
        while(x!=0)
        {
            if(sum>Integer.MAX_VALUE/10||sum<Integer.MIN_VALUE/10)
            {
                return 0;
            }
            sum=sum*10+x%10;
            x=x/10;
        }
        return sum;
    }
}

6. Palindrome Number
Example 1:

Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.
Example 2:

Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:

Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.

class Solution {
    public boolean isPalindrome(int x) {
        int sum=0,num=x;
        if(x<0)
        {
            return false;
        }
        while(num>0)
        {
            sum=(sum*10)+(num%10);
            num/=10;
        }
        return (x==sum);
    }
}


7.Roman to Integer
Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
class Solution {
    public int romanToInt(String s) {
        /*
        sum=0;
        if(roman(i)<romav(i+1))
        {
            roman(i+1)-roman(i);
        } 
        else if(roman(i)>roman(i+1))
        {
            roman(i)+roman(i-1);
        }
        */
        Map <Character,Integer> temp = new HashMap<>();
        temp.put('I',1);
        temp.put('V',5);
        temp.put('X',10);
        temp.put('L',50);
        temp.put('C',100);
        temp.put('D',500);
        temp.put('M',1000);
        int i,result=temp.get(s.charAt(s.length()-1));
        for(i=s.length()-2;i>=0;i--)
        {
            if(temp.get(s.charAt(i))<temp.get(s.charAt(i+1)))
            {
                result-=temp.get(s.charAt(i));
            }
            else 
            {
                result+=temp.get(s.charAt(i));
            }
        }
        return result;
     }

}

8.
Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".

 

Example 1:

Input: strs = ["flower","flow","flight"]
Output: "fl"
Example 2:

Input: strs = ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.

class Solution {
    public String longestCommonPrefix(String[] strs) {
        Arrays.sort(strs);
        String temp="";
        String s1=strs[0],s2=strs[strs.length-1];
        int i=0;
        while(i<s1.length())
        {
            if(s1.charAt(i)==s2.charAt(i))
            {
                temp+=String.valueOf(s1.charAt(i));
            }
            else
            {
                break;
            } 
            i++;
        }
        return temp;
    }
}


9.Valid Parentheses

Example 1:

Input: s = "()"

Output: true

Example 2:

Input: s = "()[]{}"

Output: true

Example 3:

Input: s = "(]"

Output: false

Example 4:

Input: s = "([])"

Output: true
class Solution {
    public boolean isValid(String s) 
    {
        Stack<Character> arr=new Stack<>();
        for(char i:s.toCharArray())
        {
            if( i=='(' || i=='{' || i=='[')
            {
                arr.push(i);
            }
            else 
            {
                if(arr.isEmpty())
                {
                    return false;
                }
                char ch=arr.pop();
                if( (i=='}'&&ch=='{') || (i==']'&&ch=='[') || (i==')'&&ch=='(') )
                {
                    continue;
                }
                else
                {
                    return false;
                }
            }
        }   
        return arr.isEmpty();
    }
}

10.Remove Duplicates from Sorted Array
Example 1:

Input: nums = [1,1,2]
Output: 2, nums = [1,2,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

class Solution {
    public int removeDuplicates(int[] arr) {
        return fn(arr,0,0);
    }
    static int fn(int arr[],int s,int j)
    {
        if(arr.length==s)
        {
            return j;
        }
        if(s==arr.length-1)
        {
            arr[j++]=arr[s];
        }
        else if(arr[s]!=arr[s+1])
        {
            arr[j++]=arr[s];
        }
        return fn(arr,s+1,j);
    }
}

11.
Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.
 Example 1:

Input: dividend = 10, divisor = 3
Output: 3
Explanation: 10/3 = 3.33333.. which is truncated to 3.
Example 2:

Input: dividend = 7, divisor = -3
Output: -2
Explanation: 7/-3 = -2.33333.. which is truncated to -2.
class Solution {
    public int divide(int a, int b) {
        int ctr=a/b;
        if(a == Integer.MIN_VALUE && b == -1){
            return Integer.MAX_VALUE;
        }
        return ctr;   
    }
}

12.Search in Rotated Sorted Array
Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1
 class Solution {
    public int search(int[] arr, int target) {
        int start=0,end=arr.length-1;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(arr[mid]==target){return mid;}
            if(arr[start]<=arr[mid])
            {
                if(arr[start]<=target && target<=arr[mid])
                {
                    end=mid-1;
                }
                else
                {
                    start=mid+1;
                }
            }
            else
            {
                if(arr[mid]<=target && target<=arr[end])
                {
                    start=mid+1;
                }
                else
                {
                    end=mid-1;
                }
            }
        }
        return -1;
    }
}

13.Find First and Last Position of Element in Sorted Array
Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int arr[]=new int[2];
        arr[0]=PositionOfIndex(nums,target,true);
        arr[1]=PositionOfIndex(nums,target,false);
        return arr;
    }
    static int PositionOfIndex(int arr[],int target,boolean firstindex)
    {
        int ans=-1,start=0,end=arr.length-1;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(target<arr[mid])
            {
                end=mid-1;
            }
            else if(target>arr[mid])
            {
                start=mid+1;
            }
            else 
            {
                ans=mid;
                if(firstindex)
                {
                    end=mid-1;
                }
                else 
                {
                    start=mid+1;
                }
            }
        }
        return ans;
    }
}

13.First Missing Positive
Given an unsorted integer array nums. Return the smallest positive integer that is not present in nums.

You must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.

Example 1:

Input: nums = [1,2,0]
Output: 3
Explanation: The numbers in the range [1,2] are all in the array.
Example 2:

Input: nums = [3,4,-1,1]
Output: 2
Explanation: 1 is in the array but 2 is missing.
 class Solution {
    public int firstMissingPositive(int[] nums) {
        //method:1
        // Set <Integer> temp = new HashSet<Integer>();
        // int i=0;
        // while(i<nums.length)
        // {
        //     if(nums[i]>=0)
        //     {
        //         temp.add(nums[i]);
        //     }
        //     i++;
        // }
        // for(i=1;i<=temp.size();i++)
        // {
        //     if(!temp.contains(i)){return i;}
        // }
        // return -1;

        // method:2
        int i=0;
        while(i<nums.length)
        {
            int temp=nums[i]-1;
            if(nums[i]>0&&nums[i]<=nums.length&&nums[i]!=nums[temp])
            {
                int t=nums[i];
                nums[i]=nums[temp];
                nums[temp]=t;
            }
            else
            {
                i++;
            }
        }
        i=0;
        while(i<nums.length)
        {
            if(nums[i]!=i+1)
            {
                return i+1;
            }
            i++;
        }
        return nums.length+1;
    }
}

14.42. Trapping Rain Water
Solved
Hard
Topics
Companies
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

class Solution {
    public int trap(int[] height) {
        int leftmax=height[0],total=0;
        Stack <Integer> rightMax = new Stack();
        //right max
        rightMax.push(height[height.length-1]);  
        for(int i=height.length-2;i>=2;i--)
        {
            int temp = Math.max(rightMax.peek(),height[i]);
            rightMax.push(temp);
        }
        for(int i=1;i<height.length-1;i++)
        {
            int min = Math.min(rightMax.peek(),leftmax);
            total+=Math.max(0,min-height[i]);

            rightMax.pop();
            leftmax=Math.max(leftmax,height[i]);
        }
        return total;
    }
}

15.Pow(x, n)
Solved
Medium
Topics
Companies
Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

 

Example 1:

Input: x = 2.00000, n = 10
Output: 1024.00000
Example 2:

Input: x = 2.10000, n = 3
Output: 9.26100
Example 3:

Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.
class Solution {
    public double myPow(double x, int n) {
    double ans = 1.0;
    long nn = n;
    if (nn < 0) nn = -1 * nn;
    while (nn > 0) {
      if (nn % 2 == 1) {
        ans = ans * x;
        nn = nn - 1;
      } else {
        x = x * x;
        nn = nn / 2;
      }
    }
    if (n < 0) ans = (double)(1.0) / (double)(ans);
    return ans;
    }
}

16. Maximum Subarray
Solved
Medium
Topics
Companies
Given an integer array nums, find the 
subarray
 with the largest sum, and return its sum.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.
class Solution {
    public int maxSubArray(int[] nums) {
        int i=0,j,max=nums[0],sum=0;
        while(i<nums.length)
        {
            if(sum<0)
            {
                sum=0;
            }
            sum+=nums[i];
            if(sum>max)
            {
                max=sum;
            }
            i++;
        }
        return  max;  
    }
}

18.Given an m x n matrix, return all elements of the matrix in spiral order.
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]

19.Jump Game
Solved
Medium
Topics
Companies
You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.

Return true if you can reach the last index, or false otherwi
Mediu
You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.

Return true if you can reach the last index, or false otherwise.

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.

class Solution {
    public boolean canJump(int[] nums) {
        int max=0;
        for(int i=0;i<nums.length;i++)
        {
            if(i>max) // 0>0 1>3 2>4 4>4
            {
                return false;
            }
            max=Math.max(max,nums[i]+i);// 2 4  
        }
        return true;
    }
}


20.Plus One

You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.
Increment the large integer by one and return the resulting array of digits.

Example 1:

Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].
class Solution {
    public int[] plusOne(int[] digits)
    {
        for(int i=digits.length-1;i>=0;i--)
        {
            if(digits[i]<9)
            {
                digits[i]++;
                return digits;
            }
            digits[i]=0;
        }
        int d[]=new int [digits.length+1];
        d[0]=1;
        return d;
    }
}            

21.
Climbing Stairs
Solved
Easy
Topics
Companies
Hint
You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

Climbing Stairs
Solved
Easy
Topics
Companies
Hint
You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step


class Solution {
    public int climbStairs(int n) {
        int one=1,two=1;
        for(int i=2;i<=n;i++)
        {
            int temp=one+two;
            one=two;
            two=temp;
        }
        return two;
    }
}


22.Set Matrix Zeroes
Solved
Medium
Topics
Companies
Hint
Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.
Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]
Example 2:


Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]

class Solution {
    public void setZeroes(int[][] arr) {
        int col00=1;
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr[i].length;j++)
            {
                if(arr[i][j]==0)
                {
                    //row
                    arr[i][0]=0;
                    //col
                    if(j!=0)
                    {
                        arr[0][j]=0;
                    }
                    else
                    {
                        col00=0;
                    }
                }
            }
        }
        //inside a arr without col1 and row1
        for(int i=1;i<arr.length;i++)
        {
            for(int j=1;j<arr[i].length;j++)
            {
                if(arr[i][0]==0||arr[0][j]==0)
                {
                    arr[i][j]=0;
                }
            }
        }
        if(arr[0][0]==0)
        {
            for(int i=0;i<arr[0].length;i++)
            {
                arr[0][i]=0;
            }
        }
        if(col00==0)
        {
            for(int i=0;i<arr.length;i++)
            {
                arr[i][0]=0;
            }
        }
    }
}


23.
Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]

class Solution {
    public void sortColors(int[] arr) {
        int s=0,e=arr.length-1;
        int i=0;
        while(i<=e)
        {
            if(arr[i]==0)
            {
                int temp=arr[i];
                arr[i]=arr[s];
                arr[s]=temp;
                s++;
                i++;
            }
            else if(arr[i]==2)
            {
                int temp=arr[i];
                arr[i]=arr[e];
                arr[e]=temp;
                e--;
            }
            else if(arr[i]==1)
            {
                i++;
            }
        }
    }
}



25.Pascal's Triangle
// Print Pascal's Triangle in Java
import java.io.*;
class GFG {

    // Pascal function
    public static void printPascal(int n)
    {
        for (int line = 1; line <= n; line++) {
            for (int j = 0; j <= n - line; j++) {

                // for left spacing
                System.out.print(" ");
            }

            // used to represent C(line, i)
            int C = 1;
            for (int i = 1; i <= line; i++) {

                // The first value in a line is always 1
                System.out.print(C + " ");
                C = C * (line - i) / i;
            }
            System.out.println();
        }
    }

    // Driver code
    public static void main(String[] args)
    {
        int n = 4;
        printPascal(n);
    }
}


26.Best Time to Buy and Sell Stock
Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 

class Solution {
    public int maxProfit(int[] prices) {
        int minsharebuy=prices[0],maxprofit=0;
        for(int i=1;i<prices.length;i++)
        {
            int cost = prices[i]-minsharebuy;
            if(cost>maxprofit)
            {
                maxprofit=cost;
            }
            if(minsharebuy>prices[i])
            {
                minsharebuy=prices[i];
            }
        }
        return maxprofit;
    }
}


28.find peak element
 

Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
Example 2:

Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.

class Solution {
    public int findPeakElement(int[] arr) {
        int start=0,end=arr.length-1;
        while(start<end)
        {
            int mid = start+(end-start)/2;
            if(arr[mid]>arr[mid+1])
            {
                end=mid;
            }
            else
            {
                start=mid+1;
            }
        }
        return start;
    }
}


30.
xample 1:

Input: version1 = "1.2", version2 = "1.10"

Output: -1

Explanation:

version1's second revision is "2" and version2's second revision is "10": 2 < 10, so version1 < version2.

Example 2:

Input: version1 = "1.01", version2 = "1.001"

Output: 0

Explanation:

Ignoring leading zeroes, both "01" and "001" represent the same integer "1".

Example 3:

Input: version1 = "1.0", version2 = "1.0.0.0"

Output: 0

Explanation:

version1 has less revisions, which means every missing revision are treated as "0".

class Solution {
    public int compareVersion(String version1, String version2) {
        var a=version1.split("\\.");
        var b=version2.split("\\.");
        for(int i=0;i<Math.max(a.length,b.length);i++)
        {
            var c=i<a.length?Integer.valueOf(a[i]):0;
            var d=i<b.length?Integer.valueOf(b[i]):0;
            if(c>d)
            {
                return 1;
            }
            else if(c<d)
            {
                return -1;
            }
        }
        return 0;
    }
}


31.169. Majority Element
Solved
Easy
Topics
Companies
Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2


class Solution {
    public int majorityElement(int[] nums) {
        //method 1:
        // Arrays.sort(nums);
        // return (nums[nums.length/2]);
        //method 2:
        int num=0,ctr=0;
        for(int i=0;i<nums.length;i++)
        {
            if(ctr==0)
            {
                num=nums[i];
                ctr=1;
            }
            else if(num==nums[i])
            {
                ctr++;
            }
            else 
            {
                ctr--;
            }
        }
        ctr=0;
        for(int i=0;i<nums.length;i++)
        {
            if(num==nums[i]){ctr++;}
        }
        if(ctr>nums.length/2)
        {
            return num;
        }
        return -1;
    }
}


32.171. Excel Sheet Column Number
Solved
Easy
Topics
Companies
Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.

For example:

A -> 1
B -> 2
C -> 3
...
Z -> 26
AA -> 27
AB -> 28 
...

Example 1:

Input: columnTitle = "A"
Output: 1
Example 2:

Input: columnTitle = "AB"
Output: 28
Example 3:

Input: columnTitle = "ZY"
Output: 701
 
Constraints:

class Solution {
    public int titleToNumber(String columnTitle) {
        int sum=0,i;
        for(i=0;i<columnTitle.length();i++)
        {
            int a=columnTitle.charAt(i)-'A'+1;
            sum+=a*Math.pow(26,columnTitle.length()-i-1);   
        }
        return sum;
    }
}


34.Boats to Save People
Solved
Medium
Topics
Companies
You are given an array people where people[i] is the weight of the ith person, and an infinite number of boats where each boat can carry a maximum weight of limit. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most limit.

Return the minimum number of boats to carry every given person.

 

Example 1:

Input: people = [1,2], limit = 3
Output: 1
Explanation: 1 boat (1, 2)
Example 2:

Input: people = [3,2,2,1], limit = 3
Output: 3
Explanation: 3 boats (1, 2), (2) and (3)
Example 3:

Input: people = [3,5,3,4], limit = 5
Output: 4
Explanation: 4 boats (3), (3), (4), (5)


class Solution {
    public int numRescueBoats(int[] people, int limit) {
        Arrays.sort(people);
        int start=0,end=people.length-1,ctr=0;
        while(start<=end)
        {
            if(people[start]+people[end]>limit) // single person and single boat are asscepted 
            {
                ctr++;
                end--;
            }
            else
            {
                ctr++;
                end--;
                start++;
            }
        }
        return ctr;
    }
}

