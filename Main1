
import java.util.*;

class CustmerDetails 
{
    int custId;
    int accountNo;
    String name;
    int balance;
    String encryptedPwd;

    public CustmerDetails(int custId,int accountNo , String name ,int balance , String encryptedPwd) 
    {
        this.custId=custId;
        this.accountNo=accountNo;
        this.name=name;
        this.balance=balance;
        this.encryptedPwd=encryptedPwd; 
    }

}
public class Main 
{
    static Map<Integer,CustmerDetails>custmerDetails = new HashMap<>();
    static Scanner scan = new Scanner(System.in);
    static  int custId=55,accountNo=555;
    public static void main(String[] args) 
    {
        //1.
        custmerDetails.put(111,(new CustmerDetails(1, 111, "Kumar", 10000, "ApipNbjm")));
        custmerDetails.put(222,(new CustmerDetails(2, 222, "Madhu", 20000, "Cboljoh")));
        custmerDetails.put(333,(new CustmerDetails(3, 333, "Rahul", 30000, "dbnqvt")));
        custmerDetails.put(444,(new CustmerDetails(4, 444, "Robin", 40000, "aaa999")));

        displayCustomerDetails();

        while(true)
        {
            
            System.out.println("1.Add New Customers \n2.display Account details 3.Login with customerid and password \n");
            int userOption=scan.nextInt();
            scan.nextLine();

            //1.Add New Customer
            if(userOption==1)
            {
                addNewCustomers();            
            }
            else if(userOption==2)
            {
                displayCustomerDetails();
            }
            else if(userOption==3)
            {
                loginCustomerid();
            }
        }
    }    


    //2.
    static void addNewCustomers()
    {
        System.out.print("\nAdd New Customer Page \n");
        System.out.print("Enter Your Name: ");
        String name = scan.nextLine();

        while(true) 
        {
            System.out.print("Enter password: ");
            String enterPassword = scan.nextLine();
            System.out.print("Re-enter password: ");
            String reEnterPassword = scan.nextLine();
            if(enterPassword.equals(reEnterPassword))
            {
                if(namePasswordExist(name, enterPassword))
                {
                    System.out.println("Enter name and password already Exits Please Enter again :( ");
                    continue;
                }
                else 
                {
                    custmerDetails.put(accountNo, new CustmerDetails(custId, accountNo, name, custId, enterPassword));
                    custId+=11;
                    accountNo+=111;
                    System.out.println(" Account is Created ");
                    break;
                }
            }
            else 
            {
                System.out.println("Enter password and reEnter password not same plese enter again :( ");
                continue;
            }
        }
        
    }
    //3.
    static String encryptionPassword(String password)
    {
        String decrptionPassword="";
        for(char i:password.toCharArray())
        {
            decrptionPassword+=
            (
                              (i=='z')?'a':
                              (i=='Z')?'A':
                              (i=='9')?'0':(char)(i+1)
            );
        }
        return decrptionPassword;
    }

    //4.
    static boolean custIdPasswordExist(int custId ,String password)
    {
        for(CustmerDetails values : custmerDetails.values())
        {
            if((values.custId)==custId && (values.encryptedPwd).equals(password))
            {
                return true;
            }
        }
        return false;
    }

    //5.
    static void loginCustomerid ()
    {
        System.out.println();
        System.out.print("Enter customer id: ");
        int custId=scan.nextInt();
        System.out.println("Enter Password: ");
        String password=scan.nextLine();
        while (true) 
        { 
            if(custIdPasswordExist(custId, password)) 
            {
                System.out.println("Succesfull login");
                while(true)
                {
                    System.out.println("1.ATM Withdrawal \n2.Cash Deposit \n3.Account Transfer\n4.Logout");
                    int userOption=scan.nextInt();
                    if(userOption==1)
                    {

                    }
                    else if(userOption==2) 
                    {

                    }
                    else if(userOption==3) 
                    {
                        
                    }
                    else if(userOption==4)
                    {
                        return;
                    }
                    else 
                    {
                        System.out.println("Plese Enter correct options :( ");
                    }


                }
            }  
            else 
            {
                System.out.print("Enter Customer and Password does not extits enter again :( ");
            }
        }
    }

    static boolean namePasswordExist(String name ,String password)
    {
        for(CustmerDetails values : custmerDetails.values())
        {
            if((values.name)==name && (values.encryptedPwd).equals(password))
            {
                return true;
            }
        }
        return false;
    }

    static void displayCustomerDetails()
    {
        System.out.println("displayCustomerDetails:      \n");
        for(Map.Entry<Integer,CustmerDetails> i : custmerDetails.entrySet())
        {
            CustmerDetails details = i.getValue();       
            System.out.println("S.No  CustomerId  AccountNo  Name    Balance   Password");
            System.out.printf("%-5d %-11d %-10d %-7s %-9d %s   %n", 
                              i.getKey(), details.custId, details.accountNo, details.name, details.balance, details.encryptedPwd);
        }
        System.out.println();


        // List<Integer> sortedKeys = new ArrayList<>(custmerDetails.keySet());
        // Collections.sort(sortedKeys);  // Sorting in ascending order

        // System.out.println("HashMap (Sorted by Keys):");
        // for (Integer key : sortedKeys) 
        // {
        //     System.out.println(key + " -> " + custmerDetails.get(key).name);
        // }

    }
}






--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




//1.introductions

/*
1.history:

2.differs:
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
   c                                                c++                                          java
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. Procedure-oriented programming (POP)             oops language                                Advantance oops language
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. without class can write the code                 without class can write the code             class must to write the code
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. language was first released in 1972              language was first released in 1985.         first publicly released in May 1995 by Sun Microsystems
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. Developed by Dennis Ritchie at Bell              Developed by Bjarne Stroustrup at Bell       It was developed by James Gosling at Sun Microsystems in the mid-1995s.
   Labs in the early 1970s.                         Labs in the early 1980s
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. current version of the C programming             The current version of C++ is C++23          Java SE 23.0 (LTS- long term support means every six month java will version will change or upgrade)
   language is C23
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6.                                                                                               The first stable version, JDK 1.0.2, is called Java 1.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7.                                                                                               Oracle Corporation owns the official implementation of the Java SE
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8. Independent language                              Dependent on C (C++ is an extension of      Independent Language (influenced by C and C++ but designed to be platform-independent).
   (developed from B but not dependent               C with object-oriented features)
   on another language)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9. support opeartor overloading and                  support opeartor overloading and            do not support opeartor overloading and pointer 
   pointers                                          pointer
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
10. Architetural unneutral                           Architetural unneutral                      Architetural neutral int byte alway 4 bytes
    because of int 2 or 4 bytes                      because of int 2 or 4 bytes
    depend on the system                             depend on the system
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
11. extension: sample.c                              extension:sample.cpp                       extension:sample.java
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



3.java program how it run:
    -----------------------------------------------------------------------------------------------------------------------
                                                        byte code 
    java code         --->      complier                --------->                  JVM   ------> output 
    (sample.java)               javac sample.java       class file (101103)                       (java sample)
    -----------------------------------------------------------------------------------------------------------------------

    Java is platform-independent Sample because it is compiled to a bytecode that  can be run on any device that has a Java Virtual Machine (JVM). 
    This means that you can write a Java program javac on one platform (such as Windows) java and then run it on a different platform (such as macOS or Linux) without making any changes to the code
    but JVM is platform dependent because configuration of each os is differs


4.                                

                         JDK (JAVA DEVELOPEMENY KIT)
                            |                 |
                          complier            JRE (JAVA RUNTIME ENVIROMENT)
                            |                 |
                            |                 |
                        (byte code)           |   JRE give the libries to JVM to run the code
                            |                 |
                            |                 |
                            |                 V
                            |---------------> JVM (JAVA VITURAL MANCHINE) ------------> output

    1. JDK (Java Development Kit) 
    Includes JRE + Development Tools (compiler, debugger, etc.).
    Used for developing and running Java programs.
 
    2. JRE (Java Runtime Environment) 
    Includes JVM + Java Libraries needed to run Java programs.
    Cannot compile Java code, only runs it.

    3️. JVM (Java Virtual Machine)
    Executes Java bytecode by converting it to machine code.
    Platform-dependent implementation but runs platform-independent bytecode.

5.IDE (Integrated Development Environment)
    An IDE is a software that combines tools like code editor, compiler, and debugger to
    make development easier and faster.
    Like:vs code

6.Java Features:
    OOP: Supports Object-Oriented Programming (Encapsulation, Inheritance, Polymorphism).
    Multithreading: Runs multiple threads simultaneously.
    Exception Handling: Manages errors with try-catch.
    Portability: Runs on any platform with JVM.
    Garbage Collection: Automatic memory management.
    Security: Built-in security features for safe execution.
    Java = OOP + Multithreading + Portability 

7.POP vs OOP (Short and Sweet)
    Procedure-Oriented Programming (POP):
        Focuses on functions (procedures).
        Code is written as a sequence of instructions.
        Data is separate from functions.
        Example: C.
    Object-Oriented Programming (OOP):
        Focuses on objects (data + functions).
        Data and functions are encapsulated together in objects.
        Features like inheritance, polymorphism, and encapsulation.
        Example: Java, C++.

8.Compiler vs Interpreter
    Compiler:
        Translates the whole program into machine code before execution.
        Faster execution after compilation.
        Example: C, C++.
    Interpreter:
        Translates the program line by line during execution.
        Slower execution because it translates as it runs.
        Example: Python, JavaScript.
   
    Java is a combination of both:
    Compiler: Java code is compiled into bytecode.
    Interpreter: The JVM interprets and executes the bytecode.

9.
    public class main1 
    {
        public static void main(String[] args) {
            System.out.println("h");
        }
    }

    The program defines a class main1 with a main method. The main method is the entry point of the 
    program and uses System.out.println("Hello world"); to print "Hello world" to the console.
    The import java.util.*; line imports utility classes, though it's not used here. The program uses
    public to make the class and method accessible, static for method calling without an object, and 
    void indicates no return value. The String[] args allows the program to accept command-line arguments
    
    In Java, String[] args is a way to pass values to your program from the command line when you run it.
    These values are stored in an array called args, and you can use them in your program.
    For example, if you run a Java program like this:
        java main1 Hello
    args[0] will hold "Hello" because it's the first value passed from the command line.

10. keyword
    .keywords are special words which are used to recognize the structure of the program
    .each keyword will be having some specific task

11.
    The statement int a = 10; in Java means:
        int: Declares a variable of type integer.
        a: The name of the variable.
        10: The value assigned to the variable a.
        ;: Marks the end of the statement.

12.
    identifiers are names used to identify variables, methods, classes, and other elements in a program. 
    They must:
        Begin with a letter, underscore (_), or dollar sign ($).
        Be followed by letters, digits, underscores, or dollar signs.
        Not be a Java keyword (like int, class, etc.).
    For example:
        a, _name, and MyClass are valid identifiers.
        10variable and int are invalid identifiers.
        

13.byte and bit?
    Bit is the smallest unit of data (0 or 1), while byte is 8 bits grouped together to represent data.
    Example 
                                  
           128 --> 1 0 0 0 0 0 0 0
                        _
                      (bit)
                   --------------
                      (bytes)

14.data type
    primitive data type:byte,short,int,long int,float,double char boolean
    non-primitive data type:class,string,array
        (    
            Primitive data types are basic types like int, char, and boolean, while non-primitive data 
            types are objects and classes like String, arrays, and user-defined classes.
        )


    DataType	Size(Bits)  	Size (Bytes)	Range	                    Format Specifier
    byte    	8	            1           	-128 to 127	                    %d
    short	    16	            2	            -32,768 to 32,767	            %d
    int	        32	            4	            -2^31 to 2^31 - 1	            %d
    long	    64	            8	            -2^63 to 2^63 - 1	            %d
    float	    32	            4	            -3.4E+38 to 3.4E+38 (approx.)	%f
    double	    64          	8	            -1.7E+308 to 1.7E+308 (approx.)	%f
    char	    16             	2	            0 to 65,535 (Unicode)	        %c
    boolean	    -	            1 (not fixed)	true or false	                %b
    String	    -	            Variable	    N/A	                            %s


15.
    1. Variables (Camel Case):
        Format: Start with a lowercase letter, and each subsequent word starts with an uppercase letter.
            Example:
            studentName
            totalAmount
            userAge
    2. Methods (Camel Case, starting with a verb):
        Format: Use camel case for method names, starting with a lowercase letter.
        Example:
            getName() (getter)
            setAge(int age) (setter)
            calculateTotal()
    3. Classes (Pascal Case):
        Format: Class names begin with an uppercase letter and use Pascal case.
        Example:
            StudentDetails
            EmployeeInfo
            ProductCatalog
    4. Objects (Camel Case):
        Format: Object names follow camel case, typically lowercase.
        Example:
            student1
            employeeDetails
            carModel
    5. Constants (Upper Case with Underscores):
        Format: Constants are written in all uppercase letters with words separated by underscores.
        Example:
            PI
            MAX_LIMIT
            DEFAULT_COLOR

16.Common Special Characters and Their Names
| Symbol  | Name                           |
|---------|--------------------------------|
| `       | Backtick / Grave Accent        |
| ~       | Tilde                          |
| !       | Exclamation Mark               |
| @       | At Symbol                      |
| #       | Hash / Pound / Number Sign     |
| $       | Dollar Sign                    |
| %       | Percent Sign                   |
| ^       | Caret                          |
| &       | Ampersand                      |
| *       | Asterisk                       |
| (       | Left Parenthesis               |
| )       | Right Parenthesis              |
| _       | Underscore                     |
| -       | Hyphen / Dash                  |
| +       | Plus Sign                      |
| =       | Equals Sign                    |
| /       | Forward Slash                  |
| \       | Backslash                      |
| }       | Right Curly Brace              |
| ]       | Right Square Bracket           |
| {       | Left Curly Brace               |
| [       | Left Square Bracket            |
| >       | Greater Than Sign              |
| <       | Less Than Sign                 |
| .       | Period / Dot                   |
| ,       | Comma                          |
| ?       | Question Mark                  |


17.printf():

public class main1 
{
    public static void main(String[] args) 
    {
        int n = 2;
        float b = 2.34234f;
        System.out.printf("%."+n+"f", b);   

        n=2;
        System.out.printf("%2d\n", n);   // Output: " 5"  (right-aligned, 2 width)
        System.out.printf("%02d\n", n);  // Output: "05"  (zero-padded, 2 width)
        System.out.printf("%03d\n", n);  // Output: "005" (zero-padded, 3 width)

        System.out.printf("%.2f\n", b);   // Output: "2.35" (2 decimal places)
        System.out.printf("%7.3f\n", b);  // Output: "  2.346" (7 width, 3 decimal places)
        System.out.printf("%07.3f\n", b); // Output: "002.346" (zero-padded)

        String str = "Java";
        System.out.printf("%10s\n", str);  // Output: "      Java" (right-aligned, 10 width)
        System.out.printf("%-10s\n", str); // Output: "Java      " (left-aligned)
        System.out.printf("%.2s\n", str);  // Output: "Ja" (first 2 characters)

        char ch = 'A';
        System.out.printf("%c\n", ch);  // Output: "A"
        System.out.printf("%5c\n", ch); // Output: "    A" (right-aligned, 5 width)

        boolean flag = true;
        System.out.printf("%b\n", flag);   // Output: "true"
        System.out.printf("%10b\n", flag); // Output: "      true" (right-aligned)

        int num = 10;
        System.out.printf("%o\n", num);  // Output: "12" (Octal representation of 10)

        num = 255;
        System.out.printf("%x\n", num);  // Output: "ff" (Lowercase hexadecimal)
        System.out.printf("%X\n", num);  // Output: "FF" (Uppercase hexadecimal)
        
        double d = 12345.6789;
        System.out.printf("%e\n", d);  // Output: "1.234568e+04"
        System.out.printf("%E\n", d);  // Output: "1.234568E+04"

        d = 12345.6789;
        System.out.printf("%g\n", d);  // Output: "12345.7" (Removes trailing zeros)
        System.out.printf("%G\n", d);  // Output: "12345.7" (Uppercase variant)

        Object obj = new Object();
        System.out.printf("%h\n", obj);  // Output: "15db9742" (Hashcode in lowercase)
        System.out.printf("%H\n", obj);  // Output: "15DB9742" (Hashcode in uppercase)

        num = 10;
        System.out.printf("%+d\n", num);  // Output: "+10" (Always shows sign)

        num = 10;
        System.out.printf("%+d\n", num);  // Output: "+10" (Always shows sign)
        
        num = 7;
        System.out.printf("Right aligned: %4d\n", num);  // "   7"
        System.out.printf("Left aligned: %-4d|\n", num); // "7   |"

        num = 7;
        System.out.printf("%05d\n", num);  // Output: "00007" (Zero-padded, 5 width)

        num = 1000000;
        System.out.printf("%,d\n", num);  // Output: "1,000,000" (Comma separator)
        
        num = -100;
        System.out.printf("%(d\n", num);  // Output: "(100)" (Negative numbers in parentheses)

        int width = 6; 
        num = 42;
        System.out.printf("%*d\n", width, num);  // Output: "    42" (Dynamically sets width)
    }
}


19.scanner():

import java.util.Scanner;
public class InfiniteInput {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        while (scan.hasNextInt()) {
            int num = scan.nextInt();
            System.out.println("You entered: " + num);
        }
    }
}

import java.util.Scanner;
public class InfiniteStringInput {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        while (scan.hasNext()) { // Reads continuously
            String word = scan.next(); // Reads one word at a time
            System.out.println("You entered: " + word);
        }
    }
}


20.Meaning of System.out.println()
    System → A built-in class that provides access to system-related functionality.
    out → A static object of PrintStream class used to print output.
    println() → A method of PrintStream that prints the argument and moves to the next line.


21.Difference Between length and length() in Java

        length (Without Parentheses)
            Used with arrays to get the number of elements.
            Example:
                int[] arr = {1, 2, 3, 4, 5};
                System.out.println(arr.length); // Output: 5

        length() (With Parentheses)
            Used with strings to get the number of characters.
            Example:
                String str = "Hello";
                System.out.println(str.length()); // Output: 5

22.Stack vs Heap (Short & Sweet)
    Stack
        Used for method execution and local variables.
        Follows LIFO (Last In, First Out) order.
        Memory is automatically managed when a method ends.
    Heap
        Used for objects and instance variables (created using new).
        Objects stay in memory until garbage collected.
        Slower than the stack but allows dynamic memory allocation.
    Simple Example:
    class Example 
    {
        int a = 10; // Stored in Heap (Instance variable)

        void method() 
        {
            int b = 20; // Stored in Stack (Local variable)
        }

        public static void main(String[] args) 
        {
            Example obj = new Example(); // 'obj' reference in Stack, object in Heap
            obj.method();
        }
    }
    Memory Allocation:
        a (instance variable) → Heap
        b (local variable) → Stack
        obj (reference) → Stack, but points to an object in Heap



23.Compile-time vs Runtime (Short & Sweet)
    Compile-time: Errors are checked before execution.
        Compile-time error (Syntax mistake)
        int x = "Hello"; // Error: Type mismatch

    Runtime: Errors occur during execution.
        // Runtime error (Division by zero)
        int a = 10 / 0; // Throws ArithmeticException

24.Student student = new Student();
    1.Compilation Phase (Compile-time)
        .The compiler checks for syntax errors and ensures that the Student class exists.
        .No memory is allocated yet.
    2.Execution Phase (Runtime)
        .The new Student() part allocates memory in the heap and creates an object.
        .student (reference variable) is stored in the stack, pointing to the object in the heap.
    Conclusion
        Class checking → Compile-time
        Object creation → Runtime

25.Type Casting in Java (Short & Sweet)
    Type casting is converting one data type into another.
        Types of Type Casting
            1.Implicit (Widening) – Automatic conversion from smaller to larger type.
            int num = 10;
            double d = num; // int → double (Widening)

            2.Explicit (Narrowing) – Manual conversion from larger to smaller type.
            double d = 10.5;
            int num = (int) d; // double → int (Narrowing)

    Casting Order (Widening)
    byte → short → int → long → float → double

    Casting Order (Narrowing)
    double → float → long → int → short → byte


26.
    public class main1 
    {
        public static void main(String[] args) 
        { 

            int n = 1;
            System.out.println(n = 10); //10
            System.out.println(n);   //10
        }
    }

*/

//__________________________________________________________________________________________________________________________________________________________________________________________________________________________________

/* 
2.Operaotor:

    // An operator in Java is a symbol that performs operations on variables and values. Java provides different types of operators, such as:
        // Arithmetic Operators (+, -, *, /, %) – Perform mathematical operations.
        // Relational (Comparison) Operators (==, !=, >, <, >=, <=) – Compare values.
        // Logical Operators (&&, ||, !) – Perform logical operations.
        // Bitwise Operators (&, |, ^, ~, <<, >>, >>>) – Work at the bit level.
        // Assignment Operators (=, +=, -=, *=, /=, %=) – Assign values to variables.
        // Unary Operators (+, -, ++, --, !) – Operate on a single operand.
        // Ternary Operator (?:) – Acts as a shorthand for if-else.
        // Instanceof Operator (instanceof) – Checks if an object is an instance of a class.


public class main1 {
    public static void main(String[] args) 
    {
        int a = 10, b = 5;

        // Arithmetic Operators
        System.out.println("Addition: " + (a + b));  // 15
        System.out.println("Modulus: " + (a % b));   // 0

        // Relational Operators
        System.out.println("a > b: " + (a > b));  // true

        // Logical Operators
        boolean x = true, y = false;
        System.out.println("x && y: " + (x && y));  // false

        // Bitwise Operators
        System.out.println("a & b: " + (a & b));  // 0
        System.out.println("a | b: " + (a | b));  // 15
        System.out.println("a ^ b: " + (a ^ b));  // 15 (XOR)
        // Bitwise NOT (~) - Equivalent to -(a + 1)
        System.out.println("~a: " + (~a));  // -11, equivalent to -(a + 1) => -(10 + 1) = -11

        // Shift Operators
        // Left Shift (<<) - Equivalent to a * (2^1)
        System.out.println("a << 1: " + (a << 1));  // 20, equivalent to 10 * 2^1 = 20
        // Right Shift (>>) - Equivalent to a / (2^1)
        System.out.println("a >> 1: " + (a >> 1));  // 5, equivalent to 10 / 2^1 = 5

        // Assignment Operators
        int c = 20;
        c += 10;  // Same as c = c + 10;
        System.out.println("c after +=: " + c);  // 30

        // Unary Operators
        int d = 5;
        System.out.println("Increment: " + (++d));  // 6
        System.out.println("Negation: " + (-d));  // -6

        // Ternary Operator
        int min = (a < b) ? a : b;
        System.out.println("Smaller number: " + min);  // 5

        // instanceof Operator
        String str = "Hello";
        System.out.println("str instanceof String: " + (str instanceof String));  // true
            // class Animal {}
            // class Dog extends Animal {}
            
            // public class InstanceofExample {
            //     public static void main(String[] args) {
            //         Dog d = new Dog();
            //         System.out.println(d instanceof Dog);    // true (d is a Dog)
            //         System.out.println(d instanceof Animal); // true (d is also an Animal)
            //     }
            // }


        // % --> modulus --> remainder
        // System.out.println(0%10);//0
        // System.out.println(10%0); // Exception in thread "main" java.lang.ArithmeticException: / by zero
        // System.out.println(1%10); //1
        // System.out.println(10%1); //0
        // System.out.println(7%10); //7
        // System.out.println(10%7); //3
        // System.out.println(-7%10); //-7
        // System.out.println(-10%7); //-3
        // System.out.println(7%-10); //7
        // System.out.println(10%-7); //3
        // System.out.println(-7%-10); //-7
        // System.out.println(-10%-7); //-3

        // / --> division --> quotient
        // System.out.println(0/10);//0
        // System.out.println(10/0); // Exception in thread "main" java.lang.ArithmeticException: / by zero
        // System.out.println(1/10); //0
        // System.out.println(10/1); //10
        // System.out.println(7/10); //0
        // System.out.println(10/7); //1
        // System.out.println(-7/10); //0
        // System.out.println(-10/7); //-1
        // System.out.println(7/-10); //0
        // System.out.println(10/-7); //-1
        // System.out.println(-7/-10); //0
        // System.out.println(-10/-7); //1

    }
}


*/

//__________________________________________________________________________________________________________________________________________________________________________________________________________________________________
/*
    3.Control Statements / Structures in Java

    A statement that causes a jump of control from one part of the program to another is called control structure or control statement.
    These are used to alter the control flow.
        Types of Control Statements:
        1.Conditional Statements [if, if else, else if ladder, nested if, switch]
        2.Iterative / Looping Statements [for, while, do-while, Enhanced for loop]
        3.Unconditional Jump Statements [break, continue]


public class main1{ 
    public static void main(String[] args) {
        
        // 1. Conditional Statements
            int num = 10;

            // if-else
            if (num > 5) {
                System.out.println("num is greater than 5");
            } else {
                System.out.println("num is 5 or less");
            }
            
            // if-else if ladder
            if (num > 15) {
                System.out.println("num is greater than 15");
            } else if (num > 5) {
                System.out.println("num is greater than 5 but less than or equal to 15");
            } else {
                System.out.println("num is 5 or less");
            }
            
            // Nested if
            if (num > 0) {
                if (num % 2 == 0) {
                    System.out.println("num is positive and even");
                } else {
                    System.out.println("num is positive and odd");
                }
            }
            
            // Switch
                // 1. Switch with Integer (int)
                num = 2;
                System.out.println("Switch with Integer:");
                switch (num) {
                    case 1:
                        System.out.println("Number is One");
                        break;
                    case 2:
                        System.out.println("Number is Two");
                        break;
                    case 3:
                        System.out.println("Number is Three");
                        break;
                    default:
                        System.out.println("Number is not 1, 2, or 3");
                }
                
                // 2. Switch with String
                String day = "Monday";
                System.out.println("\nSwitch with String:");
                switch (day) {
                    case "Monday":
                        System.out.println("It's Monday!");
                        break;
                    case "Tuesday":
                        System.out.println("It's Tuesday!");
                        break;
                    case "Wednesday":
                        System.out.println("It's Wednesday!");
                        break;
                    default:
                        System.out.println("Not a valid day");
                }
                
                // 3. Switch with Character
                char grade = 'B';
                System.out.println("\nSwitch with Character:");
                switch (grade) {
                    case 'A':
                        System.out.println("Excellent");
                        break;
                    case 'B':
                        System.out.println("Good");
                        break;
                    case 'C':
                        System.out.println("Average");
                        break;
                    default:
                        System.out.println("Invalid grade");
                }
        
        // 2. Iterative / Looping Statements
        
            // For loop
            System.out.println("\nFor Loop:");
            for (int i = 1; i <= 3; i++) {
                System.out.println("Iteration " + i);
            }
            
            // While loop
            System.out.println("\nWhile Loop:");
            int i = 1;
            while (i <= 3) {
                System.out.println("Iteration " + i);
                i++;
            }
            
            // Do-while loop
            System.out.println("\nDo-While Loop:");
            int j = 1;
            do {
                System.out.println("Iteration " + j);
                j++;
            } while (j <= 3);
            
            // Enhanced for loop (for-each loop)
            System.out.println("\nEnhanced For Loop:");
            int[] nums = {1, 2, 3};
            for (int n : nums) {
                System.out.println("Number: " + n);
            }
        
        // 3. Unconditional Jump Statements
            // Break
            System.out.println("\nBreak Statement:");
            for (int k = 1; k <= 5; k++) {
                if (k == 3) {
                    break;  // Exit loop when k equals 3
                }
                System.out.println("k = " + k);
            }
            
            // Continue
            System.out.println("\nContinue Statement:");
            for (int k = 1; k <= 5; k++) {
                if (k == 3) {
                    continue;  // Skip this iteration when k equals 3
                }
                System.out.println("k = " + k);
            }

            i = 2;  // Assuming i is 2
            System.out.println("\nDo-While Loop:");
            j = 1;
            do 
            {
                System.out.println("Iteration " + j);
                j++;
                if (i == 2) 
                {
                    continue;  // Skips the rest of the loop and moves to the next iteration
                }
                System.out.print("Hii " + j);  // This will only be executed if i != 2
            } while (j <= 3);
    }
}
*/
import java.util.*;
public class main1 {
    public static void main(String[] args) {
        ArrayList<Student> students = new ArrayList<>();

        // Adding records
        students.add(new Student(1, "John"));
        students.add(new Student(2, "Emma"));
        students.add(new Student(3, "Alex"));

        // Display all records
        System.out.println("All Students: " + students);

        // Updating a record (Updating the name of student with ID 2)
        for (Student s : students) {
            if (s.id == 2) {
                s.name = "Emily";  // Updating the name
                break;
            }
        }
        System.out.println("After Update: " + students);

        // Deleting a record (Removing student with ID 1)
        students.removeIf(s -> s.id == 1);
        System.out.println("After Deletion: " + students);

        // Getting a specific record (Retrieving student with ID 3)
        for (Student s : students) {
            if (s.id == 3) {
                System.out.println("Retrieved Record: " + s);
                break;
            }
        }
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


// 1. Folder Creation
    // import java.io.File;
    // public class file1 
    // {
    //     public static void main(String args[])
    //     {
    //         File file = new File("D:\\VSC IMPORTANT FILE\\LANG\\JAVA 1\\JAVA(i)\\java files\\FILE HANDLING\\TEMP1");
    //         if(file.exists())
    //         {
    //             System.out.print("File exists");
    //         }
    //         else
    //         {
    //             System.out.print("creted");
    //             file.mkdir();
    //         }
    //     }
    // }


//2.Sub Folder Creation
    // import java.io.File;
    // public class file1 
    // {
    //     public static void main(String args[])
    //     {
    //         File file = new File("D:\\VSC IMPORTANT FILE\\LANG\\JAVA 1\\JAVA(i)\\java files\\FILE HANDLING\\TEMP1\\TEMP2\\TEMP3");
    //         if(file.exists())
    //         {
    //             System.out.print("File exists");
    //         }
    //         else
    //         {
    //             System.out.print("creted");
    //             file.mkdirs();
    //         }
    //     }
    // }


//3.File Creation
    // import java.io.File;
    // public class file1 
    // {
    //     public static void main(String args[])
    //     {
    //         File file = new File("D:\\VSC IMPORTANT FILE\\LANG\\JAVA 1\\JAVA(i)\\java files\\FILE HANDLING\\TEMP1\\text1.txt");
    //         if(file.exists())
    //         {
    //             System.out.print("File exists");
    //         }
    //         else
    //         {
    //             try 
    //             {
    //                 file.createNewFile();
    //                 System.out.println("creted");    
    //             } 
    //             catch (Exception e) 
    //             {
    //                 e.printStackTrace();
    //             }
    //             finally
    //             {
    //                 System.out.println("pp");
    //             }
    //         }
    //     }
    // }

//4.File Deletion
    // import java.io.File;
    // public class file1 
    // {
    //     public static void main(String args[])
    //     {
    //         File file = new File("D:\\VSC IMPORTANT FILE\\LANG\\JAVA 1\\JAVA(i)\\java files\\FILE HANDLING\\TEMP1\\text1.txt");
    //         file.delete();
    //     }
    // }


// 5. Renaming File text1 to TEXT1.txt
    // import java.io.File;
    // public class file1 
    // {
    //     public static void main(String args[])
    //     {
    //         File file = new File("D:\\VSC IMPORTANT FILE\\LANG\\JAVA 1\\JAVA(i)\\java files\\FILE HANDLING\\TEMP1\\text1.txt");
    //         File NewFile = new File("D:\\VSC IMPORTANT FILE\\LANG\\JAVA 1\\JAVA(i)\\java files\\FILE HANDLING\\TEMP1\\TEXT1.txt");
    //         file.renameTo(NewFile);
    //     }
    // }

// 6. Printing File Name
// import java.io.File;
// public class file1 
// {
//     public static void main(String args[])
//     {
//         File file = new File("D:\\VSC IMPORTANT FILE\\LANG\\JAVA 1\\JAVA(i)\\java files\\FILE HANDLING\\TEMP1\\TEXT1.txt");
//         System.out.println(file.getName());
//         System.out.println(file.canExecute());
//         System.out.println(file.canRead());
//         System.out.println(file.canWrite());
//     }
// }

//7. Listing all files and folders in a Directory 
// import java.io.File;
// public class file1 
// {
//     public static void main(String args[])
//     {
//         File file = new File("D:\\");
//         String str[]=file.list();
//         for(String i:str)
//         {
//             System.out.println(i+" ");
//         }
//     }
// }

// 8. Listing only files in a Directory 
    // import java.io.File;
    // public class file1 
    // {
    //     public static void main(String args[])
    //     {
    //         File file = new File("D:\\VSC IMPORTANT FILE");
    //         File str[]=file.listFiles();
    //         for(File i:str)
    //         {
    //             if(i.isFile())
    //             {
    //                 System.out.print(i+" ");
    //             }
    //         }
    //     }
    // }

// 9. Listing only folder in a Directory 
    // import java.io.File;
    // public class file1 
    // {
    //     public static void main(String args[])
    //     {
    //         File file = new File("D:\\VSC IMPORTANT FILE");
    //         File str[]=file.listFiles();
    //         for(File i:str)
    //         {
    //             if(i.isDirectory())
    //             {
    //                 System.out.println(i+" ");
    //             }
    //         }
    //     }
    // }

//10.Listing only txt files in a Directory
    // import java.io.File;
    // public class file1 
    // {
    //     public static void main(String args[])
    //     {
    //         File file = new File("D:\\VSC IMPORTANT FILE");
    //         File str[]=file.listFiles();
    //         for(File i:str)
    //         {
    //             if(i.isFile() && (i.getName()).contains(".txt") )
    //             {
    //                 System.out.println(i+" ");
    //             }
    //         }
    //     }
    // }

//11. Listing files based on their size in a Directory
//1kb -- > 8000bit
    // import java.io.File;
    // public class file1 
    // {
    //     public static void main(String args[])
    //     {
    //         File file = new File("D:\\VSC IMPORTANT FILE");
    //         File str[]=file.listFiles();
    //         for(File i:str)
    //         {
    //             if(i.isFile() && i.length() >30 )
    //             {
    //                 System.out.println(i+" ");
    //             }
    //         }
    //     }
    // }



    
// 12. Listing files based on their size in a Directory delete
// 1kb -- > 8000bit
    // import java.io.File;
    // public class file1 
    // {
    //     public static void main(String args[])
    //     {
    //         File file = new File("D:\\VSC IMPORTANT FILE");
    //         File str[]=file.listFiles();
    //         for(File i:str)
    //         {
    //             if(i.isFile() && i.length() >30 )
    //             {
    //                 i.delete();
    //             }
    //         }
    //     }
    // }


// 13. File Writer and File Writer

// import java.io.File;
// import java.io.FileReader;
// import java.io.FileWriter;
//     public class file1 
//     {
//         public static void main(String args[])
//         {

//             // file creations
//             File file = new File("D:\\VSC IMPORTANT FILE\\LANG\\JAVA 1\\JAVA(i)\\java files\\FILE HANDLING\\text.txt");
//                 try 
//                 {
//                     file.createNewFile();
//                     FileWriter writer = new FileWriter(file,false);
//                     writer.write("LOKESH ");
//                     writer.write(97);  //a
//                     writer.flush();
//                     writer.close();

//                     FileReader reader = new FileReader(file);
//                     int op = reader.read();
//                     while(op!=-1)
//                     {
//                         System.out.print((char)(op));
//                         op=reader.read();
//                     }

//                     System.out.println();
//                     //char length
//                     char ch[]=new char[(int)(file.length())];
//                     System.out.println(ch.length);

//                 } 
//                 catch (Exception e) 
//                 {
//                     e.printStackTrace();
//                 }

//         }
//     }


//14.BufferedWriter, BufferedReader 
// import java.io.BufferedReader;
// import java.io.BufferedWriter;
// import java.io.File;
// import java.io.FileReader;
// import java.io.FileWriter;
// import java.io.IOException; // Import IOException for handling file-related exceptions

// public class file1 {
//     public static void main(String args[]) {

//         // File creation
//         File file = new File("D:\\VSC IMPORTANT FILE\\LANG\\JAVA 1\\JAVA(i)\\java files\\FILE HANDLING\\text.txt");
        
//         try 
//         {
//             // Initialize FileWriter and BufferedWriter
//             FileWriter fWriter = new FileWriter(file);
//             BufferedWriter Bwriter = new BufferedWriter(fWriter);
//             Bwriter.write("Tamil1");
//             Bwriter.newLine();
//             Bwriter.write("Tamil2");
//             Bwriter.newLine();
//             Bwriter.flush();
//             Bwriter.close();
            
//             FileReader fReader = new FileReader(file);
//             BufferedReader bReader = new BufferedReader(fReader);
//             String line = bReader.readLine();
//             int linecount=0;
//             while(line!=null)
//             {
//                 System.out.println(line);
//                 linecount++;
//                 line=bReader.readLine();
//             }
//             System.out.println(linecount);


//             System.out.println("File written successfully.");
//         } 
//         catch (IOException e) {
//             // Handle IOException
//             System.out.println("An error occurred while writing to the file: " + e.getMessage());
//         }
//     }
// }

//15.

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;

public class file1 {
    public static void main(String args[]) 
    {
        try 
        {
            InputStream input = new FileInputStream("D:\\VSC IMPORTANT FILE\\LANG\\JAVA 1\\JAVA(i)\\java files\\FILE HANDLING\\NEC1.jpg");
            OutputStream output = new FileOutputStream("D:\\VSC IMPORTANT FILE\\LANG\\JAVA 1\\JAVA(i)\\java files\\FILE HANDLING\\NEC2.jpg");
            int content = input.read();
            while(content!=-1)
            {
                output.write(content);
                content=input.read();
            }

        } 
        catch (Exception e)
        {

        }
    }
}



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
// class and objects
// class is template of object (logical construct)
// object is instances of class (physical reality)
// student std1 =  new student();
// compile time =  runtime 
/*
public class oops {
    public static void main(String[] args) {

        student lokesh = new student();
        System.out.println(lokesh.rno);
        System.out.println(lokesh.name);
        System.out.println(lokesh.marks);
        lokesh.rno=12;
        lokesh.name="lokesh jayseelan";
        lokesh.marks=7.54f;
            System.out.println(lokesh.rno);
            System.out.println(lokesh.name);
            System.out.println(lokesh.marks);
    }
}
class student
{
    int rno=2111103;  //defualt
    String name;
    float marks;
}
*/ 

// constructors:
/* 
public class oops {
    public static void main(String[] args) {
        System.out.println("created object");
        student lokesh = new student();
        System.out.println(lokesh.rno);
        System.out.println(lokesh.name);
        System.out.println(lokesh.marks);

        System.out.println("created object with sum greeting");
        student arun = new student();
        arun.greeting();

        System.out.println("created object with name change");
        student urun = new student();
        urun.changename("arun");
        urun.greeting();

        System.out.println("created object to change the data by constructor");
        student hukum = new student(12,"kk",12);
        System.out.println(hukum.rno);
        System.out.println(hukum.name);
        System.out.println(hukum.marks);

        System.out.println("copoy hukkum to hukum2");
        student hukum2 = new student(hukum);
        System.out.println(hukum2.rno);
        System.out.println(hukum2.name);
        System.out.println(hukum2.marks);

        System.out.println("every thing is charge");
        student hukum3 = new student();
        System.out.println(hukum3.rno);
        System.out.println(hukum3.name);
        System.out.println(hukum3.marks);

        System.out.println("pointing to the both references variable same object");
        student hukum4 = new student();
        student hukum5=hukum4;
        System.out.println(hukum5.rno);
        System.out.println(hukum5.name);
        System.out.println(hukum5.marks);

        System.out.println("changes in name");
        hukum4.name="loosu";
        System.out.println(hukum5.rno);
        System.out.println(hukum5.name);
        System.out.println(hukum5.marks);
    }
}
class student
{
    int rno=2111103;  
    String name;
    float marks;

    void greeting()
    {
        System.out.println("hii "+name);
    }
    void changename(String str)
    {
        name=str;
    }
    student()
    {
        this.rno=2112;
        this.name="lokesh";
        this.marks=12.3f;
    }
    student(int rno,String str,int marks)
    {
        this.rno=rno;
        this.name=str;
        this.marks=marks;
    }
    student(student other)
    {
        this.rno=other.rno;
        this.name=other.name;
        this.marks=other.marks;
    }

}

public class oops {

    public static void main(String[] args) {
        int a=12;
        int b=2;
        swap1(a, b);
        System.out.println(a+" "+b); // because of they are primitve only passing to function by value so that swap opration is not occur .swaping inside function only

        Integer A=12;
        Integer B=2;
        swap2(A, B);
        System.out.println(A+" "+B);  // because of Integer class declaured as final keyword on a backend

        //final reference var is not change:
        // final always intialize while declaring
        final int num=2;
        System.out.println(num);

        final TED_TALKS hukkum = new TED_TALKS("lokesh");
        hukkum.str = "lokesh jayaseelan";

        // when a non primitive is final, you cannot reassing it
        // hukkum = new A("lokesh");

    }
    static void swap1(int a,int b)
    {
        int temp = a;
        a=b;
        b=a;
    }
    static void swap2(Integer a,Integer b)
    {
        int Integer = a;
        a=b;
        b=a;
    }
}
class TED_TALKS
{
    final int num=10;
    String str;
    TED_TALKS(String str)
    {
        this.str=str;
    }
}
*/

// packages: 

/*
import java.util.ArrayList;
import java.util.Scanner;

import packeage0.package1.add_number;
import packeage0.package1.multi_number;
//import packeage0.package1.*

public class oops {

    public static void main(String[] args) {

        Scanner scan = new Scanner(System.in);
        ArrayList lisyt= new ArrayList();

        add_number obj1 = new add_number();
        System.out.println(obj1.add(1,2));

        multi_number obj2 = new multi_number();
        System.out.println(obj2.multi(1,2));

        
    }
}
*/
/* 
import packeage0.package1.student_bio;

public class oops {

    public static void main(String[] args) {
        student_bio obj1 = new student_bio(211103, "LOKESH", 7.55f);
        student_bio obj2 = new student_bio(211104, "lokesh", 7.5f);
        System.out.println(obj1.rno);
        System.out.println(obj2.name);
        System.out.println(obj2.ctr);


        fun1();

    }
    // this not dependent on objects
    static void fun1()
    {
        oops obj1 = new oops(); // it requires an instances
        // but the function does not depenend on instances 
        obj1.greeting();
    }

    void greeting()
    {
        System.out.println("hi......");
    }
}
*/

/*
public class oops {

    static int a=5;
    static int b=0;
    public static void main(String[] args) {
        System.out.println(a+b);
        System.out.println(oops.b);
    }
    static 
    {
        b=a*2;
    }
}

*/

/* 
public class oops {

    static class TED_TALKS
    {
        int a,b;
        public TED_TALKS(int a1,int b1)   // constuctor
        {
            this.a=a1*2;
            this.b=b1*2;
        }
    }
    public static void main(String[] args) {
        TED_TALKS obj1 = new TED_TALKS(1, 2);
        System.out.println(obj1.a);
        System.out.println(obj1.b);

        fn obj2 = new fn();
        System.out.println(obj2.add(1, 3));
         // println-methods
         // out - variable
         //System class
    }
}
class fn 
{
    public int add(int a,int b)
    {
        return a+b;
    }
}
*/


//inheritance:

/*
                        parents
                           ||
                        children


    .child class  having base and it's class
 */
/* 

 public class oops {
    public static void main(String[] args) {
        Box obj1 = new Box();
        System.out.println(obj1.l+" "+obj1.h+" "+ obj1.w);
        
        Box obj2 = new Box(3);
        System.out.println(obj2.l+" "+obj2.h+" "+ obj2.w);

        Box obj3 = new Box(1,3,4);
        System.out.println(obj3.l+" "+obj3.h+" "+ obj3.w);

        Box obj4 = new Box(obj3);
        System.out.println(obj4.l+" "+obj4.h+" "+ obj4.w);

        Box_weight obj5 = new Box_weight();
        System.out.println(obj5.h+" "+obj5.weight);

        Box_weight obj6 = new Box_weight(1.2f,2,3,34.4f);
        System.out.println(obj6.l+" "+obj6.h+" "+obj6.w+" "+obj6.weight);

        Box obj7 = new Box_weight(obj6);
        System.out.println(obj7.l);

        BoxPrice obj8 =new BoxPrice();
        System.out.println(obj8.cost+" "+obj8.h+" "+obj8.l+" "+obj8.w+" "+obj8.weight);
    }
 }

class Box {             
    double l;
    double h;
    double w;

    Box()
    {
        this.l=-1;
        this.h=-1;
        this.w=-1;
    }
    Box(double side)
    {
        this.l=side;
        this.h=side;
        this.w=side;
    }
    Box(double l,double h,double w)
    {
        this.l=l;
        this.h=h;
        this.w=w;   
    }
    Box(Box new_Box)
    {
        this.l=new_Box.l;
        this.h=new_Box.h;
        this.w=new_Box.w; 
    }
 }
 class  Box_weight extends Box
 {
    double weight;
    public Box_weight()
    {
        super();
        this.weight=-22;
    }
    Box_weight (Box_weight temp)
    {
        super(temp);
        this.weight = temp.weight;
    }
    public Box_weight(double l, double h, double w,double weight)
    {
        super(l,h,w); // what is that? = call the parent class constructor
        this.weight=weight;
    }
 }
 class BoxPrice extends Box_weight
 {

    double cost;
    BoxPrice()
    {
        super();
        this.cost=-333;
    }
    BoxPrice(BoxPrice temp)
    {
        super(temp);
        this.cost = temp.cost;
    }
    public BoxPrice(double l, double h, double w,double weight,double cost)
    {
        super(l,h,w,weight); // what is that? = call the parent class constructor
        this.cost=cost;
    }
 }
*/

/*
poly morphism:
    poly=>many
    morphism=>way to represention

*/
/*
public class oops {
    public static void main(String[] args) {
        class1 obj1 = new class1(7);
        System.out.println(obj1);// if the passing obj to class they consider null value and converting tosting() methods.this perfomns happen by the backend code of jdk 

        ///to overtaking tosting() methods
        class2 obj2 = new class2(7);
        System.out.println(obj2);
    }
}
class class1
{
    int num;
    public class1(int num)
    {
        this.num=num;
    }
}
class class2
{
    int num;
    public class2(int num)
    {
        this.num=num;
    }
    @override
    public String toString()
    {
        return "obj is printed as a backend jdk "+num;
    }
}

*/

/*
public class oops {

    public static void main(String[] args) {
        
        shapes obj1 =new shapes();
        obj1.area();
        circle obj2 =new circle();
        obj2.area();
        rectangle obj3 = new rectangle();
        obj3.area();
        shapes obj4 = new rectangle();
        obj4.area();

        // in this parent class smae as the child so that using override
        shapes obj11 =new shapes();
        obj11.area();
        shapes obj22 =new circle();
        obj22.area();
        shapes obj33 = new rectangle();
        obj33.area();
        shapes obj44 = new rectangle();
        obj44.area();

    }
}
class shapes
{
   
    void area()
    {
        System.out.println("i am in shapes");
    }
}
class circle extends shapes
{
    @Override
    void area()
    {
        System.out.println("i am in circle");
    }
}
class rectangle extends shapes
{
    @Override
    void area()
    {
        System.out.println("i am in rectangle");
    }
}
*/

// method overlogding:
/*
public class oops {

    public static void main(String[] args) {
        System.out.println(fn(2));
        System.out.println(fn("Lokesh"));
        System.out.println(fn(1,2));
        System.out.println(fn("LOKESH",1,2));
    }
    
    static int fn(int a)
    {
        return a*2;
    }
    static String fn(String s)
    {
        return s.concat(" Jayaseelan");
    }
    static int fn(int a,int b)
    {
        return a+b;
    }
    static int fn(String a,int b,int c)
    {
        return b+c;
    }
}
*/

//
/*  
    Encapsulation:
        wrapping up the implementation of the data member & methods in class
    
    Abstrction:
        hinding unnessary details &  and showing valuable information

 */

 //access control:

 /*
public class oops {

    public static void main(String[] args) {
        A obj1= new A(211103, "lokesh",9.0f);
        System.out.println(obj1. num);
        System.out.println(obj1.name2);
        System.out.println(obj1.marks);

    }
}

class A{
    public int num;
    private String name1;
    String name2;
    protected float marks; 
        A(int num,String name1,float marks)
        {
            this.num=num;
            this.name1=name1;
            this.name2=this.name1;
            this.marks=marks;
        }
}
*/


/*
        public means access any where
        private means access with class only or only access with a file
        protected means  class same class can be assces

        ____________________________________________________________________________________________________
        ||Access control||   class   || package  ||subclass(same pkg)||subclass(different package)||world||
        ----------------------------------------------------------------------------------------------------
        ||public        ||    yes    || yes      ||     yes          ||   yes                     ||  yes ||
        ||protected     ||    yes    || yes      ||     yes          ||   yes                     ||  no  ||
        ||no modifier   ||    yes    ||  yes     ||     yes          ||   no                      ||  no  ||
        ||private       ||    yes    ||  no      ||      no          ||   no                      ||  no  ||
        ----------------------------------------------------------------------------------------------------
*/
//protected class same class can be assces:
/*
public class oops {

    public static void main(String[] args) {
        Access_Same_Class obj1= new Access_Same_Class(2);
        System.out.println(obj1.GETNUM(3)); 
    }
}
class Access_Same_Class
{
    protected int num;
    public int GETNUM(int num)
    {
        System.out.println(this.num);
        this.num=num*2;
        return num;
    }  
    public Access_Same_Class(int num)
    {
        this.num=num;
    } 
}
*/
/*
    packages is two type:
    1.user defined
    2.in-build

    in-build:
    -> lang 
    -> io
    -> util contains (collection and framework)
    -> applet 
    -> awt
    -> net
*/

// object class:
/*
public class oops {

    public static void main(String[] args) {

        obj obj1 = new obj(3);
        obj obj2 = obj1;
        System.out.println(obj1.hashCode());
        System.out.println(obj2.hashCode());

        System.out.println(obj2 instanceof obj);
        System.out.println(obj2.getClass());
        System.out.println(obj2.getClass().getName());
    } 
}
class obj{

    int num;
    public obj(int num)
    {
        this.num=num;
    }
    @Override
    public int hashCode()
    {
        return num*100;
    }

    @Override
    public String toString()
    {
        return super.toString();
    }

    @Override
    public void finalize() throws Throwable
    {
        super.finalize();
    }

    @Override
    public boolean equals(Object obj)
    {
        return super.equals(obj);
    }
}-
*/
//abstract classes interfaces annotations

/* 
public class oops {

    public static void main(String[] args) {
        abtract_son obj = new abtract_son(2);
        obj.career("lokesh jayaseelan");
        obj.path("software Engi.",23);
        obj.normal();
        // abstract_parent obj2 = new abstract_parent(2); can't creat obj on a abtract class and also constructure can't be create  
        abstract_parent.details();
        //abstrac can't support obj cretion so tha mutiple inhretance is not support in java
    }
     
}
// abstract class Parent {
//     abstract void career(String name);
//     abstract void path(String aim,int age);
// }
// abstract class Son extends Parent {
//      @override
//      void career(String name)
//      {
//         System.out.println("my self "+name);
//      }
//      @override
//      void path(String name,int age)
//      {
//         System.out.println("my aim is "+name+" at zoho in age of "+age);
//      }
// }
 */



 //interface
 /*
 public class oops {
 
    public static void main(String[] args) {
        System.out.println("--------car1  details------------");
        car1 obj1 = new car1();
        obj1.acc();
        obj1.breaK();
        obj1.stop();
        obj1.start();
        media obj2 = new car1();
        obj2.stop();
        System.out.println("--------- car2 details-----------");
        car2 obj3 = new car2();
        obj3.acc();
        obj3.breaK();
        obj3.stop();
        obj3.start();
        media obj4 = new car2();
        obj4.stop();
        obj4.music();
    }
 }
interface Engine {

    static int price = 12323;

    void start();
    void stop();
    void acc();
 }
interface Brake {
    void breaK();
}
interface media {
    void stop();
    default void music()
    {
        System.out.println("++++HUKUM+++++");
    }
}
class car1 implements Engine,Brake,media
{
    @Override
    public void breaK()
    {
        System.out.println("------BREAK speed 14-----");
    }
    @Override
    public void start()
    {
        System.out.println("------start 14-----");
    }
    @Override
    public void stop()
    {
        System.out.println("------stop 14-----");
    }
    @Override
    public void acc()
    {
        System.out.println("------acc 14-----");
    }
}
class car2 implements Engine,Brake,media
{
    @Override
    public void breaK()
    {
        System.out.println("------BREAK speed 10-----");
    }
    @Override
    public void start()
    {
        System.out.println("------start 10-----");
    }
    @Override
    public void stop()
    {
        System.out.println("------stop 10-----");
    }
    @Override
    public void acc()
    {
        System.out.println("------acc 10-----");
    }
}
*/

//--------------------------------------------------------------------------


/*
    oops
    1.classes and objects
    2.Access Modifiers
    3.Inheritance and protected Access
    4.Encapsulation
    5.Abstract classes
    6.Interface
    7.multiple inheritance using interface
    8.ATM-project
    9.calculator-project
 */

 /*
        1.classes and objects
            .class is an blue print of a object
            .method use get ,set for good understanding and good programmer 

  
  public class oops {
  
    public static void main(String[] args) {
        
        student obj1 = new student("LOKESH", 13, "SHOLINGHUR");
        System.out.println(obj1.toString());

        // student is a instances
        student obj2 = new student("VIGNESH", 13, "VELLORE");
        System.out.println(obj2.toString());

        System.out.println(obj2.name);
        System.out.println(obj2.age);
        System.out.println(obj2.Address);
    }
  }
class student { 

    String name;
    int age;
    String Address;

    student(String name,int age,String address)  // consutor
    {
        // name=name java will confues
        this.name=name;
        this.age=age;
        this.Address=address;
    }

    //methods
    void setName(String NAME)
    {
        this.name=NAME;
    }
    
    //methods
    void setAge(int AGE)
    {
        this.age=AGE;
    }
    
    //methods
    void setAddress(String ADDRESS)
    {
        this.Address=ADDRESS;
    }
    
    //methods
    String getName()
    {
        return this.name; 
    }
    
    //methods
    int getAge()
    {
        return this.age; 
    }
    
    //methods
    String getAddress()
    {
        return this.Address; 
    }
    
    //methods by overrideing
    @Override
    public String toString()
    {
      return("STUDENTS DETAILS IS "+this.getName()+" "+this.getAge()+" "+getAddress());
    }
  }

  */


//-----------------Methods-------------------------------
  /*
      Methods:
        .function = methods
        .outside the class than it's called as function
        .inside  the class than it's called as methods
        .java can't contains any function but contains only a methods

public class oops {

    public static void main(String[] args) {
        int a=-2,b=12;
        // function calling
        //functionName(ARGUMENTS)
        swap1(a, b); // a & b as ARGUMENTS.
        swap2(a, b);
    }

    // function defined
    // accessmodifier-returntype-functionNaem(PARAMETER)
    static void swap1(int a,int b) // a and b are the PARAMETERS
    {
        a=a^b; //3
        b=b^a; //1
        a=a^b; //
        System.out.println(a+" "+b);
    }
    static void swap2(int a,int b)
    {
        a=a+b; //14
        b=a-b; //2
        a=a-b; //12
        System.out.println(a+" "+b);
    }
}
*/
//--------------------------------------------------------------------------

//------------RECURSION------------
/*
public class oops {

    public static void main(String[] args) {
        num(5);
    }
    static void num(int s)
    {
        if(s==0)   // base case
        {
            return;
        }
        num(s-1);  // recursive case
        System.out.println(s+" ");
    }
}
*/
//--------------------------------------------------------------------------

//--------class and object-----------  
/*
    example:
        .form is class and form contains name,age,dob this are the object
        .object is a instances of class
        .genral application form is example of class
        .i went full the form which is help of object
 */
/*
public class oops 
{
    public static void main(String[] args) 
    {
        // assces member class by object.member class or methods 
        form obj1 = new form(); // copy of class
        obj1.name="LOKESH";
        obj1.age=20;
        obj1.dob="14/06/2004";
        obj1.display();  


        form obj2 = new form(); //object creaction  
        obj2.name="LOKESH";
        obj2.age=20;
        obj2.dob="14/06/2004";
        obj2.display();  

        form obj3 = new form();
        obj3.setDetatils("LCU", 20, "12/12/2004");
        obj3.display();
    }   
}
// within class is known as member class 
class form
{

    String name;//member class 
    int age; //member class 
    String dob;//member class 
    void display()
    {
        System.out.println(name+" "+age+" "+dob);
    }
    void setDetatils(String name ,int age,String dob)
    {
       // name=name  system will confused so that using this keyword for butter understading
        this.name=name;
        this.age=age;
        this.dob=dob;
    }
}
*/


//--------------------------------------------------------------------------

//constructors A constructor in Java is a special method that is used to initialize objects. 

/*

// default_Constructors
public class oops {
    public static void main(String[] args) {
        
        //class_name obj = new constructor();
        defaultConstructors1 obj1 = new defaultConstructors1();
        System.out.println("default_Constructors1");
        System.out.println(obj1.name);
        System.out.println(obj1.age);
        System.out.println(obj1.height);

        defaultConstructors2 obj2 = new defaultConstructors2();
        System.out.println(obj2.name);
        System.out.println(obj2.age);
        System.out.println(obj2.height);

        System.out.println("default_Constructors3");
        // parameterized constructor
        defaultConstructors3 obj3 = new defaultConstructors3("LOKESH",12);

        
        what is different int methods and constructor
            1.methods                   
            class and method name will be different  and also with any return type
            2.constructor 
            class and method name will be same  and also without any return type 
        

        System.out.println("diff b/w methods and class");
        default_Constructors4 obj4 = new default_Constructors4();
        System.out.println(obj4.changename("JAYASEELAN"));

    }    
}
class defaultConstructors1
{
    String name;
    int age;
    float height;
}

class defaultConstructors2 {
    String name;
    int age;
    float height;
     
        meaning for defaultConstructors
        defaultConstructors()
        {
            you can set the default value all so
        }
    
    defaultConstructors2()
    {
        System.out.println("defaultConstructors2");
        name="LOKESH";
        age=12;
        height=12.0f;
    }
}

class defaultConstructors3
{
    String name;
    int age;
    float height;

    // parameterized constructor
    defaultConstructors3(String name,int age)
    {
        this.name=name;
        this.age=age;
        System.out.println(this.name+" "+this.age);
    }
}

class default_Constructors4
{
    String name;
    default_Constructors4()
    {
        this.name="LOKESH ";
    }
    String changename(String name)
    {
        this.name=this.name+name;
        return this.name;
    }
}

*/

//--------------------------------------------------------------------------
// Encapsulation 

/*
Encapsulation is a single class contains member_class and constructor,function  
 
 class Encapsulation
 {
    String name;
    Encapsulation()
    {
        name="LOKESH";
    }
    String function()
    {
        return this.name;
    }
 }
 public class oops {
    public static void main(String[] args) {
        Encapsulation obj1 = new Encapsulation();
        System.out.println(obj1.function());
    }
 }
*/

//--------------------------------------------------------------------------
/*
    Abstraction:
        Abstraction in Java refers to the process of hiding implementation details and
        showing only essential features of an object. It allows for the creation of 
        abstract classes and methods that define a common interface for a group of
        related objects, enabling code reusability and promoting modularity.
 

 class Abstraction
 {
    String username="jlokesh1406";
    private int password =1414;

 }

 public class oops {
    public static void main(String[] args) {

        Abstraction obj = new Abstraction();
        System.out.println(obj.username);
        // System.out.println(obj.password); password hiding form others
    }
 }
 */
//--------------------------------------------------------------------------
/*
    Inheritance:

class parent
{
    String name="JAYASEELAN";
    int age=54;
    public void Parent_details()
    {
        System.out.println("parent name:"+" "+name);
        System.out.println("parent age:"+age);
    }
    public void eilgible_for_voting(int age)
    {
        if(age>=18)
        {
            System.out.println("EILGIBLE FOR VOTING");
        }
        else
        {
            System.out.println("NOT EILGIBLE FOR VOTING");
        }
    }
}
class child extends parent
{
    static String name=" LOKESH";
    static int age=16;
    // below code replace of extends using in the class(eilgible_for_voting)
    static void Child_details()
    {
        System.out.println("parent name:"+" "+name);
        System.out.println("parent age:"+age);
    }
}
public class oops { 
    public static void main(String[] args) {
        parent obj1 = new parent();
        obj1.Parent_details();
        obj1.eilgible_for_voting(54);

        child obj2 = new child();
        obj2.Child_details();
        obj1.eilgible_for_voting(14);

    }
}
*/
//--------------------------------------------------------------------------
// polymorphism ( many + forms)
/* 
    polymorphism is method having in many form without same data type 😊.polymorphism contains (method overloading)
    Polymorphism in Java refers to the ability of objects to take on multiple forms.
    It allows methods to be overridden in subclasses, enabling them to provide their
    own implementation while still maintaining a common interface with the superclass. Polymorphism facilitates code reuse, flexibility, and abstraction in object-oriented programming.

class Math
{
    public int min(int a,int b)
    {
        if(a<b)
        {
            return a;
        }
        else
        {
            return b;
        }
    }
    public int min(int a,int b,int c)
    {
        if(a<b&&a<c)
        {
            return a;
        }
        else if(b<c&&b<a)
        {
            return b;
        }
        else
        {
            return c;
        }
    } 
    public int min(int arr[])
    {
        int min=arr[0];
        for(int i=0;i<arr.length;i++)
        {
            if(min>arr[i])
            {
                min=arr[i];
            }
        }
        return min;
    }  
}
public class oops {
    public static void main(String[] args) {
        Math obj1 = new Math();
        System.out.println(obj1.min(1, 2));
        System.out.println(obj1.min(222, 22, 12)); 

        int arr[]={111,2,3,4,6,7,34,2,2,3};
        System.out.println(obj1.min(arr));
    }   
}
*/
//--------------------------------------------------------------------------
// Method Overrinding
/*
class fun1
{
    int age1=14;
    public void fn() // member methods
    {
        System.out.println(age1);
    }
}
class fun2 extends fun1
{
    int age1=1;
    // Method Overrinding
    public void fn() // member methods
    {
        System.out.println(age1);
    }
}
public class oops {
    public static void main(String[] args) {
        fun2 obj1 = new fun2();
        obj1.fn();
    }
}
*/
//--------------------------------------------------------------------------
// TYPES OF INHERITANCE
/*
    Types of Inheritance
        1.Single Inheritance  (parent->child)
        2. Multi Inheritance   (parent1,parent->) Java supports multiple inheritance of interfaces through interface inheritance.
        2.Multi-level Inheritance  (grandfather->parent->child)
        3.Hierarchical Inheritance  (parent->multi childs)
        4.Hybrid Inheritance  (combation of single,multi,Hierarchical Inheritance)
 */

//Single Inheritance
/* 

               father
                 |
                 V
               child



class father
{
    String name ="JAYSEELAN ";
    public void fn()
    {
        System.out.println("-----------Welcome to Ted Talks World--------------");
    }
}
class child extends father
{
    String name = "LOKESH ";
}
public class oops {
    public static void main(String[] args) {
        child obj = new child();
        obj.fn();
        System.out.println(obj.name);
    }
}
*/
//2.Multi-level Inheritance 
/* 
            grandmother         
                 |
                 V  
               father
                 |
                 V
               child

class grandmother
{
    String name="?";
    public void fn()
    {
        System.out.println("-----------Welcome to Ted Talks World--------------");
    }
}
class father extends grandmother
{
    String name ="JAYSEELAN "; // overrinding

}
class child extends father
{
    String name = "LOKESH "; // overrinding
}
public class oops {
    public static void main(String[] args) {
        child obj = new child();
        obj.fn();
        System.out.println(obj.name);
    }
}
*/

//3.Hierarchical Inheritance
/* 

              father
                 |
        ---------------------
        |                   |
      (child1)           (child2)


class father
{
    String name ="JAYSEELAN "; // overrinding
    public void fn()
    {
        System.out.println("-----------Welcome to Ted Talks World--------------");
    }
}
class child1 extends father
{
    String name = "DINESH"; // overrinding
}
class child2 extends father
{
    String name = "LOKESH"; // overrinding
}
public class oops {
    public static void main(String[] args) {
        child1 obj1= new child1();
        obj1.fn();
        System.out.println(obj1.name);

        child2 obj2 = new child2();
        obj2.fn();
        System.out.println(obj2.name);
    }
}
*/

//4.Hybrid Inheritance:
/*
              father
                 |
        ---------------------
        |                   |
      (child1)           (child2)
                            |
                        ------------
                        |          |
                      (son1)     (son2)

 
class father
{
    String name ="JAYSEELAN "; // overrinding
    public void fn()
    {
        System.out.println("-----------Welcome to Ted Talks World--------------");
    }
}
class child1 extends father
{
    String name = "DINESH"; // overrinding
}
class child2 extends father
{
    String name = "LOKESH"; // overrinding
    public void fn1()
    {
        System.out.println("I THE SON OF CHILD2");
    }
}
class son1 extends child2
{
    String name="SON1";
}
class son2 extends child2
{
    String name="SON2";
}
public class oops {
    public static void main(String[] args) {
        son1 obj1= new son1();
        obj1.fn1();
        System.out.println(obj1.name);

        son2 obj2 = new son2();
        obj2.fn1();
        System.out.println(obj2.name);
    }
}

*/


//--------------------------------------------------------------------------
// Abstract 
// 
/*
    *abstract class can't create the object**
    *abstract method declaration should defintion the method definition**
    *abstract class support method definition and method declaration

abstract class Computer
{
    abstract void turnOff();  //method declaration
    void turnOn()
    {
        System.out.println("Turning ON");
    }   
}
class HP extends Computer
{
    @Override
    void turnOff()   //method definition
    {
        System.out.println("HP-Turning Off");
    }
}
class LENOVO extends Computer
{
    @Override
    void turnOff()
    {
        System.out.println("LENOVO-Turning Off");
    }
}
public class oops {

    public static void main(String[] args) {
        // abstract  class can't create the object in main function
        HP obj1 = new HP();
        obj1.turnOn();
        obj1.turnOff();

        LENOVO obj2 = new LENOVO();
        obj2.turnOn();
        obj2.turnOff();
    }
}

*/

//--------------------------------------------------------------------------
//Interfaces & Multiple Inheritance:-
/*
    Interfaces & Multiple Inheritance 
       -> abstract class support method definition and method declaration 
          but abstract class support method definition and method declaration
       -> Java supports multiple inheritance of interfaces through interface inheritance.

interface father 
{
    abstract void Name();
    abstract void Age();
}
interface Mother 
{
    abstract void Name();
    abstract void Age();
}
class son implements father,Mother
{
    public void Name()
    {
        System.out.println("NAME:");
    }
    public void Age()
    {
        System.out.println("Age");
    }
}
public class oops {
    public static void main(String[] args) {
        son obj1 = new son();
        obj1.Name();
        obj1.Age();

        // abstract  class can't create the object in main function
        // father obj2 = new father();
        // obj2.Name();
        // obj2.Age();
    }
}

*/

//--------------------------------------------------------------------------
//static is without creating object can asscess the member class 
// final can't be possible to modifined the value and override methods
/* 
class fn
{
    static int max1;
    final int max2=12;
    public static int min(int a,int b)
    {
        return ((a<b)?a:b);
    }
}
public class oops {
    public static void main(String[] args) {
        
        // static
        fn.max1=12;
        System.out.println(fn.max1);

        System.out.println(fn.min(1, 2));

        //final
        // final can't be possible to modifined the value
        // fn.max2=12;
        // System.out.println(fn.max2);
    }
}
*/
//--------------------------------------------------------------------------
//super
/* 
class father 
{
    int age=54;
    void fun()
    {
        System.out.println("FUN!!");
    }
}
class child1 extends father
{
    int age=25;

    void fun1()
    {
        System.out.println("CHILD1");
        System.out.println(super.age);
    }
}
class child2 extends father
{
    int age=20;
    void fun2()
    {
        System.out.println("CHILD1");
        System.out.println(super.age);
    }
}

public class oops {
    public static void main(String[] args) {
        child1 obj1 = new child1();
        obj1.fun1();

        child2 obj2 = new child2();
        obj2.fun2();
    }
}
*/
//--------------------------------------------------------------------------
//this
/*
class details
{
    String str;
    int age;
    details (String str,int age)
    {
        // system will confused so that using keyword as a (this.member class)
        // str=str;
        // age=age;

        this.age=age;
        this.str=str;
    }
    public void display()  // member methods
    {
        System.out.println(this.age+" "+this.str);       
    }
}
public class oops {
    public static void main(String[] args) {
        details obj = new details("LOKESH", 20);
        obj.display();
    }
}
*/
/*
import java.util.Scanner;

public class oops {
    public static void main(String[] args) {
        Scanner obj = new Scanner(System.in);
    // class_name object = new constructor(System.in);
    // constructor(System.in=>input from the user keyboard pass the value to this constructor)
    //nextInt()=>// member methods
        int a=obj.nextInt();
    }
}

*/

//--------------------------------------------------------------------------

/*
public class oops {
    public static void main(String[] args) {
        int a=12;
        int b=0;
        try
        {
            System.out.println(a/b); //  throw error to catch. catch will catch the throw problem(ArithmeticException)
        }
        catch (ArithmeticException E) // it not known about what error will occur so put as (Exception E)
        {
            System.out.println("B is 0");
        }
        catch (Exception E) 
        {
            System.out.println("  B is 0");
        }
        finally
        {
            System.out.println("FINALLY BLOCK EXCUTED");
        }
    }
}
*/
// manualy message throw
/*
public class oops {

    static void check(int age)
    {
        if(age<18)
        {
            throw new ArithmeticException("NOT EILGIBLE FOR VOTING");
        }
    }
    public static void main(String[] args) {
        int age = 12;
        try
        {
            check(age);
        }
        catch(ArithmeticException ErRoR)
        {
            System.out.println(ErRoR);
            System.out.println(ErRoR.getMessage());
        } 
    }
}
*/
// user E xception

/*
class UserDefined extends Exception
{
    UserDefined(String str)
    {
        super(str);
    }
}
public class oops {
    static void check(int age) throws UserDefined,ArithmeticException
    {
        if(age<18)
        {
            throw new UserDefined("NOT EILGIBLE FOR VOTING");
        }
        else
        {
            throw new ArithmeticException("AGE VALID..");
        }
    }
    public static void main(String[] args) {
        int age = 14;
        try
        {
            check(age);
        }
        catch(UserDefined ErRoR)
        {
            System.out.println(ErRoR);
            System.out.println(ErRoR.getMessage());
        } 
        catch(ArithmeticException ErRoR)
        {
            System.out.println(ErRoR);
            System.out.println(ErRoR.getMessage());
        }
    }
}
*/

//------------------------------------------------------------------------------------------------
// Reading from a File


/* 
import java.io.File;
import java.util.Scanner;

public class oops {
    public static void main(String[] args) {
        
        try
        {
            File file1 = new File("Exception_Example_1.txt");
            Scanner scan = new Scanner(file1);
            while(scan.hasNextLine())
            {
                System.out.print(scan.nextLine());
            }
            scan.close();
        }
        catch(Exception error)
        {
            System.out.print(error+"-");
        }
    }
}
*/
//------------------------------------------------------------------------------------------------
// Writeing from a File
/*
import java.io.File;
import java.io.FileWriter;

public class oops {
    public static void main(String[] args) {
        
        try
        {
            File file1 = new File("Exception_Example_1.txt");
            FileWriter writer = new FileWriter(file1);
            writer.write("TED TALKS ");
            writer.write(32);
            writer.close();
        }
        catch(Exception error)
        {
            System.out.print(error+"-");
        }
    }
}
*/
//enum
/*
public class oops{
    public static void main(String[] args) {
        weeks temp;
        temp=weeks.tue;
        for(weeks temp1:weeks.values())
        {
            System.out.print(temp1+" ");
        }
        System.out.println();

        System.out.println(temp);

        System.out.println(temp.ordinal());

        System.out.println(weeks.valueOf("thu"));

    }
    static enum weeks
    {
        // these are enum constants,public,static,final
        mon,tue,wed,thu,fri,sat;
        weeks()
        {
            System.out.println("gm---->"+this);
        }
    }
}
*/

// generics:
//1.custom arraylist


//------------------------------------------------------------------------------------------------
// collection and framework helps in storing and processing of data efficiently

/*
        1.collection class
        2.list interface
        3.arraylist 
        4.vector
        5.stack
        6.linkedlist

        7.queue interface
        8.priorityqueue 
        9.deque interface
        10.arraydeque

        11.set
        12.hashset
        13.linkedhashset
        14.sortedset
        15.navigableset
        16.treeset

        17.map
        18.hashmap
        19.hashtable
        20.linkedhashmap
        21.sortedmap
        22.treemap

 */

//colletions 
//indexOf("ed");,put,get,Collection.sort(arr2);
/* 
import java.util.Iterator;
import java.util.Spliterator;
import java.util.stream.Stream;
import java.util.ArrayList;
import java.util.Collection;


public class oops {
    public static void main(String[] args) {

        Collection <String> arr1 = new ArrayList<>();
        System.out.println(".add()");
        arr1.add("Apple");
        arr1.add("Banana");
        arr1.add("Apple");
        arr1.add("Banana");
        arr1.add("carrot");
        System.out.println(arr1);

        System.out.println(".size()");
        int size = arr1.size();
        System.out.println(size);


        System.out.println(".remove()");
        arr1.remove("Banana");
        System.out.println(arr1);

        System.out.println(".contains()");
        boolean a=arr1.contains("Ap");
        System.out.println(a);

        System.out.println(".isEmpty()");
        boolean b=arr1.isEmpty();
        System.out.println(b);

        System.out.println(".equals()");
        boolean c="LOKESH".equals("LOKESH");
        System.err.println(c);

        System.out.println(".getClass()");
        System.out.println(arr1.getClass());

        System.out.println(".forEach()");
        arr1.forEach((temp)->
        {
            System.out.println(temp);
        }
        );

        System.out.println("print using for loop");
        for(String str:arr1)
        {
            System.out.println(str+" ");
        }

        System.out.println("using Iterator to print:");
        Iterator <String> i = arr1.iterator();
        while (i.hasNext()) {
            System.out.println(i.next()+" ");
        }

        Collection <Integer> arr2 = new ArrayList<Integer>();
        arr2.add(12);
        arr2.add(22);
        arr2.add(322);
        arr2.add(22);
        arr2.add(232);
        Collection <Integer> arr3 = new ArrayList<>();
        arr3.add(2);
        arr3.add(5);
        arr3.add(232);

        System.out.println(".addAll()");
        arr2.addAll(arr3);
        arr2.forEach((temp)->
        {
            System.out.print(temp+" ");
        }
        );
        System.out.println();

        System.out.println(".removeAll()");
        arr2.removeAll(arr3);
        arr2.forEach((temp)->
        {
            System.out.print(temp+" ");
        }
        );
        System.out.println();

        System.out.println(".equals()");
        boolean d=arr2.equals(arr3);
        System.out.println(d);

        System.out.println(".containsAll()");
        boolean e=arr2.containsAll(arr3);
        System.out.println(e);

        Collection <Integer> arr4 = new ArrayList<Integer>();
        arr4.add(12);
        arr4.add(22);
        arr4.add(322);
        arr4.add(2);
        arr4.add(21);

        Collection <Integer> arr5 = new ArrayList<Integer>();
        arr5.add(12);
        arr5.add(22);
        arr5.add(322);

        System.out.println("retainAll()-Retaining only the elements that are common to both arr1 and arr2");
        arr4.retainAll(arr5);
        arr4.forEach((temp)->
        {
            System.out.print(temp+" ");
        }
        );
        System.out.println();


        System.out.println("Creating a parallel stream for arr4");
        arr4.parallelStream().forEach(System.out::println);

        System.out.println(".removeIf()");
        arr4.removeIf(num -> num>20);
        arr4.forEach((temp)->
        {
            System.out.print(temp+" ");
        }
        );
        System.out.println();

        Collection <Integer> arr6 = new ArrayList<Integer>();
        arr6.add(12);
        arr6.add(22);
        arr6.add(322);

        System.out.println("Elements in arr1 using Spliterator:");
        Spliterator<Integer> spliterator = arr6.spliterator();
        spliterator.forEachRemaining(System.out::println);

        System.out.println("Elements in arr1 using Stream:");
        Stream<Integer> stream = arr6.stream();
        stream.forEach(System.out::println);

        System.out.println("coveting arr6 to array");
        Object[] array = arr6.toArray();
        for(Object I:array)
        {
            System.out.println(I+" ");
        }
        System.out.println();
    }
 }
 
*/
//------------------------------------------------------------------------------------------------

// List:
/*
        The List interface in Java provides a way to store the ordered collection.
        It is a child interface of Collection. It is an ordered collection of objects in which
        duplicate values can be stored. Since List preserves the insertion order, it allows positional 
        access and insertion of elements. 

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;

public class oops {
    public static void main(String[] args) {

        List<String> arr1 = new ArrayList<String>();
        arr1.add("LOKESH");
        arr1.add("APPLE");
        arr1.add(null);

        System.out.println(".size()");
        int a=arr1.size();
        System.out.println(a);

        System.out.println(".add() Adding an element at a specific index");
        arr1.add(3,"LOKESH");
        System.out.println(arr1);

        List<String> arr2 = new ArrayList<String>();
        arr2.add("AL");
        arr2.add("LA");
        arr2.add("LA");
        arr2.add("AL");

        System.out.println(".addAll");
        arr1.addAll(arr2);
        System.out.println(arr1);

        System.out.println("------.contains()-------");
        boolean b = arr1.contains("A");
        System.out.println(b);

        System.out.println("------.containsAll()-------");
        boolean c = arr1.containsAll(arr2);
        System.out.println(c);

        System.out.println("List elements using iterator: ");
        Iterator <String> i = arr1.iterator();
        while (i.hasNext()) {
            System.out.print(i.next() + "-");
        }
        System.out.println();

        System.out.println("------isEmpty()--------");
        boolean d = arr2.isEmpty();
        System.out.println(d);

        System.out.println("-------.equals()--------");
        boolean e = arr1.equals(arr2);
        System.out.println(e);

        System.out.println("List elements using forEach: ");
        arr1.forEach(item -> System.out.print(item + "-"));
        System.out.println();

        System.out.println("Class of the list: " + arr1.getClass().getName());

        System.out.println("Hash code of the list: " + arr1.hashCode());

        System.out.println("------.indexOf()--------");
        int f=arr2.indexOf("AL");
        System.out.println(f);
        
        System.out.println("------.LastIndexOf()--------");
        System.out.println(arr2);
        int g=arr2.lastIndexOf("LA");
        System.out.println(g);

        ListIterator<String> j = arr2.listIterator();
        System.out.println("List elements using list iterator: ");
        while (j.hasNext()) {
            System.out.print(j.next() + " ");
        }
        System.out.println();

        System.out.println("List elements using parallel stream: ");
        arr2.parallelStream().forEach(item -> System.out.print(item + " "));
        System.out.println();


        List<String> arr3 = new ArrayList<String>();
        arr3.add("Apple");
        arr3.add("ApplE");
        arr3.add("red");
        arr3.add("green");

        List<String> arr4 = new ArrayList<String>();
        arr4.add("Apple");
        arr4.add("appLE");
        arr4.add("red");

        System.out.println("------.remove()------");
        arr3.remove("Apple");
        System.out.println(arr3);
    
        System.out.println("---.addAll()------");
        arr3.addAll(arr4);
        System.out.println(arr3);

        System.out.println("---.removeAll()----");
        arr3.removeAll(arr4);
        System.out.println(arr3);


        List<String> arr5 = new ArrayList<String>();
        arr5.add("Apple");
        arr5.add("ApplE");
        arr5.add("red");
        arr5.add("green");

        System.out.println("---startWith()-----");
        arr5.removeIf(k -> k.startsWith("A"));
        System.out.println(arr5);

        System.out.println("---toUpperCase()----");
        arr5.replaceAll(m -> m.toUpperCase());
        System.out.println(arr5);


        List<String> arr6 = new ArrayList<String>();
        arr6.add("Apple");
        arr6.add("ApplE");
        arr6.add("red");
        arr6.add("green");
        arr6.add("green");
        arr6.add("Yellow");

        List<String> arr7 = new ArrayList<String>();
        arr7.add("Apple");
        arr7.add("ApplE");
        arr7.add("red");
        arr7.add("green");

        System.out.println("----retails the common to lists");
        arr6.retainAll(arr7);
        System.out.println(arr6);

        System.out.println("---set()----");
        arr6.set(0, "BLACK");
        System.out.println(arr6);

        System.out.println();

        System.out.println("Elements in the list using Spliterator: ");
        arr6.spliterator().forEachRemaining(xx -> System.out.print(xx + " "));
        System.out.println();

        System.out.println();

        System.out.println("List elements using stream: ");
        arr6.stream().forEach(yy -> System.out.print(yy + " "));
        System.out.println();

        System.out.println();

        List<String> subList = arr6.subList(0, 3);
        System.out.println("Sublist elements: ");
        subList.forEach(item -> System.out.print(item + " "));
        System.out.println();

        System.out.println();

        Object[] arr = arr6.toArray();
        System.out.println("List elements in an array: ");
        for (Object item : arr) {
            System.out.print(item + " ");
        }
        System.out.println();

        System.out.println();

        System.out.println("String representation of the list: " + arr6.toString());

        List<String> arr8 = new ArrayList<String>();
        arr8.add("AL");
        arr8.add("LA");
        arr8.add("LA");
        arr8.add("AL");

        System.out.println("inesxOf()");
        System.out.println(arr8.indexOf("AL"));
        System.out.println(arr8.lastIndexOf("AL"));

    }
}
*/
//--------------------------------------------------------------------------------
//abstractList
/*
    The set() method of java.util.AbstractList class is used to replace 
    any particular element in the abstract list created using the AbstractList
     class with another element. This can be done by specifying the position of
      the element to be replaced and the new element in the parameter of the set() method.
 
      Here's a breakdown of which methods from the `Collections` class are supported by each of the given classes/interfaces:

        1. `Collection` class:
        - A. `addAll`
        - D. `disjoint`
        - E. `emptyList`
        - `Collections.frequency`
        - `Collections.nCopies`
        - `Collections.replaceAll`
        - `Collections.reverse`
        - `Collections.shuffle`
        - `Collections.singletonList`
        - `Collections.sort`
        - `Collections.unmodifiableList`
        - `Collections.fill`

        2. `List` interface:
        - A. `addAll`
        - B. `binarySearch`
        - C. `copy`
        - D. `disjoint`
        - E. `emptyList`
        - `Collections.frequency`
        - `Collections.indexOfSubList`
        - `Collections.max`
        - `Collections.min`
        - `Collections.nCopies`
        - `Collections.replaceAll`
        - `Collections.reverse`
        - `Collections.shuffle`
        - `Collections.singletonList`
        - `Collections.sort`
        - `Collections.swap`
        - `Collections.unmodifiableList`
        - `Collections.fill`

        3. `ArrayList`:
        - All methods are supported since `ArrayList` implements the `List` interface.

        4. `Vector`:
        - All methods are supported since `Vector` extends `AbstractList`, which implements the `List` interface.

        5. `Stack`:
        - All methods are supported since `Stack` extends `Vector`.

        6. `LinkedList`:
        - All methods are supported since `LinkedList` implements the `List` interface.

        7. `Queue` interface:
        - None of the methods are directly supported by the `Queue` interface.

        8. `PriorityQueue`:
        - None of the methods are directly supported by the `PriorityQueue` class.

        9. `Deque` interface:
        - None of the methods are directly supported by the `Deque` interface.

        10. `ArrayDeque`:
        - None of the methods are directly supported by the `ArrayDeque` class.

        11. `Set`:
        - None of the methods are directly supported by the `Set` interface.

        12. `HashSet`:
        - None of the methods are directly supported by the `HashSet` class.

        13. `LinkedHashSet`:
        - None of the methods are directly supported by the `LinkedHashSet` class.

        14. `SortedSet`:
        - None of the methods are directly supported by the `SortedSet` interface.

        15. `NavigableSet`:
        - None of the methods are directly supported by the `NavigableSet` interface.

        16. `TreeSet`:
        - None of the methods are directly supported by the `TreeSet` class.

        17. `Map`:
        - None of the methods are directly supported by the `Map` interface.

        18. `HashMap`:
        - None of the methods are directly supported by the `HashMap` class.

        19. `Hashtable`:
        - None of the methods are directly supported by the `Hashtable` class.

        20. `LinkedHashMap`:
        - None of the methods are directly supported by the `LinkedHashMap` class.

        21. `SortedMap`:
        - None of the methods are directly supported by the `SortedMap` interface.

        22. `TreeMap`:
        - None of the methods are directly supported by the `TreeMap` class.
*/
/*

import java.util.AbstractList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;

public class oops {
    public static void main(String[] args) {
        AbstractList <Integer> arr1= new LinkedList<>();
        arr1.add(11);
        arr1.add(0,22);


        System.out.println("1.add:"+arr1);

        arr1.addAll(2,arr1);
        System.out.println("2.addAll:"+arr1);

        arr1.addAll(arr1);
        System.out.println("3.addAll:"+arr1);

        boolean a=arr1.contains(1);
        System.out.println("4.contains:"+a);

        AbstractList <Integer> arr2= new LinkedList<>();
        arr2.add(1);
        arr2.add(2);
        
        boolean b=arr1.containsAll(arr2);
        System.out.println("5.containsAll:"+b);


       boolean c = arr1.equals(arr2);
       System.out.println("6.equals:"+c);

       System.out.print("7.forEach:");
       arr1.forEach((temp)->System.out.print(temp+" "));
       System.out.println();

       int d=arr1.get(2);
       System.out.println("8.get:"+d);

       System.out.println("9.getclass:"+arr1.getClass());

       System.out.println("10.isempty:"+arr1.isEmpty());

       System.out.println("11.hashCode: "+arr1.hashCode());

       System.out.println("12.indexOf:"+arr1.indexOf(12));

       System.out.println("13.LastIndexOf:"+arr1.lastIndexOf(1));

       System.out.println("13.size: "+arr1.size());

       arr1.remove(1);
       System.out.println("14.remove index"+arr1);

       arr1.remove((Integer)11);
       System.out.println("15.remove first occurrenc value :"+arr1);

       

       AbstractList <Integer> arr3= new LinkedList<>();
       arr3.add(1);
       arr3.add(2);
       arr3.add(3);
       arr3.add(4);
       arr3.add(5);
       arr3.add(6);
       arr3.add(7);
       arr3.add(8);
       arr3.add(9);
       arr3.add(10);

       System.out.print("16.parallelstream: ");
       arr3.parallelStream().forEach(System.out::print);
       System.out.println();

       arr3.removeIf(element -> element%2==0);
       System.out.println("17.Array after removing even elements: " + arr3);

       arr3.replaceAll(element -> element * 2);
       System.out.println("18.Array after replacing all elements with double values: " + arr3);



       arr3.set(0, 777);
       System.out.println("19.Array after setting element 50 at index 0: " + arr3);



       System.out.print("20.stream: ");
       arr3.stream().forEach(System.out::print);
       System.out.println();

        List<Integer> subList = arr3.subList(0, 3);
        System.out.println("21.Sublist from index 0 to 3: " + subList);


        System.out.print("22.toArray: ");
        Integer[] array = arr3.toArray(new Integer[arr3.size()]);
        for(Integer i:array)
        {
            System.out.print(i+" ");
        }
        System.out.println();

        Object[] objArray = arr3.toArray();
        System.out.println("23.Array converted to array (without specifying type): " + Arrays.toString(objArray));
       
       System.out.print("24.spliterator: ");
       Spliterator<Integer> spliterator = arr3.spliterator();
       spliterator.forEachRemaining((temp)->System.out.print(temp+" "));
       System.out.println();


       System.out.print("25.sort:");
       arr3.sort(Comparator.naturalOrder());
       System.out.println(arr3);

       System.out.print("26.reverse:");
       arr3.sort(Comparator.reverseOrder());
       System.out.println(arr3);

       System.out.print("27. Iterating over elements: ");
       Iterator<Integer> iterator = arr3.iterator();
       while (iterator.hasNext()) {
           System.out.print(iterator.next() + "-");
       }
       System.out.println();

        Collections.replaceAll(arr3, 10, 100);
        System.out.println("28. Array after replacing all occurrences of 80 with 100: " + arr3);

      
        arr3.retainAll(Arrays.asList(18, 40));
        System.out.println("29.Array after retaining elements 20 and 40: " + arr3);

    }
}
*/
//--------------------------------------------------------------------------------
//collections
/*

import java.util.*;

public class oops {

    public static void main(String[] args) {
        
        List<Integer> list = new ArrayList<>();
        list.add(10);
        list.add(20);
        list.add(30);

        // A. addAll
        Collections.addAll(list, 40, 50, 60);
        System.out.println("1.After adding all: " + list);

        // B. binarySearch
        int index = Collections.binarySearch(list, 30);
        System.out.println("2.Index of 30: " + index);

        // C. copy
        List<Integer> destList = new ArrayList<>(Arrays.asList(new Integer[list.size()]));
        Collections.copy(destList, list);
        System.out.println("3.Copied list: " + destList);

        // D. disjoint
        boolean disjoint = Collections.disjoint(list, Arrays.asList(10, 80, 90));
        System.out.println("4.Disjoint with [10, 80, 90]: " + disjoint);

        
        // E. emptyList
        List<Integer> emptyList = Collections.emptyList();
        System.out.println("5.Empty list: " + emptyList);


        int frequency = Collections.frequency(list, 10);
        System.out.println("6.Frequency of 0: " + frequency);

        index = Collections.indexOfSubList(list, Arrays.asList(20, 30));
        System.out.println("7.Index of sublist [20, 30]: " + index);

        // I. max
        int max = Collections.max(list);
        System.out.println("9.Max value: " + max);

        // J. min
        int min = Collections.min(list);
        System.out.println("10.Min value: " + min);

        // K. nCopies
        List<Integer> nCopiesList = Collections.nCopies(3, 100);
        System.out.println("11.List with 3 copies of 100: " + nCopiesList);


        // L. replaceAll
        Collections.replaceAll(list, 10, 99);
        System.out.println("12.After replacing all 0s with 99: " + list);

        // M. reverse
        Collections.reverse(list);
        System.out.println("13.After reversing: " + list);

        // N. shuffle
        Collections.shuffle(list);
        System.out.println("14.After shuffling: " + list);

        // O. singleton
        List<Integer> singletonList = Collections.singletonList(200);
        System.out.println("15.Singleton list: " + singletonList);

        Collections.sort(list);
        System.out.println("16.After sorting: " + list);

        // Q. swap
        Collections.swap(list, 0, 1);
        System.out.println("17.After swapping: " + list);

        // R. unmodifiableList
        List<Integer> unmodifiableList = Collections.unmodifiableList(list);
        System.out.println("18.Unmodifiable list: " + unmodifiableList);
        //unmodifiableList.set(1, 2); error will occuur

        Collections.fill(list, 0);
        System.out.println("6.After filling with 0: " + list);


        List<Integer> list1 = new ArrayList<>();
        list1.add(10);
        list1.add(20);
        list1.add(30);

        System.out.println();



    }
}


//--------------------------------------------------------------------------------
/*
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class oops {

    public static void main(String[] args) {
        ArrayList <Integer> temp = new ArrayList<>();
        temp.add(12);
        temp.add(1);
        temp.add(121);
        temp.add(54);
        temp.add(13);
        ArrayList<Integer> clonedList = (ArrayList<Integer>) temp.clone();
        System.out.println("Cloned ArrayList: " + clonedList);

        // Reversing the elements of the ArrayList
        Collections.reverse(temp);
        System.out.println("Reversed ArrayList: " + temp);

        Collections.sort(temp);
        System.out.println("Sorted ArrayList: " + temp);

        // Shuffling the elements of the ArrayList
        Collections.shuffle(temp);
        System.out.println("Shuffled ArrayList: " + temp);


        ArrayList <Integer> temp2 = new ArrayList<>();
        temp2.add(1);
        temp2.add(2);
        temp2.add(3);
        temp2.add(4);
        temp2.add(5);
        temp2.add(6);
        temp2.add(7);
        temp2.add(8);
        temp2.add(9);
        temp2.add(10);
        Collections.rotate(temp2, 2);
        System.out.println("Rotated ArrayList: " + temp2);



        temp2.trimToSize();
        System.out.println("ArrayList after trimming to its current size: " + temp2);


        int key = 3;
        int index = Collections.binarySearch(temp2, key);
        System.out.println("Index of " + key + " in the sorted list: " + index);

        Integer max = Collections.max(temp2);
        System.out.println("Maximum element in the list: " + max);

        // Finding the minimum element in the list
        Integer min = Collections.min(temp2);
        System.out.println("Minimum element in the list: " + min);

        // Synchronizing the list
        List<Integer> synchronizedList = Collections.synchronizedList(temp2);
        synchronizedList.forEach((i)->
        {
            System.out.print(i+" ");
        }
        );
        System.out.println();

        // Creating an unmodifiable view of the list
        List<Integer> unmodifiableList = Collections.unmodifiableList(temp2);
        unmodifiableList.forEach((j)->
        {
            System.out.print(j+" ");
        }
        );
        System.out.println();


        ArrayList <Integer> temp3 = new ArrayList<>();
        temp3.add(1);
        temp3.add(2);
        temp3.add(3);
        temp3.add(7);
        temp3.add(8);
        temp3.add(9);
        temp3.add(10);
        temp3.add(10);
        temp3.add(10);



        System.out.println("---------Copying elements from one list to another-----------");
        List<Integer> destList = new ArrayList<>(Collections.nCopies(temp3.size(), 0));
        Collections.copy(destList, temp3);
        System.out.println("Copied list: " + destList);

        System.out.println("-----Checking if two lists are disjoint----------");
        List<Integer> anotherList = new ArrayList<>();
        anotherList.add(4);
        anotherList.add(5);
        anotherList.add(6);

        boolean disjoint = Collections.disjoint(temp3, anotherList);
        System.out.println("Are the two lists disjoint? " + disjoint);

        System.out.println("-----Counting the frequency of an element in the list----");
        int frequency = Collections.frequency(temp3, 10);
        System.out.println("Frequency of " + key + " in the list: " + frequency);

        System.out.println("--- Adding multiple elements to the list-----");
        List<Integer> list = new ArrayList<>();
        Collections.addAll(list, 1, 2, 3);
        System.out.println("List after adding elements: " + list);

        System.out.println("---Replacing all occurrences of one element with another---");
        Collections.replaceAll(list, 2, 10);
        System.out.println("List after replacing elements: " + list);



        System.out.println("----Creating a synchronized (thread-safe) collection backed by the specified collection----");
        List<Integer> synchronizedList2 = Collections.synchronizedList(list);
        synchronizedList2.forEach((k)->
        {
            System.out.print(k+" ");
        });
        System.out.println();
        
        System.out.println("--Creating an immutable list consisting of n copies of the specified object----");
        List<Integer> immutableList = Collections.nCopies(5, 10);
        System.out.println("Immutable list: " + immutableList);

        System.out.println("---Creating an empty list (immutable)------");
        List<Integer> emptyList = Collections.emptyList();
        System.out.println("Empty list: " + emptyList);     
        

        List<Integer> temp4 = new ArrayList<>();
        temp4.add(6);
        temp4.add(4);
        temp4.add(5);
        temp4.add(1);
        temp4.add(2);
        temp4.add(3);
        temp4.add(42);
        temp4.add(22);
        temp4.add(232);

        System.out.println("--- Swapping elements at the specified positions---");
        Collections.swap(temp4, 0, 2);
        System.out.println("List after swapping: " + temp4);

        Collections.fill(temp2, 0);
        System.out.println("ArrayList after filling with 0: " + temp2);

        temp2.clear();
        System.out.println(temp2);

    }
}
*/

//---------------------------------------------------------------------------------------------
//linkedlist

/*       size(),.clear(),.removeLast(),.add(),.removeFirst(),
        .add(,),.addAll(),.addFirst(),.addLast(null),..contains()
        .containsAll(),..descendingIterator(),.element(),
        equals(),.forEach(),.get(),.getClass(),.getFirst()

        .getLast(),..hashCode(),.indexOf(list1),.isEmpty(),
        .iterator(),.lastIndexOf(),.listIterator(),.offer()
        ..parallelStream(),.peek(),.peekFirst(),.peekLast()
        .poll(),.pollFirst(),.pollLast(),.pop(),.push(),

        .remove(),.removeAll(),.removeFirstOccurrence(),
        .removeIf(),.removeLastOccurrence(),.replaceAll(),
        .retainAll(),.set(0,1),.sort(),.spliterator(),.stream()
        .subList(0, 0),.toArray(),.toString(), 
 */
/* 
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Spliterator;

public class oops {
    public static void main(String[] args) {
        LinkedList<String> list1 = new LinkedList<>();
        list1.add("1");
        list1.add("11");
        list1.add("23");
        list1.add("123");
        list1.add("2324");
        list1.add("234");
        list1.add("75");

        System.out.println("------.size()----");
        int size=list1.size();
        System.out.println(size);


        System.out.println("-----collections sort--");
        Collections.sort(list1);
        System.out.println(list1);

        System.out.println("-----remove()-----");
        list1.remove("123");
        System.out.println(list1);

        System.out.println("-----remove()-----");
        list1.remove();
        System.out.println(list1);


        System.out.println("-----removeLast()-----");
        list1.removeLast();
        System.out.println(list1);

        System.out.println("-----removeFirst-------");
        list1.removeFirst();
        System.out.println(list1);

        System.out.println("-----addFirst-------");
        list1.addFirst("7");
        System.out.println(list1);

        System.out.println("------addLast--------");
        list1.addLast("7");
        System.out.println(list1);

        System.out.println("------contains------");
        boolean a=list1.contains("7");
        System.out.println(a);


        LinkedList<String> list2 = new LinkedList<>();
        list2.add("1");
        list2.add("23");
        list2.add("123");
        list2.add("4");
        list2.add("123");
        list2.add("4");
        list2.add(1, "777777777777");

        System.out.println("---containsAll-----");
        boolean b=list1.containsAll(list2);
        System.out.println(b);


        System.out.println("------get------");
        String str1=list2.get(1);
        System.out.println(str1);


        System.out.println("------getFirst------");
        String str2=list2.getFirst();
        System.out.println(str2);
        System.out.println(list2);


        System.out.println("------getLast------");
        String str3=list2.getLast();
        System.out.println(str3);


        System.out.println("------getClass------");
        System.out.println(list2.getClass());


        System.out.println("----forEach-----");
        list2.forEach(element -> System.out.print(element + " "));


        System.out.println("-----hashcode-----");
        System.out.println(list2.hashCode());


        System.out.println("-----indexOf()---");
        int index1=list2.indexOf("55");
        System.out.println(index1);

        System.err.println("---lastIndexOf()----");
        int index2=list2.lastIndexOf("4");
        System.out.println(index2);

        System.out.println("---isEmpty----");
        boolean c=list2.isEmpty();
        System.out.println(c);


        Iterator<String> i = list2.iterator();
        System.out.println("LinkedList elements using iterator: ");
        while (i.hasNext()) {
            System.out.print(i.next() + " ");
        }
        System.out.println();


        System.out.println("Offer an element to the LinkedList (adds at the end)");
        list2.offer("777");
        System.out.println(list2);


        System.out.println("Perform operations in parallel using parallelStream()");
        list2.parallelStream().forEach(temp->System.out.print(temp+" "));
        System.out.println();



        System.out.println("----peek--Peek at the last element without removing it");
        String d=list2.peek();
        System.out.println(d);

        System.out.println("----peekFirst----");
        String e=list2.peekFirst();
        System.out.println(e);
        

        System.out.println("----peekLast----");
        String f=list2.peekLast();
        System.out.println(f);


        System.out.println("---poll--// Poll the first element and remove it");
        list2.poll();
        System.out.println(list2);

        
        System.out.println("---poll--// Poll the first element and remove it");
        list2.pollFirst();
        System.out.println(list2);

        
        System.out.println("---poll--// Poll the Last element and remove it");
        list2.pollLast();
        System.out.println(list2);



        System.out.println("----clear---");
        list2.clear();
        System.out.println(list2);


        LinkedList<String> list3 = new LinkedList<>();
        list3.add("1");
        list3.add("23");
        list3.add("123");
        list3.add("4");
        list3.add("123");
        list3.add("4");
        list3.add(1, "777777777777");

        System.out.println("----pop-----");
        list3.pop();
        System.out.println(list3);

        System.out.println("---push----");
        list3.push("LOKESH");
        System.out.println(list3);


        
        LinkedList<Integer> list4 = new LinkedList<>();
        list4.add(1);
        list4.add(23);
        list4.add(123);
        list4.add(4);
        list4.add(123);
        list4.add(4);
        list4.add(0, 22);

        System.out.println("LinkedList elements using descendingIterator: ");
        Iterator<Integer> j1 = list4.descendingIterator();
        while (j1.hasNext()) {
            System.out.print(j1.next() + " ");
        }
        System.out.println();

        ListIterator<Integer> j2 = list4.listIterator();
        System.out.println("LinkedList elements using listIterator: ");
        while (j2.hasNext()) {
            System.out.print(j2.next() + " ");
        }
        System.out.println();

        System.out.println("Traversing backward using ListIterator: ");
        while (j2.hasPrevious()) {
            System.out.print(j2.previous() + " ");
        }
        System.out.println();

        System.out.println("Get the first element of the LinkedList without removing it");
        System.out.println("First element of LinkedList: " + list4.element());

        System.out.println("---equals-----");
        System.out.println(list4.equals(list3));



        LinkedList<Integer> list5 = new LinkedList<>();
        list5.add(1);
        list5.add(1);
        list5.add(3);
        list5.add(1);
        list5.add(4);
        list5.add(1);
        list5.add(5);

        System.out.println("---removeFirstOccurrence----");
        list5.removeFirstOccurrence(1);
        System.out.println(list5);

        System.out.println("---removeLastOccurrence----");
        list5.removeLastOccurrence(1);
        System.out.println(list5);


        System.out.println("---removeIf------");
        list5.removeIf(num-> num%2==0);
        System.out.println(list5);

        System.out.println("----set---");
        list5.set(1,777);
        System.out.println(list5);

   

        LinkedList<Integer> list6 = new LinkedList<>();
        list6.add(1);
        list6.add(1);
        list6.add(3);
        list6.add(1);
        list6.add(4);
        list6.add(1);
        list6.add(5);

        LinkedList<Integer> list7 = new LinkedList<>();
        list7.add(1);
        list7.add(1);
        list7.add(3);



        System.out.println("--retailsAll---");
        list6.retainAll(list7);
        System.out.println(list6);


        System.out.println("Sort the LinkedList");
        list6.sort(Integer::compareTo);
        System.out.println("LinkedList after sorting: " + list6);


        System.out.print("Elements of LinkedList using Spliterator: ");
        Spliterator<Integer> spliterator = list6.spliterator();
        spliterator.forEachRemaining(System.out::print);
        System.out.println();

        System.out.println("Elements of LinkedList using stream: ");
        list6.stream().forEach(element -> System.out.print(element + " "));
        System.out.println();System.out.print("Elements of LinkedList using Spliterator: ");


        System.out.println("-----sublist-----");
        List<Integer> subList = list6.subList(0, 2);
        System.out.println("Sublist from index 0 to 0: " + subList);

        System.out.print("LinkedList converted to array: ");
        Integer[] array = list6.toArray(new Integer[0]);
       
        for (Integer element : array) {
            System.out.print(element + " ");
        }
        System.out.println();

        System.out.println("Convert LinkedList to a string");
        String linkedListString = list6.toString();
        System.out.println("LinkedList converted to string: " + linkedListString);

        System.out.println("--replaceAll---");
        list6.replaceAll((nums)->nums%2==0?0:1);
        System.out.println(list6);
 

        System.out.println("---removeAll---");
        list5.removeAll(list4);
        System.out.println(list5);






    }
}

*/


//-----------------------------------------------------------------------------------
// vector


/*
import java.util.Vector;
import java.util.Enumeration;

public class oops {
    public static void main(String[] args) {
        

        Vector<Integer> vector = new Vector<>();
        vector.addElement(1);
        vector.addElement(2);
        vector.addElement(3);
        vector.addElement(4);
        vector.addElement(5);

        // Remove element at index 2
        vector.removeElementAt(2);
        System.out.println("Vector after removing element at index 2: " + vector);

        // Remove element 'arr1' if exists
        vector.removeElement(3);
        System.out.println("Vector after removing element 'arr1': " + vector);

        // Set the size of the Vector to 0
        vector.setSize(0);
        System.out.println("Vector after setting size to 0: " + vector);

        // Add elements back to the Vector
        vector.addElement(1);
        vector.addElement(2);
        vector.addElement(3);
        vector.addElement(4);
        vector.addElement(5);

        // Get an Enumeration of the elements in the Vector
        Enumeration<Integer> enumeration = vector.elements();
        System.out.print("Elements of Vector using Enumeration: ");
        while (enumeration.hasMoreElements()) {
            System.out.print(enumeration.nextElement() + " ");
        }
        System.out.println();

        // Add a null element to the Vector
        vector.addElement(null);
        System.out.println("Vector after adding null element: " + vector);

        // Get the capacity of the Vector
        System.out.println("Capacity of Vector: " + vector.capacity());

        // Get the element at index 0
        System.out.println("Element at index 0: " + vector.elementAt(0));

        // Copy elements into an array
        Integer[] copyArray = new Integer[vector.size()];
        vector.copyInto(copyArray);
        System.out.print("Vector elements copied into array: ");
        for (Integer element : copyArray) {
            System.out.print(element + " ");
        }
        System.out.println();

        // Get the first element of the Vector
        System.out.println("First element of Vector: " + vector.firstElement());

        // Insert a null element at index 0
        vector.insertElementAt(null, 0);
        System.out.println("Vector after inserting null element at index 0: " + vector);

        // Remove all elements from the Vector
        vector.removeAllElements();
        System.out.println("Vector after removing all elements: " + vector);
    }
}
*/
//--------------------------------------------------------------------------------\
//stack

        /*  arr1.pop() arr1.push(null) arr1.peek(),empty(),.add(null)
,.add(0, null).addAll(arr1),.addElement(),.capacity(),.clear(),.clone(),.contains(),
.containsAll(arr1),.copyInto(args),.elementAt(0),.elements(),.ensureCapacity(0);

.equals(arr1),.firstElement(),forEach(null),get(0),.getClass(),.hashCode()
.indexOf(),.indexOf(arr1, 0),.insertElementAt(null, 0),.isEmpty(),.iterator()
.lastElement(),.lastIndexOf(),lastIndexOf(ar1, 0),listIterator(),.parallelStream(),
remove(0),.removeAll(arr1),.removeAllElements(),.removeElement(),.removeElementAt(0);
.removeIf(null),.replaceAll(null),.retainAll(arr1),.search(),.set(0, null),
setElementAt(null, 0);.setSize(0),.sort(null),.spliterator(),.stream(),
.subList(0, 0),.toArray(),.toString(),.trimToSize();
        */

/*
        import java.util.Stack;
        import java.util.Arrays;
        import java.util.Collections;
        
        public class oops {
            private static Integer set;

            public static void main(String[] args) {
                // Create a Stack
                Stack<Integer> stack = new Stack<>();
        
                // 1. pop(): Removes and returns the top element of the stack.
                stack.push(10);
                System.out.println("1.Popped element: " + stack.pop());
        
                // 2. push(null): Pushes a null element onto the top of the stack.
                stack.push(null);
                System.out.println("2.Stack after pushing null: " + stack);
        
                // 3. peek(): Returns the top element of the stack without removing it.
                System.out.println("3.Peeked element: " + stack.peek());
        
                // 4. empty(): Checks if the stack is empty.
                System.out.println("4.Is stack empty? " + stack.empty());
        
                // 5. .add(null): Adds a null element to the end of the stack.
                stack.add(null);
                System.out.println("5.Stack after adding null: " + stack);
        
                // 6. .add(0, null): Adds a null element at the specified index in the stack.
                stack.add(0, null);
                System.out.println("6.Stack after adding null at index 0: " + stack);
        
                // 7. .addAll(arr1): Adds all elements from another collection arr1 to the stack.
                Stack<Integer> arr1 = new Stack<>();
                arr1.addAll(Arrays.asList(1, 2, 3));
                stack.addAll(arr1);
                System.out.println("7. Stack after adding all elements from arr1: " + stack);
        
                // 8. .addElement(): Adds an element to the end of the stack (same as .add()).
                stack.addElement(100);
                System.out.println("8. Stack after adding element using addElement(): " + stack);
        
                // 9. .capacity(): Returns the current capacity of the stack.
                System.out.println("9. Stack capacity: " + stack.capacity());
        
                // 10. .clear(): Removes all elements from the stack.
                stack.clear();
                System.out.println("10.Stack after clearing: " + stack);
        
                // 11. .clone(): Creates a shallow copy of the stack.
                Stack<Integer> cloneStack = (Stack<Integer>) stack.clone();
                System.out.println("11.Cloned stack: " + cloneStack);
        
                // 12. .contains(): Checks if the stack contains a specified element.
                stack.addAll(Arrays.asList(1, 2, 3));
                System.out.println("12.Does stack contain 2? " + stack.contains(2));
        
                // 13. .containsAll(arr1): Checks if the stack contains all elements from collection arr1.
                System.out.println("13.Does stack contain all elements from arr1? " + stack.containsAll(arr1));
        
                // 14. .copyInto(args): Copies the elements of the stack into the array args.
                Integer[] array = new Integer[stack.size()];
                stack.copyInto(array);
                System.out.println("14.Array copied from stack: " + Arrays.toString(array));
        
                // 15. .elementAt(0): Returns the element at the specified index in the stack.
                System.out.println("15.Element at index 0: " + stack.elementAt(0));
        
                // 16. .elements(): Returns an enumeration of the elements in the stack.
                System.out.println("16.Enumeration of elements in stack:");
                Collections.list(stack.elements()).forEach(System.out::println);
        
                // 17. .ensureCapacity(0): Ensures that the stack has at least the specified capacity.
                stack.ensureCapacity(10);
                System.out.println("17.Stack after ensuring capacity: " + stack);
        
                // 18. .equals(arr1): Checks if the stack is equal to collection arr1.
                System.out.println("18.Is stack equal to arr1? " + stack.equals(arr1));
        
                // 19. .firstElement(): Returns the first element of the stack.
                System.out.println("19.First element of stack: " + stack.firstElement());
        
                // 20. forEach(null): Applies the given action to each element of the stack (null here indicates the action).
                stack.forEach(System.out::println);
        
                // 21. .get(0): Returns the element at the specified index in the stack.
                System.out.println("21.Element at index 0: " + stack.get(0));
        
                // 22. .getClass(): Returns the class of the stack.
                System.out.println("22.Stack class: " + stack.getClass());
        
                // 23. .hashCode(): Returns the hash code value for the stack.
                System.out.println("23.Stack hash code: " + stack.hashCode());
        
                // 24. .indexOf(): Returns the index of the first occurrence of the specified element in the stack.
                System.out.println("24.Index of element 2: " + stack.indexOf(2));
        
                // 25. .indexOf(arr1, 0): Returns the index of the first occurrence of the specified element in
                // 25. .indexOf(arr1, 0): Returns the index of the first occurrence of the specified element in the stack, starting the search at the specified index.
                System.out.println("25.Index of element 2 starting from index 0: " + stack.indexOf(2, 0));

                // 26. .insertElementAt(null, 0): Inserts the specified element at the specified position in the stack.
                stack.insertElementAt(null, 0);
                System.out.println("26.Stack after inserting null at index 0: " + stack);

                // 27. .isEmpty(): Checks if the stack is empty.
                System.out.println("27.Is stack empty? " + stack.isEmpty());

                // 28. .iterator(): Returns an iterator over the elements in the stack.
                System.out.println("28.Iterator over elements in stack:");
                stack.iterator().forEachRemaining(System.out::println);

                // 29. .lastElement(): Returns the last element of the stack.
                System.out.println("29.Last element of stack: " + stack.lastElement());

                // 30. .lastIndexOf(): Returns the index of the last occurrence of the specified element in the stack.
                System.out.println("30.Last index of element 2: " + stack.lastIndexOf(2));

                // 31. .lastIndexOf(arr1, 0): Returns the index of the last occurrence of the specified element in the stack, starting the search at the specified index.
                System.out.println("31.Last index of element 2 starting from index 0: " + stack.lastIndexOf(2, 0));

                // 32. .listIterator(): Returns a list iterator over the elements in the stack.
                System.out.println("32.List iterator over elements in stack:");
                stack.listIterator().forEachRemaining(System.out::println);

                // 33. .parallelStream(): Returns a parallel stream of the elements in the stack.
                System.out.println("33.Parallel stream of elements in stack:");
                stack.parallelStream().forEach(System.out::println);

                // 34. .remove(0): Removes the element at the specified index in the stack.
                stack.remove(0);
                System.out.println("34.Stack after removing element at index 0: " + stack);

                // 35. .removeAll(arr1): Removes all occurrences of the elements in collection arr1 from the stack.
                stack.addAll(Arrays.asList(1, 2, 3, 4, 5));
                stack.removeAll(arr1);
                System.out.println("35.Stack after removing all elements in arr1: " + stack);

                // 36. .removeAllElements(): Removes all elements from the stack.
                stack.removeAllElements();
                System.out.println("36.Stack after removing all elements: " + stack);

                // 37. .removeElement(): Removes the first occurrence of the specified element from the stack.
                stack.addAll(Arrays.asList(1, 2, 3, 4, 5));
                stack.removeElement(2);
                System.out.println("37.Stack after removing first occurrence of element 2: " + stack);

                // 38. .removeElementAt(0): Removes the element at the specified index in the stack.
                stack.removeElementAt(0);
                System.out.println("38.Stack after removing element at index 0: " + stack);

                // 39. .removeIf(null): Removes all elements of the stack that satisfy the given predicate (null here indicates the predicate).
                stack.removeIf(e -> e % 2 == 0);
                System.out.println("39.Stack after removing even elements: " + stack);

                // 40. .replaceAll(null): Replaces each element of the stack with the result of applying the given operator (null here indicates the operator).
                stack.replaceAll(e -> e * 10);
                System.out.println("40.Stack after multiplying each element by 10: " + stack);

                // 41. .retainAll(arr1): Retains only the elements in the stack that are contained in collection arr1.
                stack.addAll(Arrays.asList(10, 20, 30, 40, 50));
                stack.retainAll(arr1);
                System.out.println("41.Stack after retaining only elements in arr1: " + stack);

                // 42. .search(): Searches for the specified object in the stack and returns its position.
                System.out.println("42.Position of element 30: " + stack.search(30));



                Stack<Integer> stack1 = new Stack<>();
                stack1.add(143);
                stack1.add(3);
                stack1.add(13);
                stack1.add(13);
                stack1.add(143);

                // 43. .set(0, null): Replaces the element at the specified position in the stack with the specified element (null here indicates the element).
                stack1.set(0, 1);
                System.out.println("43.Stack after setting element at index 0 to null: " + stack1);

                // 44. .setElementAt(null, 0): Sets the element at the specified index in the stack to be the specified element (null here indicates the element).
                stack1.setElementAt(5, 0);
                System.out.println("44.Stack after setting element at index 0 to null: " + stack1);



                // 46. .sort(null): Sorts the elements of the stack using the specified
                
                // Sorting the stack (Ascending Order)
                Collections.sort(stack1);
                System.out.println("46.Stack after sorting in ascending order: " + stack1);
        
                // 47. .spliterator(): Creates a late-binding and fail-fast spliterator over the elements in the stack.
                System.out.println("47.Spliterator characteristics: " + stack1.spliterator().characteristics());
        
                // 48. .stream(): Returns a sequential stream of the elements in the stack.
                System.out.println("48.Sequential stream of elements in stack:");
                stack1.stream().forEach(System.out::println);
        
                // 49. .subList(0, 0): Returns a view of the portion of the stack between the specified fromIndex, inclusive, and toIndex, exclusive.
                System.out.println("49.Sublist of stack from index 0 to 0: " + stack1.subList(0, 0));
        
                // 50. .toArray(): Returns an array containing all of the elements in the stack in proper sequence.
                Integer[] arrayFromStack = stack1.toArray(new Integer[0]);
                System.out.println("50.Array created from stack: " + Arrays.toString(arrayFromStack));
        
                // 51. .toString(): Returns a string representation of the stack.
                System.out.println("51.String representation of stack: " + stack1.toString());
        
                // 52. .trimToSize(): Trims the capacity of the stack to be the stack's current size.
                stack1.trimToSize();
                System.out.println("52.Stack after trimming to size: " + stack1);

                // 45. .setSize(0): Sets the size of the stack to the specified size.
                stack1.setSize(0);
                 System.out.println("45.Stack after setting size to 0: " + stack1);
        }
    }
    
*/
//---------------------------------------------------------------------------------------------------------------------
//deque
/* 
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.Iterator;
public class oops {
    public static void main(String[] args) {
        Deque <Integer> arr1 = new ArrayDeque<>();
        // Adding elements
        arr1.add(1);
        arr1.add(2);
        arr1.add(3);

        // 1. addFirst(element)
        arr1.addFirst(0);
        System.out.println("1."+arr1);

        // 2. addLast(element)
        arr1.addLast(4);
        System.out.println("2."+arr1);

        // // 3. clear()
        // arr1.clear();

        // 4. clone()
        Deque<Integer> arr2 = ((ArrayDeque<Integer>) arr1).clone();
        System.out.println("4."+arr2);

        // 5. contains(element)
        boolean contains = arr1.contains(3);
        System.out.println("5."+contains);


        // 6. descendingIterator()
        Iterator<Integer> descendingIterator = arr1.descendingIterator();
        descendingIterator.forEachRemaining(temp1->System.out.print(temp1+" "));
        System.out.println();

        // 7. element()
        Integer first = arr1.element();
        System.out.println("7. "+first);

        // 8. getFirst()
        Integer firstElement = arr1.getFirst();
        System.out.println("8. "+firstElement);

        // 9. getLast()
        Integer lastElement = arr1.getLast();
        System.out.println("9. "+lastElement);


        // 10. isEmpty()
        boolean isEmpty = arr1.isEmpty();
        System.out.println("10. "+isEmpty);

        // 11. iterator()
        System.out.print("11. ");
        Iterator<Integer> iterator = arr1.iterator();
        iterator.forEachRemaining((temp2)->System.out.print(temp2+" "));
        System.out.println();

        // 12. offer(element)
        boolean offerResult = arr1.offer(5);// Will return ture because the deque is notfull
        System.out.println("12. "+offerResult);


        // offerFirstResult will be true if the element -1 was successfully added to the front of the deque, otherwise it will be false.
        // offerLastResult will be true if the element 6 was successfully added to the end of the deque, otherwise it will be false. 

        // 13. offerFirst(element)
        boolean offerFirstResult = arr1.offerFirst(-1);
        System.out.println("13. "+offerFirstResult);

        // 14. offerLast(element)
        boolean offerLastResult = arr1.offerLast(6);
        System.out.println("14. "+offerLastResult);


        Deque <Integer> arr3= new ArrayDeque<>();
        // Adding elements
        arr3.add(1);
        arr3.add(2);
        arr3.add(3);
        arr3.add(21);
        arr3.add(22);
        arr3.add(23);
        // 15. peek()
        Integer peekedElement = arr3.peek();
        System.out.println("15. "+peekedElement);

        // 16. peekFirst()
        Integer peekedFirst = arr3.peekFirst();
        System.out.println("16. "+peekedFirst);

        // 17. peekLast()
        Integer peekedLast = arr3.peekLast();
        System.out.println("17. "+peekedLast);
        System.out.println(arr3);

        // 18. poll()
        Integer polledElement = arr3.poll();
        System.out.println("18. "+polledElement);

        // 19. pollFirst()
        Integer polledFirst = arr3.pollFirst();
        System.out.println("19. "+polledFirst);

        // 20. pollLast()
        Integer polledLast = arr3.pollLast();
        System.out.println("20. "+polledLast);
        System.out.println(arr3);

        // 21. pop()
        Integer poppedElement = arr3.pop();
        System.out.println("21. "+poppedElement);
        System.out.println(arr3);

        // 22. push(element)
        arr3.push(7);
        System.out.println("22. "+arr3);


        Deque <Integer> arr4= new ArrayDeque<>();
        // Adding elements
        arr4.add(1);
        arr4.add(2);
        arr4.add(3);
        arr4.add(21);
        arr4.add(22);
        arr4.add(23);


        // 23. remove()
        Integer removedElement = arr4.remove();
        System.out.println("23. "+removedElement);
        System.out.println(arr4);

        // 24. remove(element)
        boolean removeResult = arr4.remove(3);
        System.out.println("24. "+removeResult);
        System.out.println(arr4);


        // 25. removeFirst()
        Integer removedFirst = arr4.removeFirst();
        System.out.println("25. "+removedFirst);
        System.out.println(arr4);

        // 26. removeFirstOccurrence(element)
        boolean removeFirstOccurrenceResult = arr4.removeFirstOccurrence(2);
        System.out.println("26. "+removeFirstOccurrenceResult);
        System.out.println(arr4);

        // 27. removeLast()
        Integer removedLast = arr4.removeLast();
        System.out.println("27. "+removedLast);
        System.out.println(arr4);

        // 28. removeLastOccurrence(element)
        boolean removeLastOccurrenceResult = arr4.removeLastOccurrence(1);
        System.out.println("28. "+removeLastOccurrenceResult);
        System.out.println(arr4);


        Deque <Integer> arr5= new ArrayDeque<>();
        // Adding elements
        arr5.add(1);
        arr5.add(2);
        arr5.add(3);
        arr5.add(21);
        arr5.add(22);
        arr5.add(23);
        arr5.add(26);
        arr5.add(27);
        arr5.add(223);

        Deque <Integer> arr6= new ArrayDeque<>();
        // Adding elements
        arr6.add(1);
        arr6.add(2);
        arr6.add(3);
        arr6.add(2123);

        // 29. removeIf(predicate)
        arr5.removeIf(e -> e > 5);
        System.out.println("29. "+arr5);


        // 31. retainAll(collection)
        arr5.retainAll(arr6);
        System.out.println("31. "+arr5);

        // 32. size()
        int size = arr5.size();
        System.out.println("32. "+size);

        // 33. spliterator()
        arr5.spliterator();
        System.out.println("33. "+arr5);

        // 34. stream()
        System.out.print("34. ");
        arr5.stream().forEach((temp)->System.out.print(temp+" "));
        System.out.println();

        // 35. toArray()
        System.out.print("35. ");
        Object[] array = arr5.toArray();
        for(Object temp:array)
        {
            System.out.print(temp+" ");
        }
        System.out.println();

        // 36. toArray(array)
        System.out.print("36. ");
        Integer[] newArray = arr5.toArray(new Integer[arr5.size()]);
        for(Integer temp:newArray)
        {
            System.out.print(temp+" ");
        }
        System.out.println();


        // 37. toString()
        String str = arr5.toString();
        System.out.println("37."+str);

        // 38. descendingSet()
        System.out.print("38. ");
        Iterator<Integer> d = arr5.descendingIterator();
        while (d.hasNext()) {
            Integer element = d.next();
            System.out.print(element + " ");
        }
        System.out.println();
        


        // 39. forEach(action)
        System.out.print("39. ");
        arr5.forEach(System.out::print);
        System.out.println();

        // 40. hashCode()
        System.out.print("40. ");
        int hashCode = arr5.hashCode();
        System.out.println(hashCode);

        // 41. equals(other)
        System.out.print("41.");
        boolean isEqual = arr1.equals(arr2);
        System.out.println(isEqual);

        // 42. containsAll(collection)
        System.out.print("42.");
        boolean containsAll = arr1.containsAll(arr2);
        System.out.println(containsAll);
        

        // 43. toArray(generator)
        System.out.print("43.");
        Integer[] generatedArray = arr5.toArray(Integer[]::new);
        for(int i=0;i<generatedArray.length;i++)
        {
            System.out.print(generatedArray[i]+" ");            
        }
        System.out.println();

        // 44. iterator()
        System.out.print("44.");
        Iterator<Integer> iterator1 = arr5.iterator();
        iterator1.forEachRemaining((temp)->System.out.print(temp+" "));
        System.out.println();


        // 45. size()
        System.out.print("45.");
        int size1 = arr1.size();
        System.out.println(size1);

        // 46. isEmpty()
        System.out.print("46.");
        boolean isEmpty1 = arr1.isEmpty();
        System.out.println(isEmpty1);

        // 47. iterator()
        System.out.print("47.");
        Iterator<Integer> iterator2 = arr1.iterator();
        iterator2.forEachRemaining((lokesh)->System.out.print(lokesh+" "));
        System.out.println();

        // 48. descendingIterator()
        System.out.print("48.");
        Iterator<Integer> descendingIterator1 = arr5.descendingIterator();
        descendingIterator1.forEachRemaining((ted)->System.out.print(ted+" "));
        System.out.println();

        // 49. removeFirstOccurrence(element)
        System.out.print("49.");
        boolean removeFirstOccurrenceResult1 = arr5.removeFirstOccurrence(2);
        System.out.println(removeFirstOccurrenceResult1);
        System.out.println(arr5);

        // 50. removeLastOccurrence(element)
        System.out.print("50.");
        boolean removeLastOccurrenceResult1 = arr5.removeLastOccurrence(1);
        System.out.println(removeLastOccurrenceResult1);
        System.out.println(arr5); 

    }
}
*/
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//arraydeque

/*
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.Iterator;

public class oops {
    public static void main(String[] args) {
        ArrayDeque<Integer> arr1 = new ArrayDeque<>();

        // Adding elements
        arr1.add(1);
        arr1.add(2);
        arr1.add(3);

        // 1. add(element)
        arr1.add(4);
        System.out.println("1.Added element: " + arr1);

        // 2. addFirst(element)
        arr1.addFirst(0);
        System.out.println("2.Added element at first position: " + arr1);

        // 3. addLast(element)
        arr1.addLast(5);
        System.out.println("3.Added element at last position: " + arr1);

        // // 4. clear()
        // arr1.clear();
        // System.out.println("Cleared ArrayDeque: " + arr1);

        // 5. clone()
        ArrayDeque<Integer> arr2 = arr1.clone();
        System.out.println("5.Cloned ArrayDeque: " + arr2);

        // 6. contains(element)
        boolean contains = arr1.contains(3);
        System.out.println("6.Does ArrayDeque contain element 3? " + contains);

        // 7. descendingIterator()
        System.out.println("7.Descending Iterator:");
        Iterator<Integer> descendingIterator = arr1.descendingIterator();
        while (descendingIterator.hasNext()) {
            System.out.print(descendingIterator.next() + " ");
        }
        System.out.println();

        // 8. element()
        System.out.print("8.");
        try {
            Integer firstElement = arr1.element();
            System.out.println("First element: " + firstElement);
        } catch (Exception e) {
            System.out.println("ArrayDeque is empty.");
        }

        // 9. getFirst()
        System.out.print("9.");
        try {
            Integer first = arr1.getFirst();
            System.out.println("First element: " + first);
        } catch (Exception e) {
            System.out.println("ArrayDeque is empty.");
        }

        // 10. getLast()
        System.out.print("10.");
        try {
            Integer last = arr1.getLast();
            System.out.println("Last element: " + last);
        } catch (Exception e) {
            System.out.println("ArrayDeque is empty.");
        }

        // 11. isEmpty()
        System.out.print("11.");
        boolean isEmpty = arr1.isEmpty();
        System.out.println("Is ArrayDeque empty? " + isEmpty);

        // 12. iterator()
        System.out.print("12.Iterator:");
        Iterator<Integer> iterator = arr1.iterator();
        while (iterator.hasNext()) {
            System.out.print(iterator.next() + " ");
        }
        System.out.println();

        // 13. offer(element)
        System.out.print("13.");
        boolean offerResult = arr1.offer(6);
        System.out.println(offerResult);
        System.out.println("Offered element: " + arr1);

        // 14. offerFirst(element),
        System.out.print("14.");
        boolean offerFirstResult = arr1.offerFirst(-1);
        System.out.println(offerFirstResult);
        System.out.println("Offered element at first position: " + arr1);


        // 15. offerLast(element)
        System.out.print("15.");
        boolean offerLastResult = arr1.offerLast(7);
        System.out.println(offerLastResult);
        System.out.println("Offered element at last position: " + arr1);

        
        // 16. peek()
        System.out.print("16.");
        Integer peekedElement = arr1.peek();
        System.out.println(peekedElement);
        System.out.println("Peeked element: " + arr1);

        // 17. peekFirst()
        System.out.print("17.");
        Integer peekedFirst = arr1.peekFirst();
        System.out.println(peekedFirst);
        System.out.println("Peeked first element: " + peekedFirst);

        // 18. peekLast()
        System.out.print("18,");
        Integer peekedLast = arr1.peekLast();
        System.out.println(peekedLast);
        System.out.println("Peeked last element: " + peekedLast);

        // 19. poll()
        System.out.print("19.");
        Integer polledElement = arr1.poll();
        System.out.println("Polled element: " + polledElement);
        System.out.println(arr1);

        // 20. pollFirst()
        System.out.print("20.");
        Integer polledFirst = arr1.pollFirst();
        System.out.println("Polled first element: " + polledFirst);
        System.out.println(arr1);

        // 21. pollLast()
        System.out.print("21.");
        Integer polledLast = arr1.pollLast();
        System.out.println("Polled last element: " + polledLast);
        System.out.println(arr1);

        // 22. pop()
        System.out.print("22.");
        try {
            Integer poppedElement = arr1.pop();
            System.out.println("Popped element: " + poppedElement);
        } catch (Exception e) {
            System.out.println("ArrayDeque is empty.");
        }
        System.out.println(arr1);

        // 23. push(element)
        System.out.print("23.");
        arr1.push(8);
        System.out.println("Pushed element: " + arr1);

        // 24. remove()
        System.out.print("24.");
        try {
            Integer removedElement = arr1.remove();
            System.out.println("Removed element: " + removedElement);
        } catch (Exception e) {
            System.out.println("ArrayDeque is empty.");
        }

        // 25. remove(element)
        System.out.print("25.");
        boolean removeResult = arr1.remove(3);
        System.out.println(removeResult);
        System.out.println("Removed element 3: " + arr1);

        // 26. removeFirst()
        System.out.print("26.");
        try {
            Integer removedFirst = arr1.removeFirst();
            System.out.println("Removed first element: " + removedFirst);
        } catch (Exception e) {
            System.out.println("ArrayDeque is empty.");
        }
        System.out.println(arr1);

        // 27. removeFirstOccurrence(element)
        System.out.print("27.");
        boolean removeFirstOccurrenceResult = arr1.removeFirstOccurrence(2);
        System.out.println(removeFirstOccurrenceResult);
        System.out.println("Removed first occurrence of element 2: " + arr1);

        // 28. removeLast()
        System.out.print("28.");
        try {
            Integer removedLast = arr1.removeLast();
            System.out.println("Removed last element: " + removedLast);
        } catch (Exception e) {
            System.out.println("ArrayDeque is empty.");
        }
        System.out.println(arr1);


        ArrayDeque<Integer> arr3 = new ArrayDeque<>();

        // Adding elements
        arr3.add(1);
        arr3.add(2);
        arr3.add(3);
        arr3.add(11);
        arr3.add(1);
        arr3.add(222);
        arr3.add(3333);

        ArrayDeque<Integer> arr4 = new ArrayDeque<>();

        // Adding elements
        arr4.add(1);
        arr4.add(222);
        arr4.add(3333);


        // 29. removeLastOccurrence(element)
        System.out.print("29.");
        boolean removeLastOccurrenceResult = arr3.removeLastOccurrence(1);
        System.out.println(removeLastOccurrenceResult);
        System.out.println("Removed last occurrence of element 1: " + arr3);

        // 30. removeIf(predicate)
        System.out.print("30.");
        arr3.removeIf(e -> e <= 5);
        System.out.println("it removes all elements greater than or equal to 5 from the collection: " + arr3);

        // 31. retainAll(collection)
        System.out.print("31.");
        arr3.retainAll(arr4);
        System.out.println("Retained elements present in arr2: " + arr3);


        // 33. size()
        System.out.print("33.");
        int size = arr3.size();
        System.out.println("Size of ArrayDeque: " + size);


        ArrayDeque<Integer> arr5 = new ArrayDeque<>();
        // Adding elements
        arr5.add(1);
        arr5.add(2);
        arr5.add(3);
        arr5.add(11);
        arr5.add(1);
        arr5.add(222);
        arr5.add(3333);

        // 34. spliterator()
        System.out.print("34.");
        arr5.spliterator().forEachRemaining((temp)->System.out.print(temp+"-"));
        System.out.println();

        // 35. stream()
        System.out.print("35.");
        System.out.print("Stream of ArrayDeque: ");
        arr5.stream().forEach(System.out::print);
        System.out.println();

        // 36. toArray()
        System.out.print("36.");
        Object[] array = arr5.toArray();
        for(Object temp:array)
        {
            System.out.print(temp+"_");
        }
        System.out.println();

        // 37. toArray(array)
        System.out.print("37.");
        System.out.println("New array representation of ArrayDeque: " + arr5.toString());

        // 38. toString
        System.out.print("38.");
        String str = arr5.toString();
        System.out.println("String representation of ArrayDeque: " + str);

        // 39. descendingSet()
        System.out.print("39.");
        Integer descendingSet = arr5.descendingIterator().next();
        System.out.println(descendingSet);

        
        // 40. forEach(action)
        System.out.print("40.");
        arr5.forEach(System.out::print);
        System.out.println();

        // 41. hashCode()
        System.out.print("41.");
        int hashCode = arr5.hashCode();
        System.out.println("Hash code of ArrayDeque: " + hashCode);

        // 42. equals(other)
        System.out.print("42.");
        boolean isEqual = arr5.equals(arr4);
        System.out.println("Are the two ArrayDeques equal? " + isEqual);

        // 43. containsAll(collection)
        System.out.print("43.");
        boolean containsAll = arr5.containsAll(arr4);
        System.out.println("Does arr1 contain all elements of arr2? " + containsAll);

        // 44. toArray(generator)
        System.out.print("44.");
        Integer[] generatedArray = arr5.toArray(Integer[]::new);

        for(Integer temp:generatedArray)
        {
            System.out.print(temp+" ");
        }
        System.out.println();

        // 45. iterator()
        System.out.print("45.");
        Iterator<Integer> iterator1 = arr5.iterator();
        System.out.print("Iterator:");
        while (iterator1.hasNext()) {
            System.out.print(iterator1.next() + " ");
        }
        System.out.println();

        // 46. size()
        System.out.print("46.");
        int size1 = arr5.size();
        System.out.println("Size of ArrayDeque: " + size1);

        // 47. isEmpty()
        System.out.print("47.");
        boolean isEmpty1 = arr5.isEmpty();
        System.out.println("Is ArrayDeque empty? " + isEmpty1);

        // 48. iterator()
        System.out.print("48.");
        System.out.print("Iterator:");
        Iterator<Integer> iterator2 = arr5.iterator();
        while (iterator2.hasNext()) {
            System.out.print(iterator2.next() + " ");
        }
        System.out.println();

        // 49. descendingIterator()
        System.out.print("49.");
        System.out.print("Descending Iterator:");
        Iterator<Integer> descendingIterator1 = arr5.descendingIterator();
        while (descendingIterator1.hasNext()) {
            System.out.print(descendingIterator1.next() + " ");
        }
        System.out.println();

        // 50. removeFirstOccurrence(element)
        System.out.print("50.");
        boolean removeFirstOccurrenceResult1 = arr5.removeFirstOccurrence(2);
        System.out.println("Removed first occurrence of element 2: " + arr5);

        // 51. removeLastOccurrence(element)
        System.out.print("51.");
        boolean removeLastOccurrenceResult1 = arr5.removeLastOccurrence(333);
        System.out.println("Removed last occurrence of element 1: " + arr5);


        // 32. removeAll(collection)
        System.out.print("52.");
        arr5.removeAll(arr4);
        System.out.println("Removed all elements of arr2: " + arr5);
    }
}
*/
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//queue
/*
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.AbstractList;
import java.util.Iterator;

public class oops {
    public static void main(String[] args) {
        Queue<Integer> arr1 = new LinkedList<>();

        // Adding elements
        arr1.add(1);
        arr1.add(2);
        arr1.add(3);

        // 1. add(element)
        System.out.print("1.");
        arr1.add(4);
        System.out.println("Added element: " + arr1);

        // 2. addAll(collection)
        System.out.print("2.");
        LinkedList<Integer> collection = new LinkedList<>();
        collection.add(2);
        collection.add(3);
        arr1.addAll(collection);
        System.out.println("Added collection: " + arr1);

        // 3. clear()
        System.out.print("3.");
        // arr1.clear();
        System.out.println("Cleared LinkedList: " + arr1);

        // 4. contains(element)
        System.out.print("4.");
        boolean contains = arr1.contains(3);
        System.out.println("Does LinkedList contain element 3? " + contains);

        // 5. element()
        System.out.print("5.");
        try {
            Integer firstElement = arr1.element();
            System.out.println("First element: " + firstElement);
        } catch (Exception e) {
            System.out.println("LinkedList is empty.");
        }

        // 6. forEach(action)
        // Note: null action here to demonstrate method signature, typically an action is provided
        System.out.print("6.");
        arr1.forEach((temp)-> System.out.print(temp+"*"));
        System.out.println();

        // 7. isEmpty()
        System.out.print("7.");
        boolean isEmpty = arr1.isEmpty();
        System.out.println("Is LinkedList empty? " + isEmpty);

        // 8. iterator()
        System.out.print("8.");
        System.out.print("Iterator:");
        Iterator<Integer> iterator = arr1.iterator();
        while (iterator.hasNext()) {
            System.out.print(iterator.next() + " ");
        }
        System.out.println();

        // 9. offer(element)
        System.out.print("9.");
        boolean offerResult = arr1.offer(7);
        System.out.print(offerResult+" ");
        System.out.println("Offered element: " + arr1);

        // 10. peek()
        System.out.print("10.");
        Integer peekedElement = arr1.peek();
        System.out.println("Peeked element: " + peekedElement);
        System.out.println(arr1);

        // 11. poll()
        System.out.print("11.");
        Integer polledElement = arr1.poll();
        System.out.println("Polled element: " + polledElement);
        System.out.println(arr1);

        // 12. remove()
        System.out.print("12.");
        try {
            Integer removedElement = arr1.remove();
            System.out.println("Removed element: " + removedElement);
        } catch (Exception e) {
            System.out.println("LinkedList is empty.");
        }
        System.out.println(arr1);

        // 13. remove(element)
        System.out.print("13.");
        boolean removeResult = arr1.remove(3);
        System.out.println("Removed element 3: " + arr1);
        System.out.println(removeResult);

        // 14. size()
        System.out.print("14.");
        int size = arr1.size();
        System.out.println("Size of LinkedList: " + size);

        // 15. toArray()
        System.out.print("12.");
        Object[] array = arr1.toArray();
        for(Object temp:array)
        {
            System.out.print(temp+"_");
        }
        System.out.println();

        // 16. toString()
        System.out.print("16.");
        String str = arr1.toString();
        System.out.println("String representation of LinkedList: " + str);

        // 17. getFirst()
        // is not work in getfirst
        System.out.print("17.");
        try {
            Integer first = ((LinkedList<Integer>) arr1).getFirst();
            System.out.println("First element: " + first);
        } catch (Exception e) {
            System.out.println("LinkedList is empty.");
        }
        System.out.println(arr1);

        // 18. getLast()
        // is not work in getLast
        System.out.print("18.");
        try {
            Integer last = ((LinkedList<Integer>) arr1).getLast();
            System.out.println("Last element: " + last);
        } catch (Exception e) {
            System.out.println("LinkedList is empty.");
        }
        System.out.println(arr1);

        // 19. removeFirst()
        //not works in queue
        System.out.print("19.");
        try {
            Integer removedFirst = ((LinkedList<Integer>) arr1).removeFirst();
            System.out.println("Removed first element: " + removedFirst);
        } catch (Exception e) {
            System.out.println("LinkedList is empty.");
        }
        System.out.println(arr1);

        // 20. removeLast()
        System.out.print("20.");
        try {
            Integer removedLast = ((LinkedList<Integer>) arr1).removeLast();
            System.out.println("Removed last element: " + removedLast);
        } catch (Exception e) {
            System.out.println("LinkedList is empty.");
        }
        System.out.println(arr1);

        // 21. addFirst(element)
        //not works in queue
        System.out.print("21.");
        ((LinkedList<Integer>) arr1).addFirst(0);
        System.out.println("Added element at first position: " + arr1);

        // 22. addLast(element)
        //not works in queue
        System.out.print("21.");
        ((LinkedList<Integer>) arr1).addLast(8);
        System.out.println("Added element at last position: " + arr1);

        // 23. descendingIterator()
        //not works in queue
        System.out.print("23.");
        System.out.print("Descending Iterator:");
        Iterator<Integer> descendingIterator = ((LinkedList<Integer>) arr1).descendingIterator();
        while (descendingIterator.hasNext()) {
            System.out.print(descendingIterator.next() + "-");
        }
        System.out.println();

        // 24. get(index)
        //not works in queue
        System.out.print("24.");
        try {
            Integer elementAtIndex = ((LinkedList<Integer>) arr1).get(2);
            System.out.println("Element at index 2: " + elementAtIndex);
        } catch (Exception e) {
            System.out.println("Index out of bounds.");
        }
        System.out.println(arr1);

        // 25. indexOf(element)
        //not works in queue
        System.out.print("25.");
        int indexOfElement = ((LinkedList<Integer>) arr1).indexOf(8);
        System.out.println("Index of element 2: " + indexOfElement);
        System.out.println(arr1);

        // 26. lastIndexOf(element)
        //not works in queue
        System.out.print("26.");
        int lastIndexOfElement = ((LinkedList<Integer>) arr1).lastIndexOf(2);
        System.out.println("Last index of element 2: " + lastIndexOfElement);
        System.out.println(arr1);

        // 27. listIterator(index)
        //not works in queue
        System.out.print("27");
        Iterator<Integer> listIterator = ((LinkedList<Integer>) arr1).listIterator(1);
        System.out.println("List Iterator starting from index 1:");
        while (listIterator.hasNext()) {
            System.out.print(listIterator.next() + " ");
        }
        System.out.println();

        // 28. offerFirst(element)
        System.out.print("28.");
        boolean offerFirstResult = arr1.offer(-1);
        System.out.println(offerFirstResult);
        System.out.println("Offered element at first position: " + arr1);
       

        // 29. offerLast(element)
        System.out.print("29.");
        boolean offerLastResult = arr1.offer(6);
        System.out.println("Offered element at last position: " + offerLastResult);
        System.out.println(arr1);

        // 30. peekFirst()
        //not works in queue
        System.out.print("30.");
        Integer peekedFirst = ((LinkedList<Integer>) arr1).peekFirst();
        System.out.println("Peeked first element: " + peekedFirst);
        System.out.println(arr1);



        Queue<Integer> arr2 = new LinkedList<>();
        // Adding elements
        arr2.add(1);
        arr2.add(2);
        arr2.add(3);
        arr2.add(4);
        arr2.add(5);
        arr2.add(6);
        arr2.add(7);
        arr2.add(8);
        arr2.add(9);

        // 31. peekLast()
         //not works in queue
        System.out.print("31.");       
        Integer peekedLast = ((LinkedList<Integer>) arr2).peekLast();
        System.out.println("Peeked last element: " + peekedLast);
        System.out.println(arr2);

        // 32. pollFirst()
        //not works in queue
        System.out.print("32.");
        Integer polledFirst = ((LinkedList<Integer>) arr2).pollFirst();
        System.out.println("Polled first element: " + polledFirst);
        System.out.println(arr2);

        // 33. pollLast()
        //not works in queue
        System.out.print("33.");
        Integer polledLast = ((LinkedList<Integer>) arr2).pollLast();
        System.out.println("Polled last element: " + polledLast);
        System.out.println(arr2);

        // 34. push(element)
        //not works in queue
        System.out.print("34.");
        ((LinkedList<Integer>) arr2).push(9);
        System.out.println("Pushed element: " + arr2);

        // 35. removeFirstOccurrence(element)
        //not works in queue
        System.out.print("35.");
        boolean removeFirstOccurrenceResult = ((LinkedList<Integer>) arr2).removeFirstOccurrence(2);
        System.out.println("Removed first occurrence of element 2: " + removeFirstOccurrenceResult);
        System.out.println(arr2);

        // 36. removeLastOccurrence(element)
        //not works in queue
        System.out.print("36.");
        boolean removeLastOccurrenceResult = ((LinkedList<Integer>) arr2).removeLastOccurrence(3);
        System.out.println("Removed last occurrence of element 3: " + removeLastOccurrenceResult);
        System.out.println(arr2);

        // 37. removeFirst()
        //not works in queue
        System.out.print("37.");
        Integer removedFirst = ((LinkedList<Integer>) arr2).removeFirst();
        System.out.println("Removed first element: " + removedFirst);
        System.out.println(arr2);

        // 38. removeLast()
        //not works in queue
        System.out.print("38.");
        Integer removedLast = ((LinkedList<Integer>) arr2).removeLast();
        System.out.println("Removed last element: " + removedLast);
        System.out.println(arr2);

        // 39. removeIf(predicate)
        System.out.print("39.");
        arr1.removeIf(e -> e < 5);
        System.out.println("Removed elements less than 5: " + arr2);

        // 40. replaceAll(unaryOperator)
        //not works in queue
        System.out.print("40.");
        ((List<Integer>) arr2).replaceAll(e -> e * 2);
        System.out.println("Doubled all elements: " + arr2);
        

        // 41. size()
        System.out.print("41.");
        int sizeAfterOperations = arr2.size();
        System.out.println("Size after operations: " + sizeAfterOperations);

        // 42. sort(comparator)
        //not works in queue

        // 43. spliterator()
        System.out.print("43.");
        arr2.spliterator().forEachRemaining((temp)->System.out.println(temp+" "));

        // 44. subList(fromIndex, toIndex)
        //not works in queue
        System.out.print("44.");
        LinkedList<Integer> subList = new LinkedList<>(((AbstractList<Integer>) arr2).subList(1, 3));
        System.out.println("Sublist from index 1 to 3: " + subList);

        // 45. toArray()
        System.out.print("45.");
        Object[] toArray = arr2.toArray();
        System.out.println("Array representation: " + toArray.toString());

        // 46. toArray(array)
        System.out.print("46.");
        Integer[] toArrayWithArgument = arr2.toArray(new Integer[arr2.size()]);
        for(Integer temp:toArrayWithArgument)
        {
            System.out.print(temp+"-");
        }
        System.out.println();

        // 47. forEach(consumer)
        System.out.print("47.");
        arr2.forEach(System.out::print);
        System.out.println();

        // 48. hashCode()
        System.out.print("48.");
        int hashCode = arr2.hashCode();
        System.out.println("Hash code of LinkedList: " + hashCode);

        // 49. equals(other)
        System.out.print("49.");
        boolean isEqual = arr2.equals(subList);
        System.out.println("Is LinkedList equal to sublist? " + isEqual);

        // 51. iterator()
        //not works in queue
        System.out.print("51.");
        Iterator<Integer> iterator2 = arr1.iterator();
        System.out.println("Iterator:");
        while (iterator2.hasNext()) {
            System.out.print(iterator2.next() + " ");
        }
        System.out.println();

        // 52. descendingIterator()
        //not works in queue
        System.out.print("52.");
        Iterator<Integer> descendingIterator2 = ((LinkedList<Integer>) arr1).descendingIterator();
        System.out.println("Descending Iterator:");
        while (descendingIterator2.hasNext()) {
            System.out.print(descendingIterator2.next() + " ");
        }
    }
}*/

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//PriorityQueue:
/* 
import java.util.PriorityQueue;
import java.util.Iterator;

public class oops {
    public static void main(String[] args) {
        PriorityQueue<Integer> arr1 = new PriorityQueue<>();
        arr1.add(1);
        arr1.add(12);
        arr1.add(11);
        arr1.add(22);
        arr1.add(122);
        arr1.add(21);
        arr1.add(32);
        arr1.add(142);
        System.out.println("* "+arr1);

        System.out.print("* ");
        while (!arr1.isEmpty()) {
            System.out.print(arr1.poll() + " ");
        }
        System.out.println();

        PriorityQueue<Integer> arr2 = new PriorityQueue<>();
        arr2.add(121);
        arr2.add(360);
        arr2.add(1);
        arr2.add(12);
        arr2.add(11);
        arr2.add(12);
        arr2.add(11);
        arr2.add(22);

        System.out.println("* "+arr2); // because of dulicate number so can't sort

        System.out.print("* ");
        while (!arr2.isEmpty()) {
            System.out.print(arr2.poll() + " ");
        }
        System.out.println();

        

        PriorityQueue<Integer> arr3 = new PriorityQueue<>();
        arr3.add(121);
        arr3.add(360);
        arr3.add(1);
        arr3.add(12);
        arr3.add(11);
        arr3.add(12);
        arr3.add(11);
        arr3.add(22);
        // 2. addAll(collection)
        PriorityQueue<Integer> collection = new PriorityQueue<>();
        collection.add(5);
        collection.add(6);
        arr3.addAll(collection);
        System.out.println("2. Added collection: " + arr3);
        while (!arr3.isEmpty()) {
            System.out.print(arr3.poll() + " ");
        }
        System.out.println();

        // // 3. clear()
        // arr1.clear();
        // System.out.println("3. Cleared PriorityQueue: " + arr1);

        PriorityQueue<Integer> arr4 = new PriorityQueue<>();
        arr4.add(121);
        arr4.add(360);
        arr4.add(1);
        arr4.add(12);
        arr4.add(11);
        arr4.add(12);
        arr4.add(11);
        arr4.add(22);
        // 4. contains(element)
        boolean contains = arr4.contains(11);
        System.out.println("4. Does PriorityQueue contain element 3? " + contains);

        // // 5. isEmpty()
        // boolean isEmpty = arr1.isEmpty();
        // System.out.println("5. Is PriorityQueue empty? " + isEmpty);

        // // 6. iterator()
        // Iterator<Integer> iterator = arr1.iterator();
        // System.out.print("6. Iterator: ");
        // while (iterator.hasNext()) {
        //     System.out.print(iterator.next() + " ");
        // }
        // System.out.println();

        // // 7. offer(element)
        // boolean offerResult = arr1.offer(7);
        // System.out.println("7. Offered element: " + arr1);

        // // 8. peek()
        // Integer peekedElement = arr1.peek();
        // System.out.println("8. Peeked element: " + peekedElement);

        // // 9. poll()
        // Integer polledElement = arr1.poll();
        // System.out.println("9. Polled element: " + polledElement);

        // // 10. remove(element)
        // boolean removeResult = arr1.remove(3);
        // System.out.println("10. Removed element 3: " + arr1);

        // // 11. size()
        // int size = arr1.size();
        // System.out.println("11. Size of PriorityQueue: " + size);

        // // 12. toArray()
        // Object[] array = arr1.toArray();
        // for(Object temp:array)
        // {
        //     System.out.println(temp+" ");
        // }

        // // 13. toString()
        // String str = arr1.toString();
        // System.out.println("13. String representation of PriorityQueue: " + str);

        // // 14. element()
        // try {
        //     Integer firstElement = arr1.element();
        //     System.out.println("14. First element: " + firstElement);
        // } catch (Exception e) {
        //     System.out.println("14. PriorityQueue is empty.");
        // }

        // // 15. remove()
        // try {
        //     Integer removedElement = arr1.remove();
        //     System.out.println("15. Removed element: " + removedElement);
        // } catch (Exception e) {
        //     System.out.println("15. PriorityQueue is empty.");
        // }

        // // 16. peek()
        // peekedElement = arr1.peek();
        // System.out.println("16. Peeked element: " + peekedElement);

        // // 17. poll()
        // polledElement = arr1.poll();
        // System.out.println("17. Polled element: " + polledElement);

        // // 18. toArray(T[])
        // Integer[] arr = arr1.toArray(new Integer[arr1.size()]);
        // System.out.println("18. Converted array: " + java.util.Arrays.toString(arr));

        // // 19. clear()
        // arr1.clear();
        // System.out.println("19. Cleared PriorityQueue: " + arr1);

        // // 20. addAll(collection)
        // arr1.addAll(collection);
        // System.out.println("20. Added collection: " + arr1);

        // // 21. containsAll(collection)
        // boolean containsAll = arr1.containsAll(collection);
        // System.out.println("21. Does PriorityQueue contain all elements of collection? " + containsAll);

        // // 22. removeAll(collection)
        // boolean removeAllResult = arr1.removeAll(collection);
        // System.out.println("22. Removed all elements of collection: " + arr1);

        // // 23. retainAll(collection)
        // arr1.add(1);
        // arr1.add(2);
        // boolean retainAllResult = arr1.retainAll(collection);
        // System.out.println("23. Retained all elements of collection: " + arr1);

        // // 24. removeIf(predicate)
        // boolean removeIfResult = arr1.removeIf(e -> e < 5);
        // System.out.println("24. Removed elements less than 5: " + arr1);

        // // 25. forEach(action)
        // // Note: null action here to demonstrate method signature, typically an action is provided
        // arr1.forEach(null);
        // System.out.println("25. ForEach loop completed.");

        // // 26. iterator()
        // iterator = arr1.iterator();
        // System.out.print("26. Iterator: ");
        // while (iterator.hasNext()) {
        //     System.out.print(iterator.next() + " ");
        // }
        // System.out.println();

        // // 27. offer(element)
        // offerResult = arr1.offer(7);
        // System.out.println("27. Offered element: " + arr1);

        // // 28. peek()
        // peekedElement = arr1.peek();
        // System.out.println("28. Peeked element: " + peekedElement);

        // // 29. poll()
        // polledElement = arr1.poll();
        // System.out.println("29. Polled element: " + polledElement);

        // // 30. remove(element)
        // removeResult = arr1.remove(3);
        // System.out.println("30. Removed element 3: " + arr1);

    }
}

*/
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// set
/*
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Stream;
import java.util.Set;
import java.util.HashSet;
import java.util.Iterator;

public class oops {
    public static void main(String[] args) {
        Set<Integer> arr = new HashSet<>();
        arr.add(12);
        arr.add(12);
        arr.add(231);
        arr.add(2);
        arr.add(0);
        ś

        System.out.println("1."+arr);
        System.err.println("2."+arr.size());
        System.out.println("3."+arr.contains(6));
        System.err.println("4."+arr.isEmpty());

        Set<Integer> arr2 = new HashSet<>();
        arr2.add(12);
        arr2.add(12);
        arr2.add(234);
        arr2.add(2);
        arr2.add(0);

        arr.addAll(arr2);
        System.out.println("5."+arr);

        System.out.println("6."+arr.containsAll(arr2));

        System.out.println("7."+arr.equals(arr2));

        arr.forEach((temp)->System.out.print(temp+"-"));
        System.out.println();

        System.out.println("8."+arr.getClass());
        System.out.println("9."+arr.hashCode());
    
        System.out.println("10."+arr.remove(2));
        System.out.println(arr);

        
        arr.retainAll(arr2);
        System.out.println("11."+arr);


        String str=arr.toString();
        System.out.println("12" + str);

        
        Object[] array = arr.toArray();
        for(Object temp:array)
        {
            System.out.print(temp+" ");
        }
        System.out.println();

        System.out.println("13. Stream of elements: ");
        arr.stream().forEach(System.out::print);
        System.out.println();

        System.out.println("14. Spliterator: ");
        arr.spliterator().forEachRemaining(System.out::print);
        System.out.println();

        // 5. parallelStream()
        System.out.println("15. Parallel stream: ");
        arr.parallelStream().forEach(System.out::print);
        System.out.println();

        Iterator<Integer> iterator = arr.iterator();
        System.out.print("16. Iterator: ");
        while (iterator.hasNext()) {
            System.out.print(iterator.next() + " ");
        }
        System.out.println();


        Set<Integer> arr3 = new HashSet<>();
        arr3.add(12);
        arr3.add(1221);
        arr3.add(234);
        arr3.add(2);
        arr3.add(0);
        Set<Integer> arr4 = new HashSet<>();
        arr4.add(12);
        arr4.add(12);
        arr4.add(234);
        arr4.add(2);
        arr4.add(0);

        arr3.removeIf(r->r%2==0);
        System.out.println(arr3);

    }
}
*/

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//HashSet
/* 
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class oops {

    public static void main(String[] args) {
        HashSet<Integer> arr1=new HashSet<>();
        arr1.add(9);
        arr1.add(21);
        arr1.add(8);
        arr1.add(7);
        arr1.add(21);
        arr1.add(2);
        arr1.add(21);
        arr1.add(6);
        arr1.add(2);
        arr1.add(5);
        arr1.add(3);
        arr1.add(4);
        arr1.add(2);
        arr1.add(2);

        HashSet<Integer> arr2=new HashSet<>();
        arr2.add(99);
        arr2.add(210);
        arr2.add(80);
        arr2.add(79);
        arr2.add(214);


        System.out.println("1."+arr1);
        System.out.println("2."+arr1.contains(1));

        arr1.addAll(arr2);
        System.out.println("4."+arr1);

        System.out.println("5."+arr1.containsAll(arr2));

        System.out.println("6."+arr1.equals(arr2));

        System.out.print("7.");
        Set<String> clonedSet = (HashSet<String>) arr1.clone();
        System.out.println(clonedSet);


        System.out.print("8.");
        arr1.forEach((temp)->System.out.print(temp+" "));
        System.out.println();

        System.out.println("9."+arr1.hashCode());

        System.out.println("10."+arr1.getClass());

        
        arr1.remove(214);
        System.out.println("11."+arr1);

        arr1.removeIf(num->num%2==1);
        System.out.println("12."+arr1);



        HashSet<Integer> arr3=new HashSet<>();
        arr3.add(9);
        arr3.add(6);
        arr3.add(2);
        arr3.add(5);
        arr3.add(3);
        arr3.add(4);
        arr3.add(2);
        arr3.add(2);


        arr1.retainAll(arr2);
        System.out.println("13."+arr1);

        arr1.removeAll(arr3);
        System.out.println("14."+arr1);


        HashSet<Integer> arr4=new HashSet<>();
        arr4.add(9);
        arr4.add(6);
        arr4.add(2);
        arr4.add(5);
        arr4.add(3);
        arr4.add(4);
        arr4.add(2);
        arr4.add(2);


        System.out.print("15. Parallel stream: ");
        arr4.parallelStream().forEach(System.out::print);
        System.out.println();

        System.out.print("16. Iterator: ");
        Iterator<Integer> iterator = arr4.iterator();
        while (iterator.hasNext()) {
            System.out.print(iterator.next() + " ");
        }
        System.out.println();

        System.out.print("17. Stream of elements: ");
        arr4.stream().forEach(System.out::print);
        System.out.println();

        System.out.print("18. Spliterator: ");
        arr4.spliterator().forEachRemaining(System.out::print);
        System.out.println();

        String str=arr4.toString();
        System.out.println("19."+str);

        System.out.print("20.");
        Object[] num=arr4.toArray();
        for(Object temp:num)
        {
            System.out.print(temp+" ");
        }

        }
    }


*/

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//LinkedSet
/* 
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.Iterator;

public class oops {
    public static void main(String[] args) {
        LinkedHashSet<String> linkedset = new LinkedHashSet<>();

        // Adding elements
        linkedset.add("apple");
        linkedset.add("banana");
        linkedset.add("cherry");


        // 1. add(element)
        linkedset.add("date");
        System.out.println("1. Added element: " + linkedset);

        // // 2. clear()
        // linkedset.clear();
        // System.out.println("2. Cleared LinkedHashSet: " + linkedset);

        // 3. contains(element)
        boolean contains = linkedset.contains("apple");
        System.out.println("3. Does LinkedHashSet contain 'apple'? " + contains);

        // 4. isEmpty()
        boolean isEmpty = linkedset.isEmpty();
        System.out.println("4. Is LinkedHashSet empty? " + isEmpty);

        // 5. iterator()
        Iterator<String> iterator = linkedset.iterator();
        System.out.print("5. Iterator: ");
        while (iterator.hasNext()) {
            System.out.print(iterator.next() + " ");
        }
        System.out.println();

        // 6. remove(element)
        boolean removeResult = linkedset.remove("banana");
        System.out.println("6. Removed 'banana': " + linkedset);

        // 7. size()
        int size = linkedset.size();
        System.out.println("7. Size of LinkedHashSet: " + size);

        // 8. toArray()
        System.out.print("8.");
        Object[] array = linkedset.toArray();
        for(Object temp:array)
        {
            System.out.print(temp+" ");
        }
        System.out.println();

        // 9. toString()
        String str = linkedset.toString();
        System.out.println("9. String representation of LinkedHashSet: " + str);

        // 10. equals(anotherSet)
        Set<String> anotherSet = new LinkedHashSet<>(linkedset);
        boolean equals = linkedset.equals(anotherSet);
        System.out.println("10. Is LinkedHashSet equal to anotherSet? " + equals);

        // 11. hashCode()
        int hashCode = linkedset.hashCode();
        System.out.println("11. Hash code of LinkedHashSet: " + hashCode);

        // 12. containsAll(collection)
        Set<String> collection = new LinkedHashSet<>();
        collection.add("apple");
        collection.add("date");
        boolean containsAll = linkedset.containsAll(collection);
        System.out.println("12. Does LinkedHashSet contain all elements of collection? " + containsAll);

        // 13. removeAll(collection)
        boolean removeAllResult = linkedset.removeAll(collection);
        System.out.println("13. Removed all elements of collection: " + linkedset);

        // 14. retainAll(collection)
        linkedset.add("apple");
        linkedset.add("banana");
        linkedset.add("cherry");
        boolean retainAllResult = linkedset.retainAll(collection);
        System.out.println("14. Retained all elements of collection: " + linkedset);

        // 15. removeIf(predicate)
        boolean removeIfResult = linkedset.removeIf(e -> e.startsWith("a"));
        System.out.println("15. Removed elements starting with 'a': " + linkedset);

        // 16. forEach(action)
        // Note: null action here to demonstrate method signature, typically an action is provided
        linkedset.forEach(temp->System.out.print(temp+" "));
        System.out.println("16. ForEach loop completed.");

        // 17. stream()
        System.out.println("17. Stream of elements: ");
        linkedset.stream().forEach(System.out::println);

        // 18. spliterator()
        System.out.println("18. Spliterator: ");
        linkedset.spliterator().forEachRemaining(System.out::println);

        // 19. addAll(collection)
        Set<String> newCollection = new LinkedHashSet<>();
        newCollection.add("grape");
        newCollection.add("kiwi");
        linkedset.addAll(newCollection);
        System.out.println("19. Added collection: " + linkedset);

        // 20. removeAll(collection)
        boolean removeAllResult2 = linkedset.removeAll(newCollection);
        System.out.println("20. Removed all elements of collection: " + linkedset);

        // 21. retainAll(collection)
        linkedset.add("apple");
        linkedset.add("banana");
        linkedset.add("cherry");
        boolean retainAllResult2 = linkedset.retainAll(newCollection);
        System.out.println("21. Retained all elements of collection: " + linkedset);

        // 22. containsAll(collection)
        boolean containsAll2 = linkedset.containsAll(newCollection);
        System.out.println("22. Contains all elements of collection? " + containsAll2);



        // 24. addIfAbsent(element)
        boolean addIfAbsentResult = linkedset.add("apple");
        System.out.println("24. Added element if absent: " + addIfAbsentResult);

        // 25. removeIf(predicate)
        boolean removeIfPredicateResult = linkedset.removeIf(e -> e.length() > 5);
        System.out.println("25. Removed elements with length > 5: " + linkedset);

        // // 26. replaceAll(operator)
        // ((Object) linkedset).replaceAll(e -> e.toUpperCase());
        // System.out.println("26. Replaced all elements with uppercase: " + linkedset);

        // // 27. forEachOrdered(action)
        // System.out.println("27. ForEachOrdered: ");
        // linkedset.forEachOrdered(System.out::println);

        // 28. toArray(generator)
        String[] newArray2 = linkedset.toArray(new String[linkedset.size()]);
        for(String temp:newArray2)
        {
            System.out.print(temp+" ");
        }
        System.out.println();

        // 29. parallelStream()
        System.out.println("29. Parallel stream: ");
        linkedset.parallelStream().forEach(System.out::println);

        // 30. hashCode()
        int hashCode2 = linkedset.hashCode();
        System.out.println("30. Hash code of LinkedHashSet: " + hashCode2);

        // Add more methods here as needed...

    }
}

*/
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// sortedset:
/* 
import java.util.Arrays;
import java.util.Iterator;
import java.util.SortedSet;
import java.util.TreeSet;

public class oops {
    public static void main(String[] args) {
        
        SortedSet<Integer> arr1 = new TreeSet<Integer>();
        arr1.add(1);
        arr1.add(2);
        arr1.add(3);
        arr1.add(4);
        System.out.println("1.add: "+arr1);

        SortedSet<Integer> arr2 = new TreeSet<Integer>();
        arr2.add(22);
        arr2.add(33);
        arr2.add(44);
        arr2.add(11);


        arr1.addAll(arr2);
        System.out.println("2.addAll: "+arr1);

       System.out.println("3.contains: "+ arr1.contains(2));

       System.out.println("4.contains: "+arr1.containsAll(arr2));
      
       System.out.println("5.equals: "+arr1.equals(arr2));

       System.out.println(arr1);
       System.out.println("6.get first: "+arr1.first());
       System.out.println(arr1);

       System.out.println("7.get last: "+arr1.last());
       System.out.println(arr1);

       System.out.print("8.forEach: ");
       arr1.forEach((temp)->System.out.print(temp+"-"));
       System.out.println();

       System.out.println("9.getclass: "+arr1.getClass());
       System.out.println("10.gethashcode:"+arr1.hashCode());
      
       SortedSet<Integer> subset = arr1.headSet(22);
       System.out.println("11.Subset with elements less than 40: " + subset);

       boolean a=arr1.add(1);
       System.out.println("12.added or not 😊:"+a);

       System.out.println(arr1);
       arr1.remove(1);
       System.out.println("13.remove "+arr1);
       arr1.remove((Integer)3);
       System.out.println("14.remove "+arr1);

       SortedSet<Integer> arr3 = new TreeSet<Integer>();
       arr3.add(22);
       arr3.add(33);
       arr3.add(44);
       arr3.add(11);
       arr3.add(227);
       arr3.add(34);
       arr3.add(45);
       arr3.add(11);


       arr3.retainAll(arr1);
       System.out.println("15.retainAll: "+arr3);
       
       arr3.removeIf(temp->temp%2==0);
       System.out.println("16.removeif: "+arr3);

       System.out.println("17.size: "+arr3.size());

       System.out.println("17.isEmpty: "+arr3.isEmpty());


       System.out.println(arr1);
       SortedSet<Integer> t = arr1.subSet(22, 50);
       System.out.println("18. Subset of the set: " + t);


        boolean containsAll = arr1.containsAll(Arrays.asList(20, 30,22));
        System.out.println("19. Does set contain all elements from collection? " + containsAll);

        arr1.removeAll(Arrays.asList(20, 30,22));
        System.out.println("20. Set after removing elements present in collection: " + arr1);

        // 17. Getting subset with elements less than or equal to a given element
        SortedSet<Integer> headSet = arr1.headSet(40);
        System.out.println("21. Subset with elements less than or equal to 40: " + headSet);

        // 18. Getting subset with elements greater than a given element
        SortedSet<Integer> tailSet = arr1.tailSet(40);
        System.out.println("22. Subset with elements greater than or equal to 40: " + tailSet);

        // 21. Getting the first element less than a given element
        Integer lower = ((TreeSet<Integer>) arr1).lower(40);
        System.out.println("21. First element less than 40: " + lower);

        // 22. Getting the first element greater than a given element
        Integer higher = ((TreeSet<Integer>) arr1).higher(40);
        System.out.println("22. First element greater than 40: " + higher);

        // 23. Removing the first element
        Integer first = ((TreeSet<Integer>) arr1).pollFirst();
        System.out.println("23. Removed first element: " + first);

        // 24. Removing the last element
        Integer last = ((TreeSet<Integer>) arr1).pollLast();
        System.out.println("24. Removed last element: " + last);
       
        Integer[] arr = arr1.toArray(new Integer[0]);
        System.out.println("23. Set converted to array: " + Arrays.toString(arr));

        // 20. Iterating through the set
        System.out.print("24. Set elements: ");
        for (Integer num : arr1) {
            System.out.print(num + " ");
        }
        System.out.println();

         // 25. Checking equality with another set
         SortedSet<Integer> anotherSet = new TreeSet<>(Arrays.asList(30, 40, 50));
         boolean isEqual = arr1.equals(anotherSet);
         System.out.println("25. Is set equal to another set? " + isEqual);
 
         // 26. Getting the subset between two elements
         SortedSet<Integer> subSet = arr1.subSet(20, 40);
         System.out.println("26. Subset between 20 (inclusive) and 40 (inclusive): " + subSet);

         SortedSet<String> s = new TreeSet<>(); 
  
         // Adding Element to SortedSet 
         s.add("Geeks"); 
         s.add("For"); 
         s.add("Geeks"); 
         s.add("Code"); 
         s.add("It"); 
   
         // Returning the set with elements 
         // ranging between the passed value 
         System.out.print("27.Elements between C and G in set is : "
                          + s.subSet("C", "G")); 

        System.out.println();                 
        arr3.removeAll(arr1);
        System.out.println("17.removeAll: "+arr3);
        

    }
}


*/

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//NavigableSet:
/* 
import java.util.Arrays;
import java.util.Iterator;
import java.util.NavigableSet;
import java.util.SortedSet;
import java.util.TreeSet;

public class oops {
    public static void main(String[] args) {
          NavigableSet<Integer> arr1 = new TreeSet<>();
          arr1.add(1);
          arr1.add(11);
          arr1.add(1);
          arr1.add(2);
          arr1.add(3);
          arr1.add(4);
          arr1.add(5);
          arr1.add(6);
          arr1.add(77);
          System.out.println("1.add"+arr1);

          NavigableSet<Integer> arr2 = new TreeSet<>();
          arr2.add(1);
          arr2.add(11);
          arr2.add(1);
          arr2.addAll(arr1);
          System.out.println("2.addall:"+arr2);

        // 2. Getting size
        int size = arr1.size();
        System.out.println("3. Size of the set: " + size);

        // 3. Checking if empty
        boolean isEmpty = arr1.isEmpty();
        System.out.println("4. Is set empty? " + isEmpty);

        // 4. Checking if contains an element
        boolean contains = arr1.contains(20);
        System.out.println("5. Does set contain 20? " + contains);

        int first = arr1.first();
        System.out.println("6. First element of the set: " + first);

        // 6. Getting last element
        int last = arr1.last();
        System.out.println("7. Last element of the set: " + last);

        // 7. Removing element
        boolean removed1 = arr1.remove(20);
        System.out.println("8. Set after removing element 20: " + arr1);

        boolean removed2 = arr1.remove((Integer)2);
        System.out.println("9. Set after removing element 20: " + arr1);

        int floor = arr1.floor(55);
        System.out.println("10. Floor of 55: " + floor);

        // 11. Getting the ceiling of a given element
        int ceiling = arr1.ceiling(55);
        System.out.println("11. Ceiling of 55: " + ceiling);

        SortedSet<Integer> subSet = arr1.subSet(4, false, 77, true);
        System.out.println("12. Subset of elements between 40 and 60 (inclusive): " + subSet);

        Iterator<Integer> descendingIterator = arr1.descendingIterator();
        System.out.print("13. Descending elements of the set: ");
        while (descendingIterator.hasNext()) {
            System.out.print(descendingIterator.next() + " ");
        }
        System.out.println();

        NavigableSet<Integer> descendingSet = arr1.descendingSet();
        System.out.println("14. Descending set: " + descendingSet);


        // 16. Getting the highest element less than the given element
        int lower = arr1.lower(10);
        System.out.println("15. Highest element less than 55: " + lower);

        // 17. Getting the lowest element greater than the given element
        int higher = arr1.higher(10);
        System.out.println("16. Lowest element greater than 55: " + higher);

        // 21. Getting the subset of elements less than a given element
        SortedSet<Integer> headSet = arr1.headSet(5);
        System.out.println("17. Subset of elements less than 55: " + headSet);

        // 22. Getting the subset of elements greater than or equal to a given element
        SortedSet<Integer> tailSet = arr1.tailSet(5,false);
        System.out.println("18. Subset of elements greater than or equal to 55: " + tailSet);

        // 27. Getting the descending iterator for a subset
        Iterator<Integer> descendingSubsetIterator = arr1.headSet(55, true).descendingIterator();
        System.out.print("19. Descending elements of subset less than or equal to 55: ");
        while (descendingSubsetIterator.hasNext()) {
            System.out.print(descendingSubsetIterator.next() + " ");
        }
        System.out.println();


        System.out.println("20.pollFirst(): " + arr1.pollFirst()); 
        System.out.println("21.Navigable Set:  " + arr1); 
  
        System.out.println("22.pollLast(): " + arr1.pollLast()); 
        System.out.println("23.Navigable Set:  " + arr1); 

        // 8. Checking if the set is changed after retaining elements from another collection
        arr1.retainAll(Arrays.asList(50, 60, 70));
        System.out.println("24. Is the set changed after retaining elements from collection? " + arr1);


    }
}
*/
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//treset
/*
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.NavigableSet;
import java.util.Set;
import java.util.SortedSet;
import java.util.Spliterator;
import java.util.TreeSet;
import java.util.stream.Stream;

public class oops {
    public static void main(String[] args) {
        TreeSet<String> arr1 = new TreeSet<String>(); 
        arr1.add("Welcome"); 
        arr1.add("To"); 
        System.out.println("1.add: " + arr1); 

        TreeSet<String> arr2 = new TreeSet<String>(); 
        arr2.add("Ted"); 
        arr2.add("Talks..");
        
        arr1.addAll(arr2);
        System.out.println("2.addall"+arr1);

        TreeSet<Integer> arr3 = new TreeSet<Integer>(); 
        arr3.add(20); 
        arr3.add(30); 
        arr3.add(40); 
        arr3.add(10); 

        System.out.println("3.add: " + arr3); 

        // getting ceiling value for 25 
        // using ceiling() method 
        int value = arr3.ceiling(25); 
        System.out.println("4.Ceiling value for 25: "+ value); 

        TreeSet cloned_set = new TreeSet(); 
        cloned_set = (TreeSet)arr3.clone(); 
        System.out.println("5.The cloned TreeSet: " + cloned_set); 


        TreeSet<Integer> arr4 = new TreeSet<Integer>(); 
        arr4.add(20); 
        arr4.add(30); 
        arr4.add(40); 
        arr4.add(10);
        arr4.add(70); 
        arr4.add(80); 
        arr4.add(90); 

        System.out.println("6.contatins: "+arr3.contains(2));
        System.out.println("7.containsAll"+arr3.containsAll(arr4));

        System.out.print("7.descendingIterator:");
        Iterator<Integer>iterator = arr4.descendingIterator();
        for (Integer integer : arr4) {
            System.out.print(integer+" ");
        }
        System.out.print("8.iterator: ");
        while (iterator.hasNext()) {
            System.out.print(iterator.next()+" ");
        }
        System.out.println();


        System.out.println("9.descendingSet");
         NavigableSet<Integer>treereverse = arr4.descendingSet();
         for (Integer integer : treereverse) {
            System.out.print(integer+" ");
         }
         System.out.println();

         System.out.println("10.The first element is: " + arr4.first()); 

         System.out.println("11.The first element is: " + arr4.last()); 

         System.out.println("12."+arr4.floor(44));

        System.out.println("13."+arr4.ceiling(44));

        // Getting the subset of elements less than a given element
        System.out.println(arr4);
        SortedSet<Integer> headSet = arr4.headSet(30,true);
        System.out.println("14.Subset of elements less than 30: " + headSet);

        // Getting the element higher than a given element
        Integer higher = arr4.higher(30);
        System.out.println("15.Element higher than 30: " + higher);

        // Getting the element lower than a given element
        Integer lower = arr4.lower(30);
        System.out.println("16.Element lower than 30: " + lower);

        // Removing and returning the first element
        Integer first = arr4.pollFirst();
        System.out.println("17.First element removed: " + first);

        // Removing and returning the last element
        Integer last = arr4.pollLast();
        System.out.println("18.Last element removed: " + last);

        // Converting the set to an array
        Object[] array = arr4.toArray();
        System.out.println("19.Array representation of the set: " + Arrays.toString(array));

        // Getting the string representation of the set
        String stringRepresentation = arr4.toString();
        System.out.println("20.String representation of the set: " + stringRepresentation);

        Spliterator<Integer> spliterator = arr4.spliterator();
        System.out.print("21. ");
        spliterator.forEachRemaining(temp->System.out.print(temp+" "));
        System.out.println();

        // Getting a sequential Stream over the elements in the set
        Stream<Integer> stream = arr4.stream();
        stream.forEach(temp->System.out.print(temp+" "));
        System.out.println();

        // Getting the subset of elements within a range
        SortedSet<Integer> subSet = arr4.subSet(20, 40);
        System.out.println("22.Subset of elements between 20 (inclusive) and 40 (exclusive): " + subSet);


        // Removing all elements from the set that are contained in another set
        Set<Integer> clonedSet = new HashSet<>(Arrays.asList(20, 30));
        arr4.removeAll(clonedSet);
        System.out.println("23.Set after removing all elements contained in cloned set: " + arr4);

        // Getting the subset of elements greater than or equal to a given element
        SortedSet<Integer> tailSet = arr4.tailSet(30,true);
        System.out.println("24.Subset of elements greater than or equal to 30: " + tailSet);

        // Removing elements from the set that satisfy a predicate
        arr4.removeIf(element -> element > 40);
        System.out.println("25.Set after removing elements greater than 40: " + arr4);
        
    }
}*/

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//map
/*
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class oops {
    public static void main(String[] args) {
      

        // map1.entrySet();
        // map1.get();
        // map1.values()
        // map1.size(),
        // map1.keySet(),
        // map1.clear();
        // map1.compute(, );
        // map1.computeIfAbsent(, );
        // map1.computeIfPresent(, );
        // map1.containsKey()
        // map1.containsValue();
        // map1.equals()
        // map1.forEach();
        // map1.getClass();
        // map1.getOrDefault(, );
        // map1.hashCode()
        // map1.isEmpty()
        // map1.merge(, , )
        // map1.put(, );
        // map1.putAll();
        // map1.putIfAbsent(,);
        // map1.remove()
        // map1.remove(, );
        // map1.replace(, )
       // map1.replace(, , )
    //    map1.replaceAll();
    //    map1.size();
    //    map1.toString();
    //    map1.values();

    Map<String, Integer> map1 = new HashMap<>();
    map1.put("LOKESH", 3);
    map1.put("ARUN", 6);
    map1.put("apple", 1);
    map1.put("banana", 4);
    map1.put("orange", 30);

    System.out.println("1.entryset"+map1.entrySet());

    Integer a = map1.get("LOKESH");
    System.out.println("2.Value for key 'LOKESH': " + a);



      // 4. Size
    int size = map1.size();
    System.out.println("3.Size: " + size);


    // value
    Collection<Integer> values = map1.values();
    System.out.println("4.Values: " + values);

    // 5. Key Set
    Set<String> keySet = map1.keySet();
    System.out.println("5.Key Set: " + keySet);

    map1.compute("apple", (k, v) -> v == null ? 1 : v + 1);
    System.out.println("6.Map after compute: " + map1);

    // 8. Compute If Absent
    map1.computeIfAbsent("banana", k -> 2);
    System.out.println("7.Map after computeIfAbsent: " + map1);

    // 9. Compute If Present
    map1.computeIfPresent("orange", (k, v) -> v * 2);
    System.out.println("8.Map after computeIfPresent: " + map1);

    // 10. Contains Key
    boolean containsKey = map1.containsKey("apple");
    System.out.println("Contains Key 'apple': " + containsKey);

    // 11. Contains Value
    boolean containsValue = map1.containsValue(2);
    System.out.println("Contains Value '2': " + containsValue);

    // 12. Equals
    Map<String, Integer> map2 = new HashMap<>(map1);
    boolean equals = map1.equals(map2);
    System.out.println("Map1 equals Map2: " + equals);

    // 13. For Each
    map1.forEach((k, v) -> System.out.println(k + ": " + v));

     // 15. Get or Default
     Integer defaultValue = map1.getOrDefault("apple", -1);
     System.out.println("Default Value for 'apple': " + defaultValue);

     // 16. Hash Code
     int hashCode = map1.hashCode();
     System.out.println("Hash Code: " + hashCode);

     // 17. Is Empty
     boolean isEmpty = map1.isEmpty();
     System.out.println("Is Empty: " + isEmpty);

        // 18. Merge
        map1.merge("apple", 100, Integer::sum);
        System.out.println("Map after merge: " + map1);

        // 19. Put
        map1.put("banana", 200);
        System.out.println("Map after put: " + map1);

        // 20. Put All
        Map<String, Integer> map3 = new HashMap<>();
        map3.put("grape", 40);
        map3.put("mango", 50);
        map1.putAll(map3);
        System.out.println("Map after putAll: " + map1);

        // 21. Put If Absent
        map1.putIfAbsent("cherry", 60);
        System.out.println("Map after putIfAbsent: " + map1);

        // 22. Remove
        map1.remove("apple");
        System.out.println("Map after remove: " + map1);

        // 23. Remove with Value
        map1.remove("banana", 200);
        System.out.println("Map after remove with value: " + map1);

        // 24. Replace
        map1.replace("grape", 40);
        System.out.println("Map after replace: " + map1);

        // 25. Replace with New Value
        map1.replace("mango", 50, 500);
        System.out.println("Map after replace with new value: " + map1);

        // 26. Replace All
        map1.replaceAll((k, v) -> v * 10);
        System.out.println("Map after replaceAll: " + map1);

        // 27. Size
        int size2 = map1.size();
        System.out.println("Size: " + size2);

        // 28. To String
        String str = map1.toString();
        System.out.println("To String: " + str);

        // 29. Values
        Collection<Integer> values2 = map1.values();
        System.out.println("Values: " + values2);

    }
}
*/
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//hashmap:
/*
import java.util.*;

public class oops {
    public static void main(String[] args) {
        HashMap<String, Integer> map1 = new HashMap<>();

        // Adding some key-value pairs
        map1.put("apple", 10);
        map1.put("banana", 20);
        map1.put("orange", 30);

        // 1. Entry Set
        Set<Map.Entry<String, Integer>> entrySet = map1.entrySet();
        System.out.println("Entry Set: " + entrySet);

        // 2. Get Value by Key
        Integer value = map1.get("apple");
        System.out.println("Value for key 'apple': " + value);

        // 3. Values
        Collection<Integer> values = map1.values();
        System.out.println("Values: " + values);

        // 4. Size
        int size = map1.size();
        System.out.println("Size: " + size);

        // 5. Key Set
        Set<String> keySet = map1.keySet();
        System.out.println("Key Set: " + keySet);

        // // 6. Clear
        // map1.clear();
        // System.out.println("Map after clearing: " + map1);

        // 7. Compute
        map1.compute("apple", (k, v) -> v == null ? 1 : v + 1);
        System.out.println("Map after compute: " + map1);

        // 8. Compute If Absent
        map1.computeIfAbsent("banana", k -> 2);
        System.out.println("Map after computeIfAbsent: " + map1);

        // 9. Compute If Present
        map1.computeIfPresent("orange", (k, v) -> v * 2);
        System.out.println("Map after computeIfPresent: " + map1);

        // 10. Contains Key
        boolean containsKey = map1.containsKey("apple");
        System.out.println("Contains Key 'apple': " + containsKey);

        // 11. Contains Value
        boolean containsValue = map1.containsValue(2);
        System.out.println("Contains Value '2': " + containsValue);

        // 12. Equals
        HashMap<String, Integer> map2 = new HashMap<>(map1);
        boolean equals = map1.equals(map2);
        System.out.println("Map1 equals Map2: " + equals);

        // 13. For Each
        map1.forEach((k, v) -> System.out.println(k + ": " + v));

        // 14. Get Class
        Class<? extends HashMap> clazz = map1.getClass();
        System.out.println("Class: " + clazz);

        // 15. Get or Default
        Integer defaultValue = map1.getOrDefault("apple", -1);
        System.out.println("Default Value for 'apple': " + defaultValue);

        // 16. Hash Code
        int hashCode = map1.hashCode();
        System.out.println("Hash Code: " + hashCode);

        // 17. Is Empty
        boolean isEmpty = map1.isEmpty();
        System.out.println("Is Empty: " + isEmpty);

        // 18. Merge
        map1.merge("apple", 100, Integer::sum);
        System.out.println("Map after merge: " + map1);

        // 19. Put
        map1.put("banana", 200);
        System.out.println("Map after put: " + map1);

        // 20. Put All
        HashMap<String, Integer> map3 = new HashMap<>();
        map3.put("grape", 40);
        map3.put("mango", 50);
        map1.putAll(map3);
        System.out.println("Map after putAll: " + map1);

        // 21. Put If Absent
        map1.putIfAbsent("cherry", 60);
        System.out.println("Map after putIfAbsent: " + map1);

        // 22. Remove
        map1.remove("apple");
        System.out.println("Map after remove: " + map1);

        // 23. Remove with Value
        map1.remove("banana", 200);
        System.out.println("Map after remove with value: " + map1);

        // 24. Replace
        map1.replace("grape", 40);
        System.out.println("Map after replace: " + map1);

        // 25. Replace with New Value
        map1.replace("mango", 50, 500);
        System.out.println("Map after replace with new value: " + map1);

        // 26. Replace All
        map1.replaceAll((k, v) -> v * 10);
        System.out.println("Map after replaceAll: " + map1);

        // 27. Size
        int size2 = map1.size();
        System.out.println("Size: " + size2);

        // 28. To String
        String str = map1.toString();
        System.out.println("To String: " + str);

        // 29. Values
        Collection<Integer> values2 = map1.values();
        System.out.println("Values: " + values2);

        // Add more methods here...
    }
}
*/
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* 
import java.util.Hashtable;

import java.util.*;

public class oops {
    public static void main(String[] args) {
        Hashtable<String, Integer> map1 = new Hashtable<>();

        // Adding some key-value pairs
        map1.put("apple", 10);
        map1.put("banana", 20);
        map1.put("orange", 30);

        // 1. Entry Set
        Set<Map.Entry<String, Integer>> entrySet = map1.entrySet();
        System.out.println("Entry Set: " + entrySet);

        // 2. Get Value by Key
        Integer value = map1.get("apple");
        System.out.println("Value for key 'apple': " + value);

        // 3. Values
        Collection<Integer> values = map1.values();
        System.out.println("Values: " + values);

        // 4. Size
        int size = map1.size();
        System.out.println("Size: " + size);

        // 5. Key Set
        Set<String> keySet = map1.keySet();
        System.out.println("Key Set: " + keySet);

        // 6. Clear
        // map1.clear();
        // System.out.println("Map after clearing: " + map1);

        // 7. Compute (Not supported in Hashtable)

        // 8. Compute If Absent (Not supported in Hashtable)

        // 9. Compute If Present (Not supported in Hashtable)

        // 10. Contains Key
        boolean containsKey = map1.containsKey("apple");
        System.out.println("Contains Key 'apple': " + containsKey);

        // 11. Contains Value
        boolean containsValue = map1.containsValue(20);
        System.out.println("Contains Value '20': " + containsValue);

        // 12. Equals
        Hashtable<String, Integer> map2 = new Hashtable<>(map1);
        boolean equals = map1.equals(map2);
        System.out.println("Map1 equals Map2: " + equals);

        // 13. For Each (Not supported in Hashtable)

        // 14. Get Class
        Class<? extends Hashtable> clazz = map1.getClass();
        System.out.println("Class: " + clazz);

        // 15. Get or Default
        Integer defaultValue = map1.getOrDefault("apple", -1);
        System.out.println("Default Value for 'apple': " + defaultValue);

        // 16. Hash Code
        int hashCode = map1.hashCode();
        System.out.println("Hash Code: " + hashCode);

        // 17. Is Empty
        boolean isEmpty = map1.isEmpty();
        System.out.println("Is Empty: " + isEmpty);

        // 18. Merge (Not supported in Hashtable)

        // 19. Put
        map1.put("banana", 20);
        System.out.println("Map after put: " + map1);

        // 20. Put All
        Hashtable<String, Integer> map3 = new Hashtable<>();
        map3.put("grape", 40);
        map3.put("mango", 50);
        map1.putAll(map3);
        System.out.println("Map after putAll: " + map1);

        // 21. Put If Absent (Not supported in Hashtable)

        // 22. Remove
        map1.remove("apple");
        System.out.println("Map after remove: " + map1);

        // 23. Remove with Value (Not supported in Hashtable)

        // 24. Replace (Not supported in Hashtable)

        // 25. Replace with New Value (Not supported in Hashtable)

        // 26. Replace All (Not supported in Hashtable)

        // 27. Size
        int size2 = map1.size();
        System.out.println("Size: " + size2);

        // 28. To String
        String str = map1.toString();
        System.out.println("To String: " + str);

        // 29. Values
        Collection<Integer> values2 = map1.values();
        System.out.println("Values: " + values2);

    }
}
*/
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
// LinkedHashMapExample 

/* 
import java.util.*;

public class oops {
    public static void main(String[] args) {
        Hashtable<String, Integer> map1 = new Hashtable<>();

        // Adding some key-value pairs
        map1.put("apple", 10);
        map1.put("banana", 20);
        map1.put("orange", 30);

        // 1. Entry Set
        Set<Map.Entry<String, Integer>> entrySet = map1.entrySet();
        System.out.println("Entry Set: " + entrySet);

        // 2. Get Value by Key
        Integer value = map1.get("apple");
        System.out.println("Value for key 'apple': " + value);

        // 3. Values
        Collection<Integer> values = map1.values();
        System.out.println("Values: " + values);

        // 4. Size
        int size = map1.size();
        System.out.println("Size: " + size);

        // 5. Key Set
        Set<String> keySet = map1.keySet();
        System.out.println("Key Set: " + keySet);

        // // 6. Clear
        // map1.clear();
        // System.out.println("Map after clearing: " + map1);

        // 7. Compute (Not supported in Hashtable)

        // 8. Compute If Absent (Not supported in Hashtable)

        // 9. Compute If Present (Not supported in Hashtable)

        // 10. Contains Key
        boolean containsKey = map1.containsKey("apple");
        System.out.println("Contains Key 'apple': " + containsKey);

        // 11. Contains Value
        boolean containsValue = map1.containsValue(20);
        System.out.println("Contains Value '20': " + containsValue);

        // 12. Equals
        Hashtable<String, Integer> map2 = new Hashtable<>(map1);
        boolean equals = map1.equals(map2);
        System.out.println("Map1 equals Map2: " + equals);

        // 13. For Each (Not supported in Hashtable)

        // 14. Get Class
        Class<? extends Hashtable> clazz = map1.getClass();
        System.out.println("Class: " + clazz);

        // 15. Get or Default
        Integer defaultValue = map1.getOrDefault("apple", -1);
        System.out.println("Default Value for 'apple': " + defaultValue);

        // 16. Hash Code
        int hashCode = map1.hashCode();
        System.out.println("Hash Code: " + hashCode);

        // 17. Is Empty
        boolean isEmpty = map1.isEmpty();
        System.out.println("Is Empty: " + isEmpty);

        // 18. Merge (Not supported in Hashtable)

        // 19. Put
        map1.put("banana", 20);
        System.out.println("Map after put: " + map1);

        // 20. Put All
        Hashtable<String, Integer> map3 = new Hashtable<>();
        map3.put("grape", 40);
        map3.put("mango", 50);
        map1.putAll(map3);
        System.out.println("Map after putAll: " + map1);

        // 21. Put If Absent (Not supported in Hashtable)

        // 22. Remove
        map1.remove("apple");
        System.out.println("Map after remove: " + map1);

        // 23. Remove with Value (Not supported in Hashtable)

        // 24. Replace (Not supported in Hashtable)

        // 25. Replace with New Value (Not supported in Hashtable)

        // 26. Replace All (Not supported in Hashtable)

        // 27. Size
        int size2 = map1.size();
        System.out.println("Size: " + size2);

        // 28. To String
        String str = map1.toString();
        System.out.println("To String: " + str);

        // 29. Values
        Collection<Integer> values2 = map1.values();
        System.out.println("Values: " + values2);

        // Add more methods here...
    }
}
*/





//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//SortedMap Interface in Java


/* 
import java.util.HashMap;
import java.util.SortedMap;
import java.util.TreeMap;

import java.util.*;

public class oops {
    public static void main(String[] args) {
        TreeMap<Integer, Integer> arr = new TreeMap<>();

        // Adding some key-value pairs
        arr.put(1, 10);
        arr.put(2, 20);
        arr.put(3, 30);

        // 1. First Key
        Integer firstKey = arr.firstKey();
        System.out.println("First Key: " + firstKey);

        // 2. Last Key
        Integer lastKey = arr.lastKey();
        System.out.println("Last Key: " + lastKey);

        // 3. Comparator
        Comparator<? super Integer> comparator = arr.comparator();
        System.out.println("Comparator: " + comparator);

        // 4. Head Map
        SortedMap<Integer, Integer> headMap = arr.headMap(2);
        System.out.println("Head Map: " + headMap);

        // 5. Sub Map
        SortedMap<Integer, Integer> subMap = arr.subMap(1, 3);
        System.out.println("Sub Map: " + subMap);

        // 6. Tail Map
        SortedMap<Integer, Integer> tailMap = arr.tailMap(2);
        System.out.println("Tail Map: " + tailMap);

        // 7. Entry Set
        Set<Map.Entry<Integer, Integer>> entrySet = arr.entrySet();
        System.out.println("Entry Set: " + entrySet);

        // 8. Get Value by Key
        Integer value = arr.get(1);
        System.out.println("Value for key '1': " + value);

        // 9. Values
        Collection<Integer> values = arr.values();
        System.out.println("Values: " + values);

        // 10. Size
        int size = arr.size();
        System.out.println("Size: " + size);

        // 11. Key Set
        Set<Integer> keySet = arr.keySet();
        System.out.println("Key Set: " + keySet);

        // 12. Clear
        arr.clear();
        System.out.println("Map after clearing: " + arr);

        // 13. Compute (Not supported in SortedMap)

        // 14. Compute If Absent (Not supported in SortedMap)

        // 15. Compute If Present (Not supported in SortedMap)

        // 16. Contains Key
        boolean containsKey = arr.containsKey(1);
        System.out.println("Contains Key '1': " + containsKey);

        // 17. Contains Value
        boolean containsValue = arr.containsValue(20);
        System.out.println("Contains Value '20': " + containsValue);

        // 18. Equals
        TreeMap<Integer, Integer> arr2 = new TreeMap<>();
        arr2.put(1, 10);
        arr2.put(2, 20);
        arr2.put(3, 30);
        boolean equals = arr.equals(arr2);
        System.out.println("Map equals Map2: " + equals);

        // 19. For Each (Not supported in SortedMap)

        // 20. Get Class
        Class<? extends TreeMap> clazz = arr.getClass();
        System.out.println("Class: " + clazz);

        // 21. Get or Default
        Integer defaultValue = arr.getOrDefault(1, -1);
        System.out.println("Default Value for '1': " + defaultValue);

        // 22. Hash Code
        int hashCode = arr.hashCode();
        System.out.println("Hash Code: " + hashCode);

        // 23. Is Empty
        boolean isEmpty = arr.isEmpty();
        System.out.println("Is Empty: " + isEmpty);

        // 24. Merge (Not supported in SortedMap)

        // 25. Put
        arr.put(1, 10);
        System.out.println("Map after put: " + arr);

        // 26. Put All
        TreeMap<Integer, Integer> arr3 = new TreeMap<>();
        arr3.put(4, 40);
        arr3.put(5, 50);
        arr.putAll(arr3);
        System.out.println("Map after putAll: " + arr);

        // 27. Put If Absent (Not supported in SortedMap)

        // 28. Remove
        arr.remove(1);
        System.out.println("Map after remove: " + arr);

        // 29. Remove with Value (Not supported in SortedMap)

        // 30. Replace (Not supported in SortedMap)

        // 31. Replace with New Value (Not supported in SortedMap)

        // 32. Replace All (Not supported in SortedMap)

        // 33. Size
        int size2 = arr.size();
        System.out.println("Size: " + size2);

        // 34. To String
        String str = arr.toString();
        System.out.println("To String: " + str);

        // 35. Values
        Collection<Integer> values2 = arr.values();
        System.out.println("Values: " + values2);

        // Add more methods here...
    }
}
*/


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/*

import java.util.*;

public class oops {
    public static void main(String[] args) {
        TreeMap<String, Integer> treeMap = new TreeMap<>();

        // Adding some key-value pairs
        treeMap.put("apple", 10);
        treeMap.put("banana", 20);
        treeMap.put("orange", 30);

        // 1. First Key
        String firstKey = treeMap.firstKey();
        System.out.println("First Key: " + firstKey);

        // 2. Last Key
        String lastKey = treeMap.lastKey();
        System.out.println("Last Key: " + lastKey);

        // 3. Comparator
        Comparator<? super String> comparator = treeMap.comparator();
        System.out.println("Comparator: " + comparator);

        // 4. Head Map
        SortedMap<String, Integer> headMap = treeMap.headMap("banana");
        System.out.println("Head Map: " + headMap);

        // 5. Sub Map
        SortedMap<String, Integer> subMap = treeMap.subMap("apple", "orange");
        System.out.println("Sub Map: " + subMap);

        // 6. Tail Map
        SortedMap<String, Integer> tailMap = treeMap.tailMap("banana");
        System.out.println("Tail Map: " + tailMap);

        // 7. Entry Set
        Set<Map.Entry<String, Integer>> entrySet = treeMap.entrySet();
        System.out.println("Entry Set: " + entrySet);

        // 8. Get Value by Key
        Integer value = treeMap.get("apple");
        System.out.println("Value for key 'apple': " + value);

        // 9. Values
        Collection<Integer> values = treeMap.values();
        System.out.println("Values: " + values);

        // 10. Size
        int size = treeMap.size();
        System.out.println("Size: " + size);

        // 11. Key Set
        Set<String> keySet = treeMap.keySet();
        System.out.println("Key Set: " + keySet);

        // 12. Clear
        treeMap.clear();
        System.out.println("Map after clearing: " + treeMap);

        // 13. Compute (Not supported in SortedMap)

        // 14. Compute If Absent (Not supported in SortedMap)

        // 15. Compute If Present (Not supported in SortedMap)

        // 16. Contains Key
        boolean containsKey = treeMap.containsKey("apple");
        System.out.println("Contains Key 'apple': " + containsKey);

        // 17. Contains Value
        boolean containsValue = treeMap.containsValue(20);
        System.out.println("Contains Value '20': " + containsValue);

        // 18. Equals
        TreeMap<String, Integer> treeMap2 = new TreeMap<>();
        treeMap2.put("apple", 10);
        treeMap2.put("banana", 20);
        treeMap2.put("orange", 30);
        boolean equals = treeMap.equals(treeMap2);
        System.out.println("Map equals Map2: " + equals);

        // 19. For Each (Not supported in SortedMap)

        // 20. Get Class
        Class<? extends TreeMap> clazz = treeMap.getClass();
        System.out.println("Class: " + clazz);

        // 21. Get or Default
        Integer defaultValue = treeMap.getOrDefault("apple", -1);
        System.out.println("Default Value for 'apple': " + defaultValue);

        // 22. Hash Code
        int hashCode = treeMap.hashCode();
        System.out.println("Hash Code: " + hashCode);

        // 23. Is Empty
        boolean isEmpty = treeMap.isEmpty();
        System.out.println("Is Empty: " + isEmpty);

        // 24. Merge (Not supported in SortedMap)

        // 25. Put
        treeMap.put("apple", 10);
        System.out.println("Map after put: " + treeMap);

        // 26. Put All
        TreeMap<String, Integer> treeMap3 = new TreeMap<>();
        treeMap3.put("grape", 40);
        treeMap3.put("mango", 50);
        treeMap.putAll(treeMap3);
        System.out.println("Map after putAll: " + treeMap);

        // 27. Put If Absent (Not supported in SortedMap)

        // 28. Remove
        treeMap.remove("apple");
        System.out.println("Map after remove: " + treeMap);

        // 29. Remove with Value (Not supported in SortedMap)

        // 30. Replace (Not supported in SortedMap)

        // 31. Replace with New Value (Not supported in SortedMap)

        // 32. Replace All (Not supported in SortedMap)

        // 33. Size
        int size2 = treeMap.size();
        System.out.println("Size: " + size2);

        // 34. To String
        String str = treeMap.toString();
        System.out.println("To String: " + str);

        // 35. Values
        Collection<Integer> values2 = treeMap.values();
        System.out.println("Values: " + values2);

        // Add more methods here...
    }
}
*/
// hashmap and hashtable:seaching elements in o(1)
/* 
import java.util.HashMap;
import java.util.Scanner;
import java.util.Set;

public class oops {
    
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        HashMap <Integer ,Integer> arr = new HashMap<>();
        for(int i=0;i<6;i++)
        {
            int num=scan.nextInt();
            if(arr.containsKey(num))
            {
                arr.put(num,arr.get(num)+1);
            }
            else
            {
                arr.put(num,arr.getOrDefault(num,1));
            }
        }
        System.out.println(arr.get(1));
        System.out.println(arr.get(11));

        System.out.println("method 1");
        Set<HashMap.Entry<Integer,Integer>> arr2 = arr.entrySet();
        for(HashMap.Entry<Integer,Integer> i:arr2)
        {
            System.out.println(i.getKey()+" "+i.getValue()+" "+i.getClass());
        }

        System.out.println("method 2");
        Set<Integer> arr3 = arr.keySet();
        for(Integer i:arr3)
        {
            System.out.println(i+" "+arr.get(i));
        }
        
    }
    
}
*/

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//mulit-threading: is two  type process and thread
/*
     concurrency:
            .Computer users take it for granted that their systems can do more than one thing or process at a time.
            .They assume that they can continue to work in a word processor, while other applications download files, manage the print queue, and stream audio.
            .Software that can do such things is known as concurrent software.
            .The Java platform is designed from the ground up to support concurrent programming, with basic concurrency support in the Java programming language and the Java class libraries. Since version 5.0, the Java platform has also included high-level concurrency APIs. 
             This lesson introduces the platform's basic concurrency support and summarizes some of the high-level APIs in the java.util.concurrent packages.
            .APIs->collection n no.of classes
            .concurrent programming there are two basic unit exuction like processes and threads

    multitasking:
        muliple processes
            doing many tasks at smae time
        single processes:
            jvm is a single process and concurrency
            doing many things at same time inside a single processes
        
     processes and thread:
            In concurrent programming, there are two basic units of execution: processes and threads. In the Java programming language, concurrent programming is mostly concerned with threads. However, processes are also important.
    
     processes:
          A process has a self-contained execution environment. A process generally has a complete, private set of basic run-time resources; in particular, each process has its own memory space. 

     thread
        .java is multi threading lang
        .Threads are sometimes called lightweight processes. Both processes and threads provide an execution environment, but creating a new thread requires fewer resources than creating a new process
        .Threads exist within a process — every process has at least one. Threads share the process's resources, including memory and open files. This makes for efficient, but potentially problematic, communication.
        .Multithreaded execution is an essential feature of the Java platform. Every application has at least one thread — or several, if you count "system" threads that do things like memory management and signal handling. But from the application programmer's point of view, you start with just one thread, called the main thread. This thread has the ability to create additional threads      
        .java program excution in a strack first in first out
        .Each thread is associated with an instance of the class Thread.
        .usage of thread video gaming,web servers.
         
 */
/*multithread is implent by two way  1.extending thread class 2. implementing interface
thead is predefined class 
    thread methods
    1.run();
    2.start();

class class1 extends Thread
{
    @Override
    public void run()
    {
        for(int i=0;i<4;i++)
        {
            System.out.println("method1 " +i);
            try
            {
                Thread.sleep(2000); //delay 
            }
            catch(Exception e)
            {
                System.out.println(e.getMessage());
            }
        }
    }
}
class class2 extends Thread
{
     @Override
    public void run()
    {   
        for(int i=0;i<4;i++)
        {
            System.out.println("method2"); 
        }
    }
}
public  class oops {
    public static void main(String[] args) throws Exception {// main thread
        class1 obj1 = new class1();
        class2 obj2 = new class2();
        
        obj1.start();
        obj2.start();
        obj2.join();
        System.out.println("----------");
    }
}
*/
/*
   multitasking 
    multitasking allows several activities to occur concurrently on the computer
    1.process-based multitasking
        allows process to run concurrently on the computer
        eg:running the ms paint while also working with the word processor or application
    2.thread-based multitasking
        allows parts of the same program to run concurrently on the coputer
        eg:ms word is printing and formatting text at the same time

    threads and process:


 */
/*
 public class oops {

    public static void main(String[] args) {
        System.out.println("--multithreading---");

        thread obj1 = new thread();
        obj1.run();
        System.out.println("------");
        obj1.run();
    }
 }
 class thread extends Thread
 {
    public void run()
    {
        String str="BYE";
        for(int i=0;i<3;i++)
        {
            System.out.println(str);
            str+=str;
        }
    } 
 }*/
 /*
    multithreading:
        eg: cake preparasation
            .every single cake making process is thread 
            .making cake in n no.of cake making is parallel processing
            .parallel processing is delivery the n no.of cake in faster way
            .in a computer core is thread
            .parallel processing example is if have working in word and also listing a music in spotify then its a parallel processing. word and spotify having separate having thread

  */
  //1.thread interface:(Multi_inhertence is not supported)
  /* 
  class Cake extends Thread
  {
    @Override
    public void run() // run should be a void because of Thread is class run is method in thread is defined as a void method in run so we can't change
    {
        try
        {
            System.out.println("------lorem----- "+Cake.currentThread().getId());
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
        try
        {
            System.out.println("------mixing----- "+Cake.currentThread().getId());
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
        try
        {
            System.out.println("------baking----- "+Cake.currentThread().getId());
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
  }
  public class oops {

    public static void main(String[] args) {
       
        System.out.println("using run()->serial it's not mutlithread");
        Cake obj1 = new Cake();
        obj1.run();

        System.out.println("-----------------------------");

        System.out.println("using start()->parallel prossing");
        for(int i=0;i<3;i++)
        {
            Cake obj2 = new Cake();
            obj2.start();
        }
    }
  } */
  // runnable  interface:(Multi_inhertence is supported)
/*   
class Cake implements Runnable
  {
     public void run()
     {
        System.out.println("------lorem1----- "+Thread.currentThread().getId());
        System.out.println("------lorem2----- "+Thread.currentThread().getId());
        System.out.println("------lorem3----- "+Thread.currentThread().getId());
     }
  }
      
  public class oops {
    public static void main(String[] args) {
        Cake cake = new Cake();
        Thread thread = new Thread(cake); 
        thread.start();
    } 
  }
  */
  //Synchronized Keyword in Java ||ex making cake counter for two teams
/* 
class CakeCounter
  {
    int count=0;
    public synchronized void incre()
    {
        count++;
    }
  }
  class Team implements Runnable
  {
    CakeCounter counter;

    Team(CakeCounter counter)
    {
        this.counter=counter;
    }
    public void run()
    {
        for(int i=0;i<1000;i++)
        {
            counter.incre();
        }
    }
  }
  public class oops {
    public static void main(String[] args) {
        
        CakeCounter counter = new CakeCounter();

        Thread team1 = new  Thread(new Team(counter));
        Thread team2 = new  Thread(new Team(counter));
        team1.start();
        team2.start();
        try
        {
            team1.join();;
            team2.join();
            System.out.println(counter.count);
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }

    }
  }
  */
  // method in thread
  /* 
public class oops extends Thread {
  public static void main(String[] args) {

        for(int i=0;i<6;i++)
        {
            if(i==1)
            {
                try
                {
                    oops.sleep(1000);
                    System.out.println("HELLO! 1");
                }
                catch (Exception e)
                {
                    System.out.println(e.getMessage());
                }
            }
            else
            {
                System.out.println("Hello! "+i);
                

            }
            if(i==2)
            {
                System.out.println(10/0);System.out.println(10/0); 
            }
        }   
   }
}

class setname_for_getId extends Thread
{
  public void run()
  {
    try
    {
      System.out.println("hii "+setname_for_getId.currentThread().getName());
      System.out.println("hii "+setname_for_getId.currentThread().getName());
      System.out.println("hii "+setname_for_getId.currentThread().getName());

    }
    catch(Exception e)
    {
        System.out.println(e.getMessage());
    }
  }
}
public class oops {

    public static void main(String[] args) throws Exception  {
        setname_for_getId obj1 = new setname_for_getId();
        obj1.setName("SUMA "+1);
        obj1.start();

        obj1.join();
        System.out.println("isAlive "+obj1.isAlive());

        //MIN_PRIORITY-1
        //NORM_PRIORITY-5
        //MAX_PRIORITY-10
        obj1.setPriority(Thread.MAX_PRIORITY);
        System.out.println("MAX_PRIORITY "+obj1.getPriority());
    }
}*/

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
























/* 


     int a=10;
     int b=8;

     System.out.println(b<<2);



             String d="23";
        String a="12";
        Integer x=new Integer(d);
        Integer y=new Integer(a);
        int c=x+y;
        System.out.print(c);

 */

 /*
  import java.io.*;
class FileBufferedReadWrite{
    static void filewrite() throws IOException
    {
        File f=new File("sdk1.txt");
		boolean b=f.createNewFile();
		System.out.println(b);
		FileWriter fw=new FileWriter(f);
			fw.write("Hi Its sdk");
			fw.close();
    }
    static void fileread() throws IOException
    {
        File f=new File("sdk1.txt");
		FileReader fr=new FileReader(f);
		char arr[]=new char[100];
		fr.read(arr);
		System.out.println(arr);
    }
    static void bufferwrite() throws IOException
    {
        FileWriter fr=new FileWriter("dk.txt");
		BufferedWriter br=new BufferedWriter(fr);
		br.write("Deepak");
		br.close();
    }
     static void bufferread() throws IOException
    {
        FileReader fr=new FileReader("dk.txt");
		BufferedReader br=new BufferedReader(fr);
	    int i=0;
	    while((i=br.read())!=-1)
	    {
	        System.out.print((char)i);
	    }
	    br.close();
    }
	public static void main(String args[]) throws IOException
	{ 
	   filewrite();
	   fileread();
	   bufferwrite();
	   bufferread();
	}
}
  */


/*


    time compxity
    time complexity != time taken
*/
 

  /*

User


     byte b=10;
     byte c=20;
     System.out.println(b!=c);

     Arrays.equals(a,b)

     		Object c=a.remove(5);              // remove
		System.out.println(a);
		
		a.remove("Deepak");                // remove(Object o)
		System.out.println(a);


        Object[] arr=a.toArray();       // toArray
		System.out.println("Elements in separate order ");
		for(int i=0;i<k;i++)
		{
		    System.out.println(arr[i]);
		}



import java.util.*;
public class ArrDelete
{
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.print("Enter Array size :");
		int s=sc.nextInt();
		int a[]=new int [s];
		System.out.print("Enter Array elements :");
		for(int i=0;i<s;i++)
		{
		    a[i]=sc.nextInt();
		}
		System.out.print("Enter the location :");
		int n=sc.nextInt();
		for(int i=n;i<s-1;i++)
		{
		    a[i]=a[i+1];
		}
		s--;
		for(int i=0;i<s;i++)
		{
		    System.out.println(a[i]);
		}
	}
}
*/

//multitasking
/*
    multitasking allows several activities to occur concurently on the computer
        process based multitasking
        thread based multitasking
        
 */
/*
    thread creation:
    1.implementing the java.lang.runnable interface
    2.extending the java.lang.thread class
    
 */

// import java.util.ArrayList;
// import java.util.Scanner;

// public class oops {
//     public static void main(String[] args) {
//         Scanner scan = new Scanner(System.in);
//         ArrayList<Integer> arr = new ArrayList<Integer>();
     
//     }
// }


/*---------------------------------------------------------------*/
/*
    .java regulat expressions is create by the structure of perl programing lang
    .java.util.rege -API -->package
    .class:
        Matcher
        pattern
        patternSyntaxException
    application:
        chatbot
        form
 */

// import java.util.InputMismatchException;
// import java.util.Scanner;
// import java.util.StringTokenizer;
// import java.util.regex.Matcher;
// import java.util.regex.Pattern;
/*
public class oops
{
    public static void main(String[] args) {
        String str="time is gold for engineering gold life";
        Pattern p = Pattern.compile("gol");
        Matcher m = p.matcher(str);
        int ctr=0;
        while(m.find())
        {
            ctr++;
            System.out.println(m.group()+" "+m.start()+" "+m.end());
        }
        System.out.println("count "+ctr) ; 
    }
}

public class oops
{
    public static void main(String[] args) {
        String str1="time is gold for rngineering gold life";
        Pattern p1 = Pattern.compile("^tim");
        Matcher m1 = p1.matcher(str1);
        while(m1.find())
        {
            System.out.println("YES time is starting word in sentences");
        }


        String str2="time is gold for engineering gold life";
        Pattern p2 = Pattern.compile("life$");
        Matcher m2 = p2.matcher(str2);
        while(m2.find())
        {
            System.out.println("YES life is ending word in sentences");
        }

        String str3="time is gold for engineering gold life";
        Pattern p3 = Pattern.compile("t|e|r");
        Matcher m3 = p3.matcher(str3);
        while(m3.find())
        {
            System.out.println(m3.group()+" "+m3.start());
        }
       
       
    }
}

//1.[abc]=a|b|c
//2.[^abc] expect a b c 
public class oops
{
    public static void main(String[] args) {

        System.out.println("[abc]");

        String str1="abcdddertwetgthbh";
        Pattern p1 = Pattern.compile("[abc]");
        Matcher m1 = p1.matcher(str1);
        while(m1.find())
        {
            System.out.print(m1.group()+" "+m1.start()+"- ");
        }
        System.out.println();

        System.out.println("[^abc]");
        String str2="abcdddertwetgthbh";
        Pattern p2 = Pattern.compile("[^abc]");
        Matcher m2 = p2.matcher(str2);
        while(m2.find())
        {
            System.out.print(m2.group()+" "+m2.start()+"- ");
        }


        System.out.println();

        System.out.println("[e-sE-S0-9$%^@]");
        String str3="abcdddertwetgthbhE@S12";
        Pattern p3 = Pattern.compile("[e-sE-S0-9$%^@]");
        Matcher m3 = p3.matcher(str3);
        while(m3.find())
        {
            System.out.print(m3.group()+" "+m3.start()+"- ");
        }

        System.out.println();

        System.out.println("[^e-sE-S0-9]");
        String str4="abcdddertwetgthbhE@S12!&";
        Pattern p4 = Pattern.compile("[^e-sE-S0-9]");
        Matcher m4 = p4.matcher(str4);
        while(m4.find())
        {
            System.out.print(m4.group()+" "+m4.start()+"- ");
        }

    }
}
*/
//predefined class
/* 
public class oops {
    public static void main(String[] args) {

        System.out.println("\\s space only");
        String str1="time is  gold";
        Pattern p1= Pattern.compile("\\s");
        Matcher m1 = p1.matcher(str1);
        while(m1.find())
        {
            System.out.print(m1.group()+" "+m1.start()+" - ");
        }

        System.out.println();

        System.out.println("\\s space without space");
        String str2="time is  gold";
        Pattern p2= Pattern.compile("\\S");
        Matcher m2 = p2.matcher(str2);
        while(m2.find())
        {
            System.out.print(m2.group()+" "+m2.start()+" - ");
        }

        System.out.println();

        System.out.println("\\d only numbers");
        String str3="time is  gold 143";
        Pattern p3= Pattern.compile("\\d");
        Matcher m3 = p3.matcher(str3);
        while(m3.find())
        {
            System.out.print(m3.group()+" "+m3.start()+" - ");
        }

        System.out.println();

        System.out.println("\\D without numbers");
        String str4="time is  gold 143";
        Pattern p4= Pattern.compile("\\D");
        Matcher m4 = p4.matcher(str4);
        while(m4.find())
        {
            System.out.print(m4.group()+" "+m4.start()+" - ");
        }

        System.out.println();

        System.out.println("\\w without special character");
        String str5="time is  gold 143n!!#@";
        Pattern p5= Pattern.compile("\\w");
        Matcher m5 = p5.matcher(str5);
        while(m5.find())
        {
            System.out.print(m5.group()+" "+m5.start()+" - ");
        }

        System.out.println();

        System.out.println("\\W  only special character");
        String str6="time is  gold 143n!!#@";
        Pattern p6= Pattern.compile("\\W");
        Matcher m6 = p6.matcher(str6);
        while(m6.find())
        {
            System.out.print(m6.group()+" "+m6.start()+" - ");
        }

        System.out.println();

        System.out.println("\\b bounre words");
        String str7="gold time is  goldgold 143n gold !!#@";
        Pattern p7= Pattern.compile("\\bgold");
        Matcher m7 = p7.matcher(str7);
        while(m7.find())
        {
            System.out.print(m7.group()+" "+m7.start()+" - ");
        }


        System.out.println();

        System.out.println("\\b boundary words");
        String str8="gold time is  goldgold 143n gold !!#@";
        Pattern p8= Pattern.compile("\\bgold\\b");
        Matcher m8 = p8.matcher(str8);
        while(m8.find())
        {
            System.out.print(m8.group()+" "+m8.start()+" - ");
        }

        System.out.println();

        System.out.println("\\B boundary without ending words");
        String str9="gold time is  goldtamil 143n gold !!#@";
        Pattern p9= Pattern.compile("gold\\B");
        Matcher m9 = p9.matcher(str9);
        while(m9.find())
        {
            System.out.print(m9.group()+" "+m9.start()+" - ");
        }
        System.out.println();

        // System.out.println("\\G continues words");
        // String str10="gold timetimes timetime is  goldtamil 143n gold !!#@";
        // Pattern p10= Pattern.compile("\\Gtime");
        // Matcher m10 = p10.matcher(str10);
        // while(m10.find())
        // {
        //     System.out.print(m10.group()+" "+m10.start()+" - ");
        // }


        System.out.println();

        System.out.println(". all character including special charcter");
        String str11="gold time is  goldtamil 143n gold !!#@";
        Pattern p11= Pattern.compile(".");
        Matcher m11 = p11.matcher(str11);
        while(m11.find())
        {
            System.out.print(m11.group()+" "+m11.start()+" - ");
        }
        System.out.println();


    }
}

//quantifiers
public class oops {
    public static void main(String[] args) {
        String str1="abbbbbaaacccc";
        Pattern p1 = Pattern.compile("a");
        Matcher m1 = p1.matcher(str1);
        while(m1.find())
        {
            System.out.print(m1.group()+"-"+m1.start()+" ");
        }

        System.out.println();

        System.out.println("+ at one match");
        String str2="abbbbbaaaccaabcc";
        Pattern p2 = Pattern.compile("ab+");
        Matcher m2 = p2.matcher(str2);
        while(m2.find())
        {
            System.out.print(m2.group()+"-"+m2.start()+" ");
        }

        System.out.println();

        System.out.println("* any number of match including zero number");
        String str3="abbbbbaaaccaabcc";
        Pattern p3 = Pattern.compile("ab*");
        Matcher m3 = p3.matcher(str3);
        while(m3.find())
        {
            System.out.print(m3.group()+"-"+m3.start()+" ");
        }

        
        System.out.println();

        System.out.println("? at most one");
        String str4="abbbbbaaaccaabcc";
        Pattern p4 = Pattern.compile("ab?");
        Matcher m4 = p4.matcher(str4);
        while(m4.find())
        {
            System.out.print(m4.group()+"-"+m4.start()+" ");
        }


        System.out.println();

        System.out.println("? at most one");
        String str5="abbbbbaaaccaabcc";
        Pattern p5 = Pattern.compile("a{2,3}");
        Matcher m5 = p5.matcher(str5);
        while(m5.find())
        {
            System.out.print(m5.group()+"-"+m5.start()+" ");
        }
    }
}

//split
public class oops {
    public static void main(String[] args) {
        String str1="HERG RG ERGE ZOHO";
        Pattern p1 = Pattern.compile("\\s");
        String str_arr[]=p1.split(str1);
        for(String str:str_arr)
        {
            System.out.print(str+"-");
        }
    }
}

// stringTokenizer class
public class oops {
    public static void main(String[] args) {
        String str1 ="https:\\www.zoho.com";
        StringTokenizer str_arr1 = new StringTokenizer(str1,".",true);
        while(str_arr1.hasMoreTokens())
        {
            System.out.println(str_arr1.nextToken()+" ");
        }

        System.out.println();
        String str_arr2[]=str1.split("\\:|\\\\|\\.");
        for(String temp:str_arr2)
        {
            System.out.println(temp+" ");
        }
    }
}
*/
/*---------------------------------------------------------------*/
// exception handling by runtime->whenever exception occur,the corresponding excepion object will be thrown
// error -> is comple time occur because of stack is overflow
// exceptin -> is runtime occur 
/*
public class oops {
    public static void main(String[] args) 
    {
        Scanner scan = new Scanner(System.in);
        try
        {
            System.out.println(5/0);
        }
        catch(ArithmeticException e)
        {
            System.out.println(e.getMessage()+" "+e.getClass());
        }
        try
        {
            int a=scan.nextInt();
            System.out.println(a);
        }
        catch(InputMismatchException IM)
        {
            System.out.println(IM.getMessage()+" "+IM.getClass());
        }
        try
        {
            int a=scan.nextInt();
            System.out.println(a);
        }
        catch(Exception IM)
        {
            System.out.println(IM.getMessage()+" "+IM.getClass());
        }
    }
}
*/
//-------------------------------------------java 8----------------------------------------------------------------------------------------
/*
    - Java 8 Lambda Expressions
    - Java 8 Functional Interfaces
    - Java 8 Method References
    - Java 8 Stream API
    - Java 8 Optional Class
    - Java 8 Collectors Class
    - Java 8 Static and Default Methods in Interface
 */



/* - Java 8 Lambda Expressions
lambda expressions were introduced in java 8
lambda expressons is an anonymous function it'a function without name and does not belongs to any class
lambda expression is mainly used to implement functional interface
   .funcitonal interface were introduced in java 8 
   .an interface that contains exactly one abstract mehod is known as a functional interface
   .functional interface can hava any number of defalut,static methods but can contain only one abstract methods
lambda vs method
    method is always belongs to class or object in java where as lambda does not belongs to any class or object
    -as lambda is an anoymous function so no need to have a name 
    -parameter list
    -body-this is main part of the function
    -no return type in lambda function
    -int sum = (int a,int b)-> (a+b);
                parameter       body
                 list
    -lambda input parameters()_arrow->_lambda body{}
*/

// without parameters
/* 
//polymorshim
interface shapes
{
    void draw();
}
// class Rectangle implements shapes
// {
//     public void draw()
//     {
//         System.out.println("Rectangle class: draw() method");
//     }
// }
// class circle implements shapes
// {
//     public void draw()
//     {
//         System.out.println("circle class: draw() method");
//     }
// }
// class square implements shapes
// {
//     public void draw()
//     {
//         System.out.println("square class: draw() method");
//     }
// }
public class oops {
    public static void main(String[] args) {
         
        shapes Rectangle = () -> {System.out.println("Rectangle class: draw() method");};
        shapes Circle = () -> System.out.println("circle class: draw() method");
        shapes square = () -> System.out.println("square class: draw() method");
        Rectangle.draw();
        Circle.draw();
        square.draw();

        print(Rectangle);
        print(square);
        print(Circle);

        print(() -> System.out.println("Rectangle class: draw() method"));
        print(() -> System.out.println("circle class: draw() method"));
        print(() -> System.out.println("square class: draw() method"));

    }
    private static void print(shapes s)
    {
        s.draw();
    }
}

// with parameters
interface sum
{
    int add(int a,int b);
}
// class additional implements sum
// {
//     @Override
//     public int add(int a,int b)
//     {
//         return a+b;
//     }
// }
public class oops {
    public static void main(String[] args) {
        sum ADD1 = (a,b)->a+b;
        System.out.println(ADD1.add(10, 100));

        sum ADD2 = (int a,int b)->a+b;
        System.out.println(ADD2.add(10, 100));
    }
}


//runnable lamdaexpression:
 class threadclass implements Runnable
 {
    public void run()
    {
        System.out.println("run method.......");
    }
 }
 public class oops {
    public static void main(String[] args) {
        Thread thread = new Thread(new threadclass());
        thread.start();

        Runnable runnable = ()-> System.out.println("run method usinf labmda....");

        Thread thread2 = new Thread(runnable);
        thread2.start(); 
    }
 }
 */
//-------------------------------------------java networking----------------------------------------------------------------------------------------
/*
    HOSTS:
        .hosts are any device which sends or receive traffic
        .anything that sends or receive traffic over a network
        ex:computer,laptop,phone,printers,servers

    hosts are any device which sends or receive traffic
          like
           1.client and severs
                client initiate request 
           2.servers 
                server is respond the client request
                server are simply computers with software installed which responds to specific requests
               
            [ ]   --------->      [ ]
             ^                     ^
           client(user)          server(www.zoho.com)

    IP ADDRESS:
        An IP Address is the identity of each host
//-------------------------------------------------------------------------
                     pokets
            [ ]   -------------->     [ ]
             ^                         ^
           client(user)           server(www.zoho.com)
            100.0.0.0                  10.0.0.0
//-------------------------------------------------------------------------

            [ ]   -------------->    [ ]
             ^    <--------------     ^    
                                      
           client(user)           server(www.zoho.com)
            100.0.0.0                  10.0.0.0

            --------------> src 100.0.0.0 & dst 10.0.0.0 (pockets)
            <-------------- src 10.0.0.0 & dst 100.0.0.0 (pockets)
        
        .ip addresses are 32 bits
        .bit is 1 or 0
        .represented as four octets
        .each octet can be 0-255

         ---- ---- . ---- ----- . ---- ---- . ---- -----
          [255-0]      [255-0]     [255-0]      [255-0]
//------------------------------------------------------------------------- 

// event driven program: event is user and ui interaction is event.
        awt -library file(abstract window toolkit) for gui
        compent-bottton,txt box,label,text field
 */

/**
 * oops
 */
public class oops {

    public static void main(String[] args) {
     //System.out.println("hh");
    }
}




--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




//print 1 to 5
/* 
public class recursion {
    public static void main(String[] args) {
        print(1,5);
    }
    static void print(int N,int M)
    {
        System.out.print(N+" "); 
        if(N==M)
        {
            return;
        }
        print(N+1,M);
    }
}
*/

//  fibo series 
/* 
public class recursion {
    public static void main(String[] args) {
        
        System.out.println(fibo(4));

    }
    static int fibo(int N)
    {
        if(N==0||N==1)
        {
            return N;
        }
        else
        {
            return (fibo(N-1)+fibo(N-2));
        }
    }
}
*/
//binary search 
/* 
public class recursion {

    public static void main(String[] args) {
        int arr[]={1,2,3,4,5,6,7},target=6;
        System.out.println(BS(arr,target,0,arr.length-1));
    }
    static int BS(int arr[],int target,int s,int e)
    {
        if(s>e)
        {
            return -1;
        }
        int m=s+(e-s)/2;
        if(arr[m]==target)
        {
            return m;
        }
        else if(target<arr[m])
        {
            return BS(arr, target, s, m-1);
        }
        else
        {
            return BS(arr, target, m+1, e);
        }

    }
}
*/

// arr is sorted or not
/* 
public class recursion {

    public static void main(String[] args) {
        int arr[]={1,2,3,4};
        System.out.println(suma(arr, arr.length-1,0));
    }
    static boolean suma(int arr[],int N,int S)
    {
        if(S==N)
        {
            return true;
        }
        else if(arr[S]>arr[S+1])
        {
            return false;
        }
        else
        {
            return suma(arr, N, S+1);  
        }
    }
}
*/
// linear sereach:
/* 
public class recursion {

    public static void main(String[] args) {
        int arr[]={13,4,5,2,1,3,4,33},target=2;
        System.out.print(LS(arr,target,0));
    }
    static boolean LS(int arr[],int target,int s)
    {
        if(s==arr.length)
        {
            return false;
        }
        // return arr[s]==target || LS(arr,target,s+1); in single statement for replace the below the else if and else base condition
        else if(arr[s]==target)
        {
            return true;
        }
        else
        {
            return LS(arr, target, s+1);
        }
    }
} 
*/

//min and max
/* 
import java.util.Scanner;
public class recursion {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int num=scan.nextInt(),arr[]=new int[num];
        for(int i=0;i<num;i++)
        {
            arr[i]=scan.nextInt();
        }

        System.out.println(max(arr,0,Integer.MIN_VALUE));
        System.out.println(min(arr,0,Integer.MAX_VALUE));
    }
    static int max(int arr[],int s,int maxvalue)
    {
        if(s==arr.length)
        {
            return maxvalue;
        }
        if(maxvalue<arr[s]){maxvalue=arr[s];}
        return max(arr, s+1, maxvalue);
    }
    static int min(int arr[],int s,int minvalue)
    {
        if(s==arr.length)
        {
            return minvalue;
        }
        if(minvalue>arr[s]){minvalue=arr[s];}
        return min(arr, s+1, minvalue);
    }
}
*/


// even number will  be 0 :: odd number wiil be 0

// method 1:
/* 
import java.util.ArrayList;
import java.util.Scanner;

public class recursion {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int num=scan.nextInt(),arr[]=new int[num];
        for(int i=0;i<num;i++)
        {
            arr[i]=scan.nextInt();
        }
        ArrayList <Integer> list=new ArrayList<>();
        ArrayList <Integer> suma=fun(arr,0,list);
        System.out.println(suma);
        for(Integer temp:suma)
        {
            System.out.print(temp+" ");
        }

    }
    static ArrayList<Integer> fun(int arr[],int s,ArrayList<Integer> list)
    {

        if(s==arr.length)
        {
            return list;
        }
        else if(arr[s]%2==0)
        {
            list.add(0);
            return fun(arr, s+1, list);
        }
        else
        {
            list.add(1);
            return fun(arr, s+1, list);
        }
    }
}
*/

// method 2
/*
import java.util.ArrayList;
import java.util.Scanner;

public class recursion {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int num=scan.nextInt(),arr[]=new int[num];
        for(int i=0;i<num;i++)
        {
            arr[i]=scan.nextInt();
        }
        ArrayList <Integer> suma=fun(arr,0);
        System.out.println(suma);
        for(Integer temp:suma)
        {
            System.out.print(temp+" ");
        }

    }
    static ArrayList<Integer> fun(int arr[],int s)
    {
        
        // only disadvantage of in this method is object crected in again and again 
        ArrayList <Integer> list = new ArrayList<>();
        if(s==arr.length)
        {
            return list;
        }
        else if(arr[s]%2==0)
        {
            list.add(0);
    
        }
        else
        {
            list.add(1);
        }
        ArrayList <Integer> temp = fun(arr, s+1); // in this line excuting till stack is empty and move next line in stack is empty
        list.addAll(temp);
        return list;
    }
}
*/

// print 5 to 1  
/*
public class recursion {

    public static void main(String[] args) {
        function1(5,0);
        System.out.println();
        function2(5,0);
    }
    static void function1(int s,int e)
    {
        if(s==e)
        {
            return;
        }
        System.out.print(s--+" ");
        function1(s, e);
    }
    
    static void function2(int s,int e)
    {
        if(s==e)
        {
            return;
        }
        function2(s-1, e);
        System.out.print(s+" ");
    }
    
}
*/


// factorial

/*
public class recursion {

    public static void main(String[] args) {
        System.out.println(fact1(5,5));
        System.out.println(fact2(5));
    }
    static int fact1(int a,int temp)
    {
        a*=--temp;
        if(temp==1)
        {
            return a;
        }
        else
        {
            return fact1(a, temp);
        }
    }
    static int fact2(int a)
    {
        if(a==1)
        {
            return 1;
        }
        return  a*fact2(a-1);
        //   5*fact2(4)            ^ 5 |
        //        4*fact2(3)         | 4 | 
        //            3*fact2(2)     | 3 |
        //                2*fact2(1) | 2 ~
        
    }
    
}
*/



//sum of digit
/*
public class recursion {

    public static void main(String[] args) {
        System.out.println(sumOfDigit(1235));
        System.out.println(mulOfDigit(1235));
    }
    static int sum=0;
    static int sumOfDigit(int num)
    {
        if(num==0)
        {
            return 0;
        }
        return num%10+sumOfDigit(num/10);
    }
    static int mulOfDigit(int num)
    {
        if(num==0)
        {
            return 0;
        }
        int temp= num%10*sumOfDigit(num/10);
        return temp;
    }
}
*/

// reverse number
/*
public class recursion {

    public static void main(String[] args) {
        reverse1(1234);
        System.out.println(sum1);
    }
    static int sum1=0;
    static void reverse1(int num)
    {
        if(num==0)  
        {
            return;
        }
        int temp=num%10;
        sum1=sum1*10+temp;
        reverse1(num/10);
    }
}
*/


// palindrome
/* 
import java.util.Scanner;

public class recursion {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int num=scan.nextInt();
        reverse(num);
        System.out.println(ReverseNumber==num);
    }
    static int ReverseNumber=0;
    static void reverse(int num)
    {
        if(num==0)
        {
            return;
        }
        int temp = num%10;
        ReverseNumber =ReverseNumber*10+temp;
        reverse(num/10);
        
    }
}
*/

// count number zeroes in a digits
/*
import java.util.Scanner;
class function
{
    static int countZero1(int num,int ctr)
    {
        if(num==0)
        {
            return ctr;
        }
        int temp=num%10;
        if(temp==0){ctr++;}
        return countZero1(num/10, ctr);
    }
}
public class recursion {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int num=scan.nextInt();
        function obj = new function();
        System.out.println(obj.countZero1(num,0));

        countZero2(num);
        System.out.println(ctr);
    }
    static int ctr=0;
    static int countZero2(int num)
    {
        if(num==0)
        {
            return ctr;
        }
        int temp=num%10;
        if(temp==0){ctr++;}
        return countZero2(num/10);
    }
}
*/

//leetcode:1342  
/* 
class Solution {
    public int numberOfSteps(int num) {
        return EO(num,0);
    }
    static int EO(int num,int ctr)
    {
        if(num==0)
        {
            return ctr;
        }
        if(num%2==0)
        {
            return EO(num/2,ctr+1);
        }
        else
        {
            return EO(num-1,ctr+1);
        }
    }
}
*/

// merge sort

/*
import java.util.Arrays;

public class recursion {

    public static void main(String[] args) {
        int arr[]={8,3,4,13,15,6};
        System.out.println(Arrays.toString(mergesort(arr)));
    }
    static int[] mergesort(int arr[])
    {
        if(arr.length==1)
        {
            return arr;
        }
        int mid = arr.length/2;
        int left[]=mergesort(Arrays.copyOfRange(arr, 0, mid));
        int rigth[]=mergesort(Arrays.copyOfRange(arr, mid, arr.length));
        return merge(left,rigth);
    }
    static int[] merge(int left[],int rigth[])
    {
        int total[]=new int[left.length+rigth.length];
        int l=0,r=0,ctr=0;
        while(l<left.length&&r<rigth.length)
        {
            if(left[l]<rigth[r])
            {
                total[ctr++]=left[l];
                l++;
            }
            else
            {
                total[ctr++]=rigth[r];
                r++;
            }
        }
        while(l<left.length)
        {
            total[ctr++]=left[l];
            l++;
        }
        while(r<rigth.length)
        {
            total[ctr++]=rigth[r];
            r++;
        }
        return total;

    }
}



*/
// RECURSION PROGRAM PATTERN AND SORTING:
/*
public class recursion {

    public static void main(String[] args) {
        System.out.println("PATTERN 1:");
        pattern1(5,5,0);

        System.out.println("PATTERN 2:");
        pattern2(4,0);
 
        System.out.println("PATTERN 3:");
        pattern3(5,0);

        System.out.println("PATTERN 4:");
        pattern4(5,5,0);

        System.out.println("Bubble sort:");
        int arr1[]={2,9,8,6,1,3}; 
        BubbleSort(arr1,5,0);
        for(int i=0;i<6;i++)
        {
            System.out.print(arr1[i]+" ");
        }

        System.out.println();

        System.out.println("Selection sort:");
        int arr2[]={2,9,8,6,1,3}; 
        selection(arr2,6,0,0);
        for(int i=0;i<6;i++)
        {
            System.out.print(arr2[i]+" ");
        }
    }
    static void pattern1(int r,int c,int s)
    {
        if(r==0)
        {
            return ;
        }
        else if(s<c)
        {
            System.out.print("*");
            pattern1(r, c,s+1);
        }
        else
        {
            System.out.println();
            pattern1(r-1, c,0);
        }
    }
    static void pattern2(int r,int c)
    {
        if(r==0)
        {
            return;
        }
        else if(c<r)
        {
            System.out.print("*");
            pattern2(r,c+1);
        }
        else
        {
            System.out.println();
            pattern2(r-1, 0);
        }
    }
    static void pattern3(int r,int c)
    {
        if(r==0)
        {
            return;
        }
        else if(c<r)
        {
            pattern3(r,c+1);
            System.out.print("*");
            
        }
        else
        {
            pattern3(r-1, 0);
            System.out.println();
        }
    }
    static void pattern4(int r,int c,int s)
    {
        if(r==0)
        {
            return ;
        }
        else if(s<c)
        {
            System.out.print(s);
            pattern4(r, c,s+1);
        }
        else
        {
            System.out.println();
            pattern4(r-1, c,0);
        }
    }
    static void BubbleSort(int arr[],int r,int c)
    {
        if(r==0)
        {
            return ;
        }
        else if(c<r)
        {
            if(arr[c]>arr[c+1])
            {
                int temp=arr[c];
                arr[c]=arr[c+1];
                arr[c+1]=temp;
            }
            BubbleSort(arr, r, c+1);
        }
        else
        {
            BubbleSort(arr, r-1,0);
        }
    }
     static void selection(int arr[],int r,int c,int max)
     {
        if(r==0)
        {
            return ;
        }
        else if(c<r)   // finding the max number index than else state swap that max index position
        {
            if(arr[c]<arr[max])
            {
                selection(arr, r, c+1, max);     
            }
            else
            {
                selection(arr, r, c+1, c);
            }
        }
        else
        {
            int temp = arr[r-1];
            arr[r-1]=arr[max];
            arr[max]=temp;
            selection(arr, r-1, 0, 0);
        }
     }
}

*/

// quick sort 
/*
    pivot:choose any  elements after first pass 
                LHS < P < RHS 
    .all the elements  < P will be on LHS of P 
    .all the  elements p < will be on RHS of P
 

import java.lang.reflect.Array;
import java.util.Arrays;

public class recursion {

    public static void main(String[] args) {
        int arr[]={12,25,5,6,75,5,1};
        quick_sort(arr, 0, arr.length-1);
        System.out.println(Arrays.toString(arr));
    }

    static void  quick_sort(int arr[],int Starts,int ends)
    {
        int i=Starts;
        int j=ends;
        int mid=i+(j-i)/2;
        int pivot=arr[mid];
        while(i<=j)
        {
            while(arr[i]<pivot)
            {
                i++;
            }
            while(arr[j]>pivot)
            {
                j--;
            }
            if(i<=j)
            {
                int temp=arr[i];
                arr[i]=arr[j];
                arr[j]=temp;
                i++;
                j--;
            }
        }
        // now  my pivot is at correct index,please sort two halves now
        if (Starts < j) {
            quick_sort(arr, Starts, j);
        }
        if (i < ends) {
            quick_sort(arr, i, ends);
        }
    }
}

*/
//--------------------------------------------------
//1.remove a in a string
/* 
public class recursion {
    public static void main(String[] args) {
        System.out.println(function("abacafda"));//bcfd
    }
    static String function(String temp1)
    {
        if(temp1.isEmpty())
        {
            return "";
        }
        char ch=temp1.charAt(0);
        if(ch=='a')
        {
            return function(temp1.substring(1));
        }
        else
        {
            return ch+function(temp1.substring(1));
        }
    }
}
*/
//-----subset---
/* 
    .permutations & combinations
    .[3,5,9]
       |
       [3],[3,5],[3,9],[3,5,9],[5,9],[5],[9]
public class recursion {
    public static void main(String[] args) {
        subseq("","abc");
    }
    static void subseq(String temp,String str)
    {
        if(str.isEmpty())
        {
            System.out.println(temp);
            return;
        }
        char ch=str.charAt(0);
        subseq(temp+ch, str.substring(1));
        subseq(temp, str.substring(1));
    }
}
*/

//-----------------------------------------------------------------------------------------------------
//stack and queues
//stack  --> FILO
//queues --> FIFO 

/* 
import java.util.*;
public class recursion {
    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        stack.add(12);
        stack.add(23);
        stack.add(34);
        stack.add(45);
        stack.add(56);
        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack);

        Queue<Integer> queue = new LinkedList<>();
        queue.add(12);
        queue.add(23);
        queue.add(34);
        queue.add(45);
        queue.add(56);
        System.out.println(queue.remove());
        System.out.println(queue.remove());
        System.out.println(queue.remove());
        System.out.println(queue);

    }
}
*/

/* 
import java.util.EmptyStackException;

public class MyStack<T> {
    private Node<T> top;
    
    private static class Node<T> {
        private T data;
        private Node<T> next;
        
        public Node(T data) {
            this.data = data;
        }
    }
    
    public MyStack() {
        this.top = null;
    }
    
    public void push(T item) {
        Node<T> t = new Node<>(item);
        t.next = top;
        top = t;
    }
    
    public T pop() {
        if (top == null) throw new EmptyStackException();
        T item = top.data;
        top = top.next;
        return item;
    }
    
    public T peek() {
        if (top == null) throw new EmptyStackException();
        return top.data;
    }
    
    public boolean isEmpty() {
        return top == null;
    }
    
    public static void main(String[] args) {
        MyStack<Integer> stack = new MyStack<>();
        stack.push(1);
        stack.push(2);
        stack.push(3);
        
        System.out.println(stack.pop()); // 3
        System.out.println(stack.peek()); // 2
        System.out.println(stack.isEmpty()); // false
    }
}
*/

/* 
import java.util.NoSuchElementException;

public class MyQueue<T> {
    private Node<T> first;
    private Node<T> last;
    
    private static class Node<T> {
        private T data;
        private Node<T> next;
        
        public Node(T data) {
            this.data = data;
        }
    }
    
    public MyQueue() {
        this.first = null;
        this.last = null;
    }
    
    public void add(T item) {
        Node<T> t = new Node<>(item);
        if (last != null) {
            last.next = t;
        }
        last = t;
        if (first == null) {
            first = last;
        }
    }
    
    public T remove() {
        if (first == null) throw new NoSuchElementException();
        T data = first.data;
        first = first.next;
        if (first == null) {
            last = null;
        }
        return data;
    }
    
    public T peek() {
        if (first == null) throw new NoSuchElementException();
        return first.data;
    }
    
    public boolean isEmpty() {
        return first == null;
    }
    
    public static void main(String[] args) {
        MyQueue<Integer> queue = new MyQueue<>();
        queue.add(1);
        queue.add(2);
        queue.add(3);
        
        System.out.println(queue.remove()); // 1
        System.out.println(queue.peek()); // 2
        System.out.println(queue.isEmpty()); // false
    }
}
*/

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




//-----------------------methods------------------------------------



// 1 seperated method add two number
/* 
import java.util.Scanner;
class A
{
    public int add(int a,int b)
    {
        return a+b;
    }
}
public class Main
{
    public static void main(String args[])
    {
        Scanner scan = new Scanner(System.in);
        int num1=scan.nextInt(),num2=scan.nextInt();
        A obj = new A();
        System.out.println(obj.add(num1, num2));
    }
}
*/

// 2 static method add a two number

/* 
import java.util.Scanner;
public class Main
{
    public static void main(String args[])
    {
        Scanner scan = new Scanner(System.in);
        int num1=scan.nextInt(),num2=scan.nextInt();
        System.out.println(sum(num1, num2));
    }
    static int sum(int x,int y)
    {
        return x+y;
    }
}
*/ 

//3  no argument  no return type;
/* 
public class Main
{
    public static void main(String args[])
    {
        greeting();
    }
    static void greeting()
    {
        System.out.println("HIIIIIIIIIIII");
    }
}
*/
//4  no argument  with return type;
/* 
public class Main
{
    public static void main(String args[])
    {
        System.out.println(sum());
    }
    static int sum()
    {
        int a=12,b=32;
        return a+b;
    }
}
*/
//5  with argument  without return type;
/* 
public class Main
{
    public static void main(String args[])
    {
        int a=12,b=32;
        sum(a,b);
    }
    static void sum(int x,int y)
    {
        System.out.println(x+y);
    }
}
*/

//6  with argument  with return type;
/*
public class Main
{
    public static void main(String args[])
    {
        int a=12,b=32;
        System.out.println(sum(a, b));
    }
    static int sum(int x,int y)
    {
        return x+y;
    }
}
*/

//7
/* 
public class Main
{
    public static void main(String args[])
    {
        int a=2,b=12;
        swap(a,b);
        System.out.println(a+" "+b); // 2 12

        String str = "LOKESH JAYASEELAN";
        change(str);
        System.out.println(str);   // LOKESH JAYASEELAN

        int arr[]={1,2,3,4};
        EVEN(arr);      // arr is act as pointer  by the passing starting addres
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]);
        }
    }
    static void swap(int a,int b)
    {
        int temp = a;
        a=b;
        b=temp;
    }
    static void change(String str)
    {
        str="LOKESH";
    }
    static void EVEN(int arr[])
    {
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]%2==0)
            {
                arr[i]=0;
            }
            else
            {
                arr[i]=1;
            }
        }
    }
}
*/


/*
//8
import java.util.Arrays;
public class java{
    public static void main(String args[])
    {
        int a=10;
        int b=21;
        {
            // int a=12; error will across because already decalured
            a=78; // value will be change
            // int c=43; values will initialised in this block,will remains same and use will block
        }
        System.out.println(a);
        // System.out.println(c); // error will across because declared part only use with in block

    }
}
*/

// public class Main{
//      static int num=10;
//     public static void main(String args[]) 
//     {
//         System.out.println(num);
//         int num=100; //this part of decluration only use in this block 
//         System.out.println(num);
//         fun();
//     }
//     static void fun()
//     {
//         System.out.println(num);
//     }
// }

// import java.util.Arrays;
// public class java{
//     public static void main(String args[])
//     {
//         fun(1,2,4,6,7,7,4,2,32);

//         mfun(1,2,"lokesh ","jayaseelan ","dinesh ");
//     }
//     static void fun(int ...num)
//     {
//         System.out.println(Arrays.toString(num));
//     }
//     static void mfun(int a,int b, String ...str)
//     {
//         System.out.printf("Two values are %d %d\n",a,b);
//         System.out.println(Arrays.toString(str));
//     }
// }
//method overloading
// public class java{
//     public static void main(String args[])
//     {
//         System.out.println(add(1,1));
//         System.out.println(add(1,1,1,1));
//     }
//     static int add(int a,int b)
//     {
//         return a+b;
//     }
//     static int add(int a,int b,int c,int d)
//     {
//         return a+b+c+d;
//     }
// }



//------------------------------------------------------DSA---------------------------------------
 //----------------------------------------------ARRAY AND ARRAYLIST------------------------------

 
// import java.util.ArrayList;
// import java.util.Arrays;

// public class Main{
//     public static void main(String args[])
//     {
//         int arr[]={12,32,3,43,1};   
//         System.out.println(Arrays.toString(arr)); //ARRAY
//         ArrayList <Integer> list_arr = new ArrayList<Integer>();
//         list_arr.add(15);
//         list_arr.add(212);
//         list_arr.add(1212);
//         list_arr.add(21);
//         list_arr.add(143);
//         list_arr.add(2134);
//         list_arr.add(1431);
//         list_arr.add(221);

//         for(int i=0;i<list_arr.size();i++)
//         {
//             System.out.print(list_arr.get(i)+" ");
//         }
//         System.out.println();
        

//         System.out.println(list_arr); //ARRAYLIST

//         System.out.println(list_arr.contains(23)); //ARRAYLIST

//         list_arr.set(0,143);
//         System.out.println(list_arr); 

//         list_arr.remove(0); 
//         System.out.println(list_arr); 

//         System.out.println(list_arr.get(0)); 

//         list_arr.add(0,7);
//         System.out.println(list_arr);

//         for (Integer number : list_arr) { 
//             System.out.print(number+" "); 
//         } 
//         System.out.println();

//         ArrayList <Integer> list_arr2 = new ArrayList<Integer>();
//         list_arr2.addAll(list_arr);
//         for(Integer x: list_arr2)
//         {
//             x=x+1;
//             System.out.print(x+" ");
//         }
//         System.out.println(" ");

//         list_arr.clear();
//         System.out.println(list_arr);

//         list_arr2.forEach((n) -> System.out.print(n+"-"));
//         System.out.println();

//         list_arr2.add(2,121);
//         list_arr2.add(5,121);
//         System.out.println(list_arr2.indexOf(121));
//         System.out.println(list_arr2.lastIndexOf(121));

//         System.out.println(list_arr2.isEmpty());




//     }
// }
/*
import java.util.ArrayList;
import java.util.Collections;

public class Main{
    public static void main(String args[])
    {
        ArrayList <Integer> arr1 = new ArrayList<Integer>();
        arr1.add(1);
        arr1.add(5);
        arr1.add(3);
        arr1.add(4);
        arr1.add(1);
        arr1.add(4);
        arr1.add(1);
        ArrayList <Integer> arr2 = new ArrayList<Integer>();
        arr2.add(1);
        arr2.add(3);
        arr2.add(1);
        

        System.out.println(arr1.equals(arr2));

        arr1.removeAll(arr2);
        System.out.println(arr1);

        arr1.removeIf(temp->(temp%2==0));
        System.out.println(arr1);

        ArrayList <Integer> list_arr = new ArrayList<Integer>();
        list_arr.add(15);
        list_arr.add(212);
        list_arr.add(1212);
        list_arr.add(21);
        list_arr.add(143);
        list_arr.add(2134);
        list_arr.add(1431);
        list_arr.add(221);

        Collections.reverse(list_arr);
        System.out.println("rev ArrayList: " + list_arr);

        Collections.sort(list_arr);
        System.out.println("Sorted ArrayList: " + list_arr);
        
        Collections.reverse(list_arr);
        System.out.println("rev ArrayList: " + list_arr);



        ArrayList<String> students = new ArrayList<String>(); 
        students.add("Ram"); 
        students.add("Mohan"); 
        students.add("Sohan"); 
        students.add("Rabi"); 
        students.add("Shabbir"); 

        Collections.sort(students);
        System.out.println("Sorted ArrayList: " + students);

        Collections.reverse(students);
        System.out.println("Sorted ArrayList: " + students);


        students.removeIf(n -> (n.charAt(0) == 'S')); 
        for (String str : students) { 
            System.out.println(str); 
        } 


        ArrayList<String> bags = new ArrayList<String>();
        bags.add("pen");
        bags.add("pencil");
        bags.add("paper");
        ArrayList<String> boxes = new ArrayList<String>();
        boxes.add("pen");   
        boxes.add("paper");
        boxes.add("books");
        boxes.add("rubber");

        boxes.retainAll(bags);
        System.out.println("Bags Contains :" + bags);
        System.out.println("Boxes Contains :" + boxes);


        ArrayList<Integer> arr = new ArrayList<Integer>(9); 
        arr.add(2); 
        arr.add(4); 
        arr.add(5); 
        arr.add(6); 
        arr.add(11); 
        System.out.println(arr);
        for (Integer number : arr) { 
            System.out.println("Number = " + number); 
        } 

        arr.trimToSize(); 
        System.out.println("The List elements are:"); 
        for (Integer number : arr) { 
            System.out.println("Number = " + number); 
        } 
    }
}
 */

/*
import java.util.ArrayList;
import java.util.*;
public class Main{
    public static void main(String args[])
    {
        ArrayList<Integer> arr1 = new ArrayList<Integer>();
        arr1.add(1);
        arr1.add(2);
        arr1.add(1);
        arr1.add(2);
        System.out.println(arr1.toString()); 
        System.out.println(arr1); 

        arr1.replaceAll(temp -> temp*0+1);
        System.out.println(arr1);
        
        arr1.replaceAll(temp -> temp=2);
        System.out.println(arr1);

        ArrayList<Integer> arr2 = new ArrayList<Integer>();
        arr2.add(20);
        arr2.add(22);
        arr2.add(21);
        arr2.add(19);

        arr1.addAll(2,arr2);
        System.out.println(arr1+"ARR2");

        arr1.add(1,4);
        System.out.println(arr1+"arr2");

        ArrayList<Integer> arr3 = new ArrayList<Integer>();
        arr3.add(20);
        arr3.add(22);
        arr3.add(20);
        arr3.add(21);
        System.out.println(arr2.containsAll(arr3));

        arr2.removeAll(arr3);
        System.out.println(arr2);

        arr3.set(0,7);
        System.out.println(arr3);

        System.out.println(arr3.subList(1,3));

    }
}

*/

 


 //---------------------------------String------------------------------------

 
 /* 
 public class Main {
 
    public static void main(String args[])
    {
        String str0="123";
        System.out.println("0 "+Integer.valueOf(str0));
        System.out.println("0 "+Float.valueOf(str0));
         

        String str1="LOKESH ";
        str1 = str1 + " Jayaseelan";
        System.out.println("1 "+str1);

        str1 = str1.concat(" (CEO OF TED TALKS)");
        System.out.println("2 "+str1);

        byte ascii[]={97,98,99,100};
        String value1 = new String(ascii);
        System.out.println("3 "+value1);
        String value2 = new String(ascii,1,3);
        System.out.println("4 "+value2);

        char ch1[]={'a','b','b','c'};
        String str2 = new String(ch1);
        String str3 = new String(ch1,1,2);
        System.out.println("5 "+str2);
        System.out.println("6 "+str3);

        String str4="LOKESH";
        System.out.println("7 "+ str4.length());
        System.out.println("8 "+str4.charAt(1));
        System.out.println("9 "+ str4.substring(3));
        System.out.println("10 "+ str4.substring(3,5));

        String str5 ="LOKESH JAYASEELAN (CEO OF TED TALKS..)";
        System.out.println("11 "+str5.indexOf("JAYASEELAN"));

        String str6 = "Learn Share Learn";
        System.out.println("12 "+str6.indexOf("ea",3));
        System.out.println("13 "+ str6.lastIndexOf("r"));


        String str7="LOKESH";
        System.out.println("14 "+str7.equals("lokesh"));
        System.out.println("15 "+str7.equalsIgnoreCase("lokesh"));
        System.out.println("16 "+str7.equals("LOKESH"));
        System.out.println("17 "+str7.equalsIgnoreCase("LOKESH"));


        // only for equal no.of strlen
        String str8="lokesh" ,str9="lokesh8";
        String str10="lokesh" ,str11="Lokesh";
        System.out.println("18 "+str8.compareTo(str9));
        System.out.println("19 "+str10.compareToIgnoreCase(str11));

        String str12="Hello";
        System.out.println("20 "+str12.toLowerCase());
        System.out.println(str12);
        System.out.println("21 "+str12.toUpperCase());

        String str13="       LOKESH             JAYASEELAN CEO OF TED TALKS";
        System.out.println("22 "+ str13.trim());  // only remove the starting whitespaces

        String str14 = "LOKESH",str15="lokesh";
        System.out.println("23 "+str14+122);
        System.out.println("24 4"+str14==str15);

        String str16 = "Lokesh J";
        System.out.println("25 "+str16.replace('L','l'));
        System.out.println("26 "+str16.replace("Lokesh","LOKESH "));

        String str17 = "Lokesh J";
        System.out.println("27 "+str17.contains("Lok"));
        System.out.println("28 "+str17.contains("K"));

        String str18 = "LOKESH";
        char ch[]=str18.toCharArray();
        for(int i=0;i<ch.length;i++)
        {
            System.out.println(ch[i]+" ");
        }
        System.out.println();

        String str19 = "LOKESH JAYASEELAN";
        System.out.println("29 "+str19.startsWith("LOK"));
        System.out.println("30 "+str19.endsWith("LAN"));

        String str20 = "LOKESH ABCDEIOUZ";
        System.out.println("31 "+str20.replaceAll("[aeiouAEIOU]", "-"));

        String str21="A B C D E F GH IJ KMN";
        String str22[]=str21.split(" ");
        for(String temp:str22)
        {
            System.out.print(temp+" ");
        }
        System.out.println();

        String str23="1 2 3 4 A";
        boolean temp1=str23.matches("[123456789,+,-,*,#,a-z]");
        System.out.println("32 " +temp1);

        String str24="ABLOKESH";
        System.out.println(str24.codePointAt(0));
        System.out.println(str24.codePointBefore(2));
        System.out.println(str24.codePointCount(0,str24.length()));

        String decimalStr = "42";
        String binaryStr = "101010";
        String octalStr = "52";
        String hexStr = "2A";
        int decimalInt = Integer.parseInt(decimalStr);
        int binaryInt = Integer.parseInt(binaryStr, 2);
        int octalInt = Integer.parseInt(octalStr, 8);
        int hexInt = Integer.parseInt(hexStr, 16);
        System.out.println("Decimal: " + decimalInt);
        System.out.println("Binary: " + binaryInt);
        System.out.println("Octal: " + octalInt);
        System.out.println("Hexadecimal: " + hexInt);

        String floatStr = "3.14";
        String doubleStr = "2.71828";
        float parsedFloat = Float.parseFloat(floatStr);
        double parsedDouble = Double.parseDouble(doubleStr);
        System.out.println("Parsed Float: " + parsedFloat);
        System.out.println("Parsed Double: " + parsedDouble);

        String decimalStr1 = "42";
        // Integer to Binary String
        String binaryString = Integer.toBinaryString(Integer.parseInt(decimalStr1));
        // Integer to Octal String
        String octalString = Integer.toOctalString(Integer.parseInt(decimalStr1));
        // Integer to Hexadecimal String
        String hexString = Integer.toHexString(Integer.parseInt(decimalStr1));
        System.out.println("Binary: " + binaryString);
        System.out.println("Octal: " + octalString);
        System.out.println("Hexadecimal: " + hexString);

    }
 }
 */
/* 
public class Main
{
    
    public static void main(String[] args) {
        //1
        String myStr1 = "PREPINSTA PRIME";
        String myStr2 = "prepinsta prime";
        System.out.println(myStr1.compareToIgnoreCase(myStr2));

        String myStr = "Hello PrepInsta ";
        System.out.println(myStr.contentEquals("Hello PrepInsta "));

        String formattedString2 = String.format("My String is %.6f",14.140);
        System.out.println(formattedString2); 
        System.out.printf("%.6f \n",12.3);

        String str = "Hello World!";
        byte[] bytes = str.getBytes();
        for (byte b : bytes) {
            System.out.print(b + " ");
        }
        System.out.println();

        String str1="";
        System.out.println(str1.isEmpty());

        String[] words = {"Hello", "World", "Welcome", "to", "Java"};
        String sentence = String.join(" ", words);
        System.out.println(sentence);
 
        String date = String.join ("/", "14", "02", "2023");
        System.out.println(date);

        String str2 = "PrepInsta123or456PrepInsta Prime";
        System.out.println(str2.replaceAll("\\d+"," "));
        System.out.println(str2.replace("P", "j"));
    }
}
*/

/* 
 public class Main {
    public static void main(String[] args) {
        // Test the functions with some characters
        char ch = 'y';

        // 1. isLetter(char ch)
        System.out.println("1. isLetter: " + Character.isLetter(ch));

        // 2. isDigit(char ch)
        System.out.println("2. isDigit: " + Character.isDigit(ch));

        // 3. isWhitespace(char ch)
        System.out.println("3. isWhitespace: " + Character.isWhitespace(ch));

        // 4. isUpperCase(char ch)
        System.out.println("4. isUpperCase: " + Character.isUpperCase(ch));

        // 5. isLowerCase(char ch)
        System.out.println("5. isLowerCase: " + Character.isLowerCase(ch));

        // 6. toUpperCase(char ch)
        System.out.println("6. toUpperCase: " + Character.toUpperCase(ch));

        // 7. toLowerCase(char ch)
        System.out.println("7. toLowerCase: " + Character.toLowerCase(ch));

        // 8. getNumericValue(char ch)
        System.out.println("8. getNumericValue: " + Character.getNumericValue(ch));

        // 9. isAlphabetic(char ch)
        System.out.println("9. isAlphabetic: " + Character.isAlphabetic(ch));

        // 51. isLetterOrDigit(char ch)
        System.out.println("51. isLetterOrDigit: " + Character.isLetterOrDigit(ch));

    }
}
*/

 
//StringBuffer , StringBulider is a class in Java that represents a mutable sequence of characters.  
//The string is a sequence of characters. In Java, objects of String are immutable which means a constant and cannot be changed once created.


/*
 public class Main
 {
    public static void main(String args[])
    {
        String str1 = "LOKESH";
        StringBuffer sb1 = new StringBuffer(str1);
        sb1.append(6+" JAYASEELAN");
        System.out.println(sb1+" .1");

        String str2="LOKESH";
        StringBuffer sb2 = new StringBuffer(str2);
        sb2.replace(1, 3," HII ");
        System.out.println(sb2+" .2");

        
        String str3="LOKESH";
        StringBuffer sb3 = new StringBuffer(str3);
        System.out.println(sb3.delete(1, 3)+".3");
        System.out.println(sb3.deleteCharAt(0));
        
        String str4="School";
        StringBuffer sb4 = new StringBuffer(str4);
        System.out.println(sb4.reverse()+".4");
        sb4.reverse();
        System.out.println(sb4+".4");




        String str5="LOKI";
        StringBuffer sb5 = new StringBuffer();
        System.out.println(sb5.capacity());  //default will be a 16

        sb5.append(str5);
        System.out.println(sb5.capacity());

        sb5.append(str5);
        System.out.println(sb5.capacity()); // if nextstring a length compare to current string then ((oldcapacity*2)+2)

        sb5.append("SRGSGSRFG");
        System.out.println(sb5.capacity());

        sb5.append("xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
        System.out.println(sb5.capacity());
        
    }
 }*/


 //StringBulider
 
 /*
 public class Main {

    public static void main(String args[])
    {
        // Create a StringBuilder object
        // using StringBuilder() constructor
        StringBuilder sb1 = new StringBuilder();
        sb1.append("LOKESH ");
        System.out.println(sb1);
        System.out.println(sb1.toString());

        StringBuilder sb2 = new StringBuilder();
        sb2.append("LOKESH");
        System.out.println(sb2.reverse()+"   3");
        System.out.println(sb2+"    4");

        System.out.println(sb2.appendCodePoint(65));

        sb2.insert(3, "beautiful ");
        System.out.println(sb2.toString()); 

    }
 }
*/

/* 

import java.util.StringTokenizer;

public class Main {

    public static void main(String args[])
    {
        StringTokenizer st2 = new StringTokenizer("JAVA : Code : String", " :");
        while (st2.hasMoreTokens())
            System.out.println(st2.nextToken());
        
        // int count = st2.countTokens();
        // for(int i=0;i<count;i++)
        // {
        //     System.out.print(i+" "+st2.nextToken()+" ");
        // }
        // System.out.println();
    }
}

*/



/* 
import java.util.Arrays;

public class Main {

    public static void main(String args[])
    {
         int[] numbers = {5, 2, 8, 1, 7, 3, 6, 4};

         Arrays.sort(numbers);
         System.out.println("1. Sorted Array: " + Arrays.toString(numbers));

         int[] copyOfNumbers = Arrays.copyOf(numbers, 6);
        System.out.println("2. Copied Array: " + Arrays.toString(copyOfNumbers));

        int[] filledArray = new int[5];
        Arrays.fill(filledArray, 42);
        System.out.println("3. Filled Array: " + Arrays.toString(filledArray));

        int[] anotherArray = {5, 2, 8, 1, 7, 3, 6, 4};
        boolean areEqual = Arrays.equals(numbers, anotherArray);
        System.out.println("4. Arrays Equal: " + areEqual);

        String arrayAsString = Arrays.toString(numbers);
        System.out.println("6. Array as String: " + arrayAsString);


        int[] numbers1 = {5, 2, 8, 1, 7, 3, 6, 4};
        int[] numbers2 = {1, 2, 3, 4, 5, 6, 7, 8};

        int minValue = Arrays.stream(numbers1).min().orElse(0);
        int maxValue = Arrays.stream(numbers1).max().orElse(0);
        System.out.println("8. Min Value: " + minValue + ", Max Value: " + maxValue);

    }
}

*/

// pattern qn

// import java.util.Scanner;

// public class Main 
// {

//     public static void main(String[] args) 
//     {
//         int num=4;
//         num=2*num;
//         for(int i=0;i<=num;i++)
//         {
//             for(int j=0;j<=num;j++)
//             {
//                 int temp = Math.min(Math.min(i,j),Math.min(num-i,num-j));  // i-left j-top num-i-right num-j-buttom
//                 System.out.print(temp+" ");
//             }
//             System.out.println();
//         }
//     }
// }

//------------------------bitwise operator-----------------------------

// public class Main
// {
//     public static void main(String[] args) {
        
//         System.out.println(5<<1); 
//         System.out.println(2<<1);
//         //a*2^b;
//         System.out.println(5>>2);
//         System.out.println(10>>1);


//         int num=12;
//         if((num&1)==1)
//         {
//             System.out.println("ODD");
//         }
//         else
//         {
//             System.out.println("EVEN");
//         }    

//         int arr[]={2,3,3,4,2,6,4,4,4,4,9};
//         int sum=0;
//         for(int i:arr)
//         {
//             sum^=i;
//         }
//         System.out.println(sum);
//     }
// }



















// public class FloatPrecisionExample {
//     public static void main(String[] args) {
//         float number = 123.456789f;
//         int n = 3; // Number of digits after the decimal point

//         String formattedNumber = String.format("%." + n + "f", number);
//         System.out.println(formattedNumber);
//     }
// }

// #include <stdio.h>

// int main() {
//     float number = 123.456789f;
//     int n = 3; // Number of digits after the decimal point

//     printf("%.*f\n", n, number);

//     return 0;
// }




// public class Main 
// {

//     public static void main(String[] args) 
//     {
//         float num=5.99999f;int a=2;
//         String temp="%."+a+"f";
//         // System.out.printf("%.04f",a,num);
//         // System.out.printf("%."+a+"f",num);
//         System.out.printf(temp,num);
//     }
// }




//---------------------------------------------------Math function-------------------------------------------------------------------------------------------


/*
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner scan = new Scanner(System.in);
        // System.out.println(Math.abs(-1));
        // System.out.println((int)(Math.log10(1221)+1));
        // System.out.println(Math.min(1, 2));
        // System.out.println(Math.max(22, 32));

        // System.out.println(Math.sqrt(25));

        // System.out.println(Math.round(5.47));
        // System.out.println(Math.round(5.57));

        // System.out.println(Math.ceil(5.47));
        // System.out.println(Math.ceil(5.57));

        // System.out.println(Math.floor(5.47));
        // System.out.println(Math.floor(5.57));


        int x=2,y=3;
        int result1 = Math.multiplyExact(x, y);
        System.out.println(result1); // prints 20000

        long a = 100;
        long result = Math.negateExact(a);
        System.out.println(result); // prints -100

        System.out.println(Math.subtractExact(50, 100));

        System.out.println( Math.addExact(2,32));

        System.out.println(Math.copySign(23, -202));


        System.out.println(Math.decrementExact(399));
        System.out.println(Math.incrementExact(399));


        System.out.println(Math.pow(2,3));

    
        // int max = 10;
        // int min = 1;
        // int range = max - min + 1;
 
        // // generate random numbers within 1 to 10
        // for (int i = 0; i < 10; i++) {
        //     int rand = (int)(Math.random() * range) + min;
           
        //     // Output is different everytime this code is executed
        //     System.out.println(rand);
        // }
    }
}
*/

//-------------------------------------------------------------------------------------
// //goto statement

// //method 1
// Lakshit:

// for (int i = 1; i <= 5; i++) {
//     for (int j = 1; j <= 5; j++) {
//         if (j == 2)

//             // break statement for the label
//             break Lakshit;
//         System.out.println("PrepInsta " + j);
//     }
// }  

// //method 2
// Lakshit:

// for (int i = 1; i <= 5; i++) {
//     for (int j = 1; j <= 5; j++) {
//         if (j == 2)

//             // Continue Statement
//             continue Lakshit;
//         System.out.println("PrepInsta " + j);
//     }
// }   






--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



// import java.util.Scanner;
// public class java {
//     public static void main(String args[])
//     {
//         Scanner scan = new Scanner(System.in);
//         int num=scan.nextInt();
//         System.out.printf("%03f",num);
//     }
// }


// import java.util.Scanner;
// public class java {
//     public static void main(String args[])
//     {
        //literals  assign the value to the variable
            // int num=0b1101;
            // System.out.print(num);

        //---------------------------------------//

        //type conversion and casting 
            //  int to long
            //  float to double
            //  float to int
            //  int to float
            //  int to double
        //  int a=10;
        //  long b=20;
        //  long c=(long)a+b;
        //  System.out.print((double)c);

        //  int A=125;
        //  byte B=(byte)A;
        //  System.out.println(B);

        //  int C=257;     
        //  byte D=(byte)C;  //byte sholud be range -128 to 127 if it's greater than modulus operation on number
        //  //257%127=1
        //  System.out.println(D);


         //---------------------------------------//

        //  assignment oprators (=):
        //  ex:
        //  a=b;
        // += (addition assignment)
        // -= (subtraction assignment)
        // *= (multiplication assignment)
        // /= (division assignment)
        // %= (remainder assignment)
        // int a=1;
        // a++;
        // System.out.println(a);
        // System.out.println(a++);
        // System.out.println(a);
        // int b=a++;
        // System.out.println(b);

        //Relational operation: "==","!=",">","<",">=","<="
        //logical operation: "&&","||","!"
        
        
           //do_while
//         int aa=0;
//         do
//         {
//             System.out.println(aa);
//             aa++;
//         }
//         while(aa!=3);
//     }
// }

//enhanced for loop
/* 
import java.util.Scanner;
public class java {
    public static void main(String args[])
    {
        Scanner scan = new Scanner(System.in);
        int size=scan.nextInt(),arr[]=new int [size];
        for(int i=0;i<size;i++){arr[i]=scan.nextInt();}
        for(int i:arr)
        {
            System.out.print(i+" ");
        }
    }
} 
*/

// Data Type	Size (bits)	Range	Format Specifier (printf)
// byte	8	-128 to 127	%d (or %c for unsigned)
// short	16	-32,768 to 32,767	%d
// int	32	-2,147,483,648 to 2,147,483,647	%d
// long	64	-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807	%d or %ld
// float	32	IEEE 754 single-precision floating-point	%f
// double	64	IEEE 754 double-precision floating-point	%f or %lf
// char	16	0 to 65,535 (unsigned)	%c
// boolean	Not precisely defined (typically implementation-dependent)	true or false


//------------------------------------Methods----------------------------------------//
/* 
class computer
{
    public void playmusic()
    {
        System.out.print("Music playing..");
    }
    public String getmepen()
    {
        return "pen";
    }
    public String getmepenprice(int cost)
    { 
        if(cost==10)
        {
            return "gold pen";
        }
        return "black pen";
    }
}
public class java {
    public static void main(String args[])
    {
        computer obj = new computer();
        System.out.println(obj.getmepen());
        System.out.println(obj.getmepenprice(10));

    }
}
*/
//------------------------------------Methods overloading ----------------------------------------//
/* 
class calculator
{
    public int add(int a,int b,int c)
    {
        return a+b+c;
    }
    public int add(int a,int b)
    {
        return a+b;
    }
    public int add(int a)
    {
        return a++;
    }
}
public class java {
    public static void main(String args[])
    {
        calculator obj = new calculator();
        System.out.println(obj.add(1,1,1));
        System.out.println(obj.add(1,1));
        System.out.println(obj.add(1));
    }
}
*/

//-----------------------------------------arrays---------------------------------------------------------//

/*
import java.util.Scanner;
public class java {
    public static void main(String args[])
    {
        Scanner scan = new Scanner(System.in);
        int size=2;
        String arr[]=new String[size];
        for(int i=0;i<size;i++)
        {
            arr[i]=scan.next();
        }
        for(int i=0;i<size;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
} 
*/
//multi dimensional array generate random numbers
/* 
import java.util.*;
public class java {
    public static void main(String args[])
    {
        Scanner scan = new Scanner(System.in);
        int size=scan.nextInt(),arr[][]=new int[size][size];
        for(int i=0;i<size;i++)
        {
            for(int j=0;j<size;j++)
            {
                if(i==0){arr[i][j]=(int)(Math.random()*100);}// Math.random is return float value so that mulltiple 100 if 100 increse 10 time than number digit is increse";
                else {arr[i][j]=(int)(Math.random()*1000);}

            }
        }
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr.length;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
    }
}
*/

//------------------------String---------------------------------------
/* 
public class java { 
    public static void main(String args[])
    {
        String name = new String("lokesh");
        System.out.println(name);
        System.out.println(name.charAt(3));
        System.out.println(name.length());
        System.out.println(name.concat(" jayaseelan"));

        String s1="SS",s2="SS";
        System.out.println(s1==s2);
    }
}
*/
//stringbuffer abd stringbulider in java

/* 
public class java { 
    public static void main(String args[])
    {
        StringBuffer sb=new StringBuffer("lokesh");
        sb.append("_jayaseelan");
        System.out.println(sb);

        sb.delete(1, 3);
        System.out.println(sb);

        sb.deleteCharAt(5);
        System.out.println(sb);

        sb.insert(5, "j");
        System.out.println(sb);

       // String str=sb.toString(); // for converting stringbuffer to string

    }
}
*/
/* 
import java.util.Date;
public class java { 
    public static void main(String args[])
    {
        Date tday = new Date();
        System.out.println(tday); 


        //swap two variable without three variable
        //mehtod 1
        int a=10,b=2;
        a=a^b;
        b=b^a;
        a=a^b;
        System.out.println(a+" "+b);
        //method 2
        int A=10,B=2;
        A=A+B; //A=12
        B=A-B; //B=10
        A=A-B; //A=2
        System.out.println(A+" "+B);

        if(System.out.println("HII"))
    }
}
*/

            /*------------------Encapsulation-----------------*/ 
/*  
class Human
{
    int age;
    String name;
    static String company;
}
public class java { 
    public static void main(String args[])
    {
        Human obj = new Human();
        obj.age=19;
        obj.name="Lokesh";
        obj.company="zoho";
        System.out.println(obj.age);
        System.out.println(obj.name);
        System.out.println(obj.company);

        obj.age=18;
        obj.name="Lokesh j";
        System.out.println(obj.age);
        System.out.println(obj.name);
        System.out.println(obj.company);

    }
}
*/
// in decluared private class only use with class by the way of methods 
// class Human
// {
//     private int age = 11;
//     private String name = "Lokesh";
//     public int getAge()
//     {
//         return age;
//     } 
//     public String getString()
//     {
//         return name;
//     }
//     public void SetAge(int AGE)
//     {
//         age=AGE; //this.age=AGE; 
//     }
//     public void SetName(String NAME)
//     {
//         name=NAME;
//     }
// }
// public class java { 
//     public static void main(String args[])
//     {
//         Human obj = new Human();

//         System.out.println(obj.getAge());
//         System.out.println(obj.getString());

//         obj.SetAge(22);
//         obj.SetName("lll");
//         System.out.println(obj.getAge());
//         System.out.println(obj.getString());
//     }
// }




// public class java{
//     public static void main(String args[])
//     {
    
// 		// byte ascii[] = { 71, 70, 71,87,75,56};

// 		// String firstString = new String(ascii);
// 		// System.out.println(firstString);

// 		// String secondString = new String(ascii, 1, 5);
// 		// System.out.println(secondString);


//         // String s = "LearnShareLearn";
//         // int output = s.indexOf("ea",6);
//         // System.out.println(output);

//         // String ss = "Learn Share Learn";
//         // int num = ss.lastIndexOf("ar"); 
//         // System.out.println(num);

//         // String str1 = "geeksforgeeks";
//         // String str2 = new String("geeksforgeeks");
//         // String str3 = new String("astha");
 

//         // System.out.println(str1.compareTo(str2)); //s1==s2 ==>0
//         // System.out.println(str1.compareTo(str3)); // s1-s3 
//         // System.out.println(str3.compareTo(str1));  //s3-s1

//         // String s1="geeksforgeeks";
//         // String s2="eks";
//         // System.out.println(s1.endsWith(s2));

//         StringBuffer sb1 = new StringBuffer("Hello ");
//         sb1.insert(1, "Java");
//         System.out.println(sb1);
       
//         StringBuffer sb2 = new StringBuffer("Hello");
// 		sb2.replace(1, 4, "Java");
// 		System.out.println(sb2);

//         StringBuffer sb3 = new StringBuffer("Hello");
//         sb3.delete(1, 3);
//         System.out.println(sb3);

//         StringBuffer sb5 = new StringBuffer("Hello");
// 		sb5.reverse();
// 		System.out.println(sb5);

// 	}

// }
//
// public class java{
//     public static void main(String args[])
//     {
//         Scanner scan = new Scanner (System.in);
//         int num=scan=scan.nextInt();
//         String str[]=new int[num];
//     }
// }



 //--------------------------------------------METHODS------------------------------

// import java.util.Arrays;

// public class java{
//     public static void main(String args[])
//     {
//         System.out.println(add1(3,4)); 
//         add2(3,4);
//         str();

//         // System.out.println(CEO("LOKESH"));  error will be so because function can't return any data type
//         int arr[]={1,2,3,1,1};
//         System.out.println(arr);
//         change(arr);
//         System.out.println(Arrays.toString(arr));


//     }
//     static int add1(int a,int b)
//     {
//         return a+b;
//     }
//     static void add2(int a,int b)
//     { 
//         System.out.println(add1(a,b));
//     }
//     static void str()
//     {
//         System.out.println("HII MY SELF LOKESH CEO OF..TED_TALKS.. IF YOU ARE WORK SO HARD IN A COMPANY YOUR THE NEXT CEO");
//     }
//     static void CEO(String str)
//     {
//         str="ARUN";
//     }
//     static void change(int arr[])
//     {
//         arr[0]=100;
//     }    
// }

 

// public class java{
//     static int num=10;
//     public static void main(String args[]) 
//     {
//         System.out.println(num);
//         int num=100; //this part of decluration only use in this block 
//         System.out.println(num);
//         fun();
//     }
//     static void fun()
//     {
//         System.out.println(num);
//     }
// }

// import java.util.Arrays;
// public class java{
//     public static void main(String args[])
//     {
//         fun(1,2,4,6,7,7,4,2,32);

//         mfun(1,2,"lokesh ","jayaseelan ","dinesh ");
//     }
//     static void fun(int ...num)
//     {
//         System.out.println(Arrays.toString(num));
//     }
//     static void mfun(int a,int b, String ...str)
//     {
//         System.out.printf("Two values are %d %d\n",a,b);
//         System.out.println(Arrays.toString(str));
//     }
// }
//method overloading
// public class java{
//     public static void main(String args[])
//     {
//         System.out.println(add(1,1));
//         System.out.println(add(1,1,1,1));
//     }
//     static int add(int a,int b)
//     {
//         return a+b;
//     }
//     static int add(int a,int b,int c,int d)
//     {
//         return a+b+c+d;
//     }
// }


//----------------------------------------------------DSA---------------------------------------------------
 //--------------------------------------------ARRAY AND ARRAYLIST------------------------------

 /* 
import java.util.ArrayList;
import java.util.Arrays;

public class java{
    public static void main(String args[])
    {
        int arr[]={12,32,3,43,1};   
        ArrayList <Integer> list_arr = new ArrayList<Integer>();
        list_arr.add(15);
        list_arr.add(212);
        list_arr.add(1212);
        list_arr.add(21);
        list_arr.add(143);
        list_arr.add(2134);
        list_arr.add(1431);
        list_arr.add(221);
        System.out.println(Arrays.toString(arr)); //ARRAY

        System.out.println(list_arr); //ARRAYLIST

        System.out.println(list_arr.contains(23)); //ARRAYLIST

        list_arr.set(0,143);
        System.out.println(list_arr); 

        list_arr.remove(0);
        System.out.println(list_arr); 

        System.out.println(list_arr.get(0)); 


    }
}

*/
// public class java{
//     public static void main(String args[])
//     {
//         int arr[]={2,3,5,9,14,15,16,18};
//         int target=2;
//         int s=0,e=arr.length-1;
//         while (s<e) {
//             int mid=s+(e-s)/2;
//             if(arr[mid]>target)
//             {
//                 e=mid;
//             }
//             else
//             {
//                 s=mid+1;
//             }
//         }
//         System.out.println(arr[s]);
//     }
// }


//linear search
/* 
public class java{
    public static void main(String args[])
    {
        int arr[]={23,23,4,3,3451,1245135,1345,1435,13451};
        int target=23,flag=0;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]==target)
            {
                flag=1;
                break;
            }
        }
        if(flag==1)
        {
             System.out.println("target element present in the array");
            
        }
        else
        {
           System.out.print("target element is not present in the array");
        }
    }
}
*/
//binary search
/*
public class java{
    public static void main(String args[])
    {
        int arr[]={23,43,65,67,67,67,245,350,360};
        // int arr[]={360,350,245,67,67,67,65,43,23};
        int target=67,start=0,end=arr.length-1;
        int flag=0;
        if(arr[0]<arr[arr.length-1])
        {
            while(start<=end)
            {
                int mid=start+(end-start)/2;
                if(arr[mid]>target)
                {
                    end=mid-1;
                }
                else if(arr[mid]<target)
                {
                    start=mid+1;
                }
                else
                {
                    if(arr[mid]==target)
                    {
                        flag=1;
                        break;
                    }
                }
            }
            System.out.println((flag==1)?"PRESENT":"NOT_PRESENT");
       }
       else
       {
             while(start<=end)
            {
                int mid=start+(end-start)/2;
                if(arr[mid]<target)
                {
                    end=mid-1;
                }
                else if(arr[mid]>target)
                {
                    start=mid+1;
                }
                else
                {
                    if(arr[mid]==target)
                    {
                        flag=1;
                        break;
                    }
                }
            }
            System.out.println((flag==1)?"PRESENT":"NOT_PRESENT");
       }
    }
}
*/



///bubble sort
/* 
public class java{
    public static void main(String args[])
    {
        int arr[]={2,3,32,32,144,1,16,18};
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr.length-1;j++)
            {
                if(arr[j]>arr[j+1])
                {
                    int temp=arr[j];
                    arr[j]=arr[j+1];
                    arr[j+1]=temp;
                }
            }
        }
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
}
*/

//selection sort;
/*
public class java{
    public static void main(String args[])
    {
        int arr[]={2,3,32,32,144,1,16,18};
        for(int i=0;i<arr.length;i++)
        {
            int lastindex=arr.length-1-i;
            int maxindex=max(arr,0,lastindex);
            swap(arr,maxindex,lastindex);
        }
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
    static int max(int arr[],int findex,int lindex)
    {
        int max=findex;
        for(int j=findex;j<=lindex;j++)
        {
            if(arr[max]>arr[j])
            {
                max=j;
            }
            
        }
        return max;
    }
    static void swap(int arr[],int s,int e)
    {
        int temp=arr[s];
        arr[s]=arr[e];
        arr[e]=temp;
    }
}
*/

//insertion sorting
/* 
public class java
{
    public static void main(String args[])
    {
        int arr[]={12,323,2,2425,-24,2442,4};
        for(int i=0;i<arr.length-1;i++)
        {
            for(int j=i+1;j>0;j--)
            {
                if(arr[j]<arr[j-1])
                {
                    swap(arr, j, j-1); 
                }
                else
                {
                    break;
                }
            }
            for(int k=0;k<=i+1;k++)
            {
                System.out.print(arr[k]+" ");
            }
            System.out.println();
        }
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
    static void swap(int arr[],int s,int e)
    {
        int temp=arr[s];
        arr[s]=arr[e];
        arr[e]=temp;
    }
}
*/


//cycle sort
/*
public class java
{
    public static void main(String args[])
    {
        int num[]={3,5,2,1,4};
        int size=5;
        for(int i=0;i<size;)
        {
            int index=num[i]-1; // if number is start with 0 so did't put a -1 beacuse 0 start from the index 0
            if(num[i]!=num[index])
            {
                swap(num,i,index);
            }
            else
            {
                i++;
            }
        }
        for(int i=0;i<size;i++)
        {
            System.out.print(num[i]+" ");
        }
    }
    static void swap(int arr[],int s,int e)
    {
        int temp=arr[s];
        arr[s]=arr[e];
        arr[e]=temp;
    }
}
*/

//String and StringBuffer
/*
    1.mutable seq. of charractors
    2.efficient
    3.thread safe
 */
// public class java
// {
//     public static void main(String args[])
//     {
        // StringBuffer sb = new StringBuffer();
        // String str="LOKESH";
        // sb.append(str);
        // String temp = sb.reverse().toString();
        // System.out.println(temp);

        // StringBuffer sb1 = new StringBuffer();
        // StringBuffer sb2 = new StringBuffer("LOKESH");
        // StringBuffer sb3 = new StringBuffer(2);
        // sb3.append("LOKESH Jddd ddddd dd");
        // System.out.println(sb3);

        // StringBuffer sb4 = new StringBuffer();
        // System.out.println(sb4.capacity());
        // sb4.append("LOKESH ");
        // System.out.println(sb4);

        // sb4.insert(6," Jayaseelan");
        // System.out.println(sb4);

        // sb4.replace(6, 17," JAYASEELAN");
        // System.out.println(sb4);

        // sb4.delete(6, 17);
        // System.out.println(sb4);

        // sb4.reverse();
        // System.out.println(sb4);

        // System.out.println(sb4.replaceAll("",""));

//     }
// }
 
// import java.util.*;
// public class java
// {
//     public static void main(String args[])
//     {
//         Scanner scan = new Scanner(System.in);
//         int n=scan.nextInt();
//         scan.nextLine();
//         for(int i=0;i<n;i++)
//         {
//             int sum=0;
//             while(scan.hasNextLine())
//             {
//                 sum=sum*10+scan.nextInt();
//             }
//             System.out.println(sum);
//         }
//     }
// }



// import java.util.Arrays;
// import java.util.Scanner;

// public class oops {
//     public static void main (String agrs[])
//     {
        // If str1 is lexicographically less than str2, the result is a negative integer.
        // If str1 is lexicographically greater than str2, the result is a positive integer.
        // If both strings are equal, the result is 0.
        // String str1 = "apple";
        // String str2 = "kkkkk";
        // int result = str1.compareTo(str2);
        // System.out.println("Comparison result: " + result);


        // String sentence = "Java is powerful and Java is popular";
        // String replaced = sentence.replaceFirst("Java", "Python");
        // System.out.println("After replacing first occurrence: " + replaced);

        // String sentence = "Java123 is fun456!";
        // String replaced = sentence.replaceAll("\\d", "");
        // System.out.println("After removing digits: " + replaced);

//         String[] words = {"Java", "is", "fun"};
// String sentence = String.join("-", words);
// System.out.println("Joined sentence: " + sentence);

// String fileName = "document.txt";
// boolean startsWithDoc = fileName.toLowerCase().startsWith("joc");
// boolean endsWithTxt = fileName.toLowerCase().endsWith(".txt");
// System.out.println("Starts with 'doc' (case-insensitive): " + startsWithDoc);
// System.out.println("Ends with '.txt' (case-insensitive): " + endsWithTxt);


// String emptyOrWhitespace = "   ";
// boolean isBlank = emptyOrWhitespace.isBlank();
// System.out.println("Is the string blank? " + isBlank);

// String text = "Hello";
// int codePoint = text.codePointAt(1);
// System.out.println("Code point at index 1: " + codePoint);

// String text = "Hello";
// int codePoints = text.codePointCount(2, text.length());
// System.out.println("Number of code points: " + codePoints);


// String paddedString = "   Hello, World!   ";
// String strippedString = paddedString.strip();
// System.out.println("Stripped string: " + strippedString);


// String paddedString = "   Hello, World!   ";
// String strippedLeading = paddedString.stripLeading();
// String strippedTrailing = paddedString.stripTrailing();
// System.out.println("Stripped leading: " + strippedLeading);
// System.out.println("Stripped trailing: " + strippedTrailing);


// String indentedText = "Hello\nWorld";
// String indented = indentedText.indent(4);
// System.out.println("Indented text:\n" + indented);

// String str4 = "789";
// Scanner scanner = new Scanner(str4);
// int num4 = scanner.nextInt();
// System.out.println("Converted int: " + num4);

// int[] array = new int[5];
// Arrays.fill(array, 7);
// System.out.println(Arrays.toString(array));

// }}

/*

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class java {
    public static void main(String[] args) {
         int[] arr = {5, 2, 8, 10, 1};
        
        // 1. Printing the array
        System.out.println("Original Array: " + Arrays.toString(arr));
        
        // 2. Sorting the array
        Arrays.sort(arr);
        System.out.println("Sorted Array: " + Arrays.toString(arr));
        
        // 3. Binary search in the array
        int index = Arrays.binarySearch(arr, 8);
        System.out.println("Index of 8: " + index);
        
        // 4. Filling the array with a specific value
        Arrays.fill(arr, 0);
        System.out.println("Filled Array: " + Arrays.toString(arr));
        
        // 5. Copying the array
        int[] copyArr = Arrays.copyOf(arr, arr.length);
        System.out.println("Copied Array: " + Arrays.toString(copyArr));
        
        // 6. Checking equality of arrays
        boolean isEqual = Arrays.equals(arr, copyArr);
        System.out.println("Arrays are equal: " + isEqual);
        
        // 7. Finding maximum value in the array
        int max = Arrays.stream(arr).max().getAsInt();
        System.out.println("Maximum value: " + max);
        
        // 8. Finding minimum value in the array
        int min = Arrays.stream(arr).min().getAsInt();
        System.out.println("Minimum value: " + min);

          // 9. Checking if array contains a specific value
          boolean containsValue = Arrays.stream(arr).anyMatch(x -> x == 8);
          System.out.println("Array contains 8: " + containsValue);
          
          // 10. Getting the sum of all elements in the array
          int sum = Arrays.stream(arr).sum();
          System.out.println("Sum of elements: " + sum);
          
          // 11. Calculating the average of all elements in the array
          double average = Arrays.stream(arr).average().getAsDouble();
          System.out.println("Average of elements: " + average);
          
          // 12. Checking if the array is empty
          boolean isEmpty = arr.length == 0;
          System.out.println("Array is empty: " + isEmpty);
          
          // 13. Reversing the array
          for (int i = 0; i < arr.length / 2; i++) {
              int temp = arr[i];
              arr[i] = arr[arr.length - 1 - i];
              arr[arr.length - 1 - i] = temp;
          }
          System.out.println("Reversed Array: " + Arrays.toString(arr));
          
          // 14. Finding the index of the first occurrence of a specific value
          int firstIndex = Arrays.asList(arr).indexOf(8);
          System.out.println("First occurrence of 8: " + firstIndex);
          
          // 15. Finding the index of the last occurrence of a specific value
          int lastIndex = Arrays.asList(arr).lastIndexOf(8);
          System.out.println("Last occurrence of 8: " + lastIndex);

           // 16. Converting array to a string representation
        String arrString = Arrays.toString(arr);
        System.out.println("Array as String: " + arrString);
        
        // 17. Checking if two arrays are equal (element-wise)
        int[] anotherArr = {5, 2, 8, 10, 1};
        boolean areEqual = Arrays.equals(arr, anotherArr);
        System.out.println("Arrays are equal: " + areEqual);
        
        // 18. Converting array to a list
        List<Integer> list = Arrays.asList(Arrays.stream(arr).boxed().toArray(Integer[]::new));
        System.out.println("Array as List: " + list);
        
        // 19. Removing specific value from array
        int[] newArr = Arrays.stream(arr).filter(x -> x != 8).toArray();
        System.out.println("Array after removing 8: " + Arrays.toString(newArr));
        
        // 20. Shuffling the array
        Collections.shuffle(Arrays.asList(arr));
        System.out.println("Shuffled Array: " + Arrays.toString(arr));


             // 21. Checking if array contains only a specific value
             boolean containsOnly = Arrays.stream(arr).allMatch(x -> x == 8);
             System.out.println("Array contains only 8: " + containsOnly);
             
             // 22. Checking if array contains any value matching a predicate
             boolean containsAny = Arrays.stream(arr).anyMatch(x -> x == 8);
             System.out.println("Array contains any 8: " + containsAny);
             
             // 23. Finding the number of occurrences of a specific value in the array
             long count = Arrays.stream(arr).filter(x -> x == 8).count();
             System.out.println("Number of occurrences of 8: " + count);
             
             // 24. Converting array to lowercase (assuming elements are strings)
             String[] stringArr = {"Hello", "World"};
             String[] lowerArr = Arrays.stream(stringArr).map(String::toLowerCase).toArray(String[]::new);
             System.out.println("Lowercase Array: " + Arrays.toString(lowerArr));
             
             // 25. Finding the distinct elements in the array
             int[] duplicateArr = {1, 2, 3, 2, 4, 1, 5};
             int[] distinctArr = Arrays.stream(duplicateArr).distinct().toArray();
             System.out.println("Distinct Array: " + Arrays.toString(distinctArr));


             // 26. Sorting array in reverse order
            Arrays.sort(arr, Collections.reverseOrder());
            System.out.println("Reverse Sorted Array: " + Arrays.toString(arr));

            // 27. Checking if array is sorted in ascending order
            boolean isSortedAsc = Arrays.stream(arr).sorted().equals(Arrays.asList(arr));
            System.out.println("Array is sorted in ascending order: " + isSortedAsc);

            // 28. Checking if array is sorted in descending order
            boolean isSortedDesc = Arrays.stream(arr).sorted(Collections.reverseOrder()).equals(Arrays.asList(arr));
            System.out.println("Array is sorted in descending order: " + isSortedDesc);

            // 29. Rotating array by a specific distance
            Collections.rotate(Arrays.asList(arr), 2);
            System.out.println("Rotated Array: " + Arrays.toString(arr));

            // 30. Swapping elements at given indices
            Collections.swap(Arrays.asList(arr), 0, 4);
            System.out.println("Array after swapping: " + Arrays.toString(arr));

            // 31. Reversing elements in a portion of the array
            Collections.reverse(Arrays.asList(arr).subList(0, 3));
            System.out.println("Array after partial reversal: " + Arrays.toString(arr));

            // 32. Filling a portion of the array with a specific value
            Arrays.fill(arr, 1, 3, 99);
            System.out.println("Array after filling: " + Arrays.toString(arr));

            // 33. Shuffling elements in the array
            List<int[]> list = Arrays.asList(arr);
            Collections.shuffle(list);
            System.out.println("Shuffled Array: " + list);

            // 34. Rotating array left by a specific distance
            Collections.rotate(list, -2);
            System.out.println("Left-rotated Array: " + list);

            // 35. Swapping elements between two arrays
            Integer[] anotherArr = {6, 7, 8};
            Collections.swap(Arrays.asList(arr), 1, 1);
            Collections.copy(Arrays.asList(arr), Arrays.asList(anotherArr));
            System.out.println("Swapped Array: " + Arrays.toString(arr));

            
            // 36. Finding the index of the maximum element in the array
            int maxIndex = Arrays.asList(arr).indexOf(Collections.max(Arrays.asList(arr)));
            System.out.println("Index of maximum element: " + maxIndex);

            // 37. Finding the index of the minimum element in the array
            int minIndex = Arrays.asList(arr).indexOf(Collections.min(Arrays.asList(arr)));
            System.out.println("Index of minimum element: " + minIndex);

            // 38. Checking if array contains only unique elements
            boolean allUnique = Arrays.stream(arr).distinct().count() == arr.length;
            System.out.println("Array contains only unique elements: " + allUnique);

            // 39. Checking if array contains a subsequence
            Integer[] subsequence = {8, 10};
            boolean containsSubsequence = Collections.indexOfSubList(Arrays.asList(arr), Arrays.asList(subsequence)) != -1;
            System.out.println("Array contains subsequence [8, 10]: " + containsSubsequence);

            // 40. Counting occurrences of each element in the array
            List<int[]> list = Arrays.asList(arr);
            for (Integer elem : list) {
                int count = Collections.frequency(list, elem);
                System.out.println("Element " + elem + " occurs " + count + " times.");
            }

            // 41. Removing all occurrences of a specific element from the array
            list.removeAll(Arrays.asList(8));
            System.out.println("Array after removing all occurrences of 8: " + list);

            // 42. Removing duplicates from the array
            list = Arrays.asList(arr);
            list.stream().distinct().forEach(System.out::println);

            // 43. Finding the median of the array
            Arrays.sort(arr);
            double median;
            if (arr.length % 2 == 0)
                median = (arr[arr.length / 2] + arr[arr.length / 2 - 1]) / 2.0;
            else
                median = arr[arr.length / 2];
            System.out.println("Median of the array: " + median);
            
        
    }
 }

 */



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//1.
/*
   .class is name group propreties and function or method and start with captial letter
   .creating own primitive data type
   .class is template of object (logical construct) car.blueprint
   .object is instances of class (physical reality) tesla,bmw,mg evey object contains different specifation
   .object occupied space in memory 
   .object contains three properties 
          1.state of object(value and it's datatype) 
          2.indentity of object(one object is different form other) 
          3.behavial of the object
   .object store in heap memory
   .references variable store in stack memory
 
class javaoops {
    public static void main(String[] args) {

        //datatype variable
        Student0 std1  = new Student0();
        // std1 -> std reference variable store in stack memory
        // new  -> creating object in heap at runtime
        // std1 is pointing to object on the heap memoery
        // compile time = dynamically memory allcation at runtime return a reference variable and reference store in std1
        // .dot as a separe
        // all the variable inside of object this are the instances
        System.out.println(std1.fname); // defult value
        System.out.println(std1.lname);
        System.out.println(std1.Age); 
        System.out.println(std1.gpa);

        Student0 std2  = new Student0();
        std2.fname="lokesh";
        std2.lname='j';
        std2.Age=19;
        std2.gpa=7.52f;
        System.out.println(std2.fname); // defult value
        System.out.println(std2.lname);
        System.out.println(std2.Age); 
        System.out.println(std2.gpa);

        // Student1 std3  = new Student1();
        //.by effcient way to passing the value by the using constructor
        //.creating object that time passing the value by the constructor  
        //.constructor basically defined as what happens we a object will created
        //.A constructor is a special method in a class that is called when an instance (object) of that class is created. 
        //.Its main purpose is to initialize the object's attributes. 
        // Definition
        // Name: It has the same name as the class (in languages like C++ and Java) or a special name (e.g., __init__ in Python).
        // Purpose: Initialize the object's state.
        // No return type: Constructors do not have a return type, not even void.
         Student1 std3  = new Student1("lokesh",'j',19,7.54f);
         System.out.println(std3.fname);
         System.out.println(std3.lname);
         System.out.println(std3.Age);
         System.out.println(std3.gpa);
        // new Student1("lokes",'j',19,7.54f); is special type of function
         std3.greeting();

         Student1 std4  = new Student1(std3);
         std4.greeting();

         Student1 std5  = new Student1();
         std5.greeting();
    }
} 
//create a class
class Student0
{
  String fname; // --> String is class becuase of starting form captial letter
  char lname;
  int Age;
  float gpa=9.0f;
}
class Student1
{
    String fname; // --> String is class becuase of starting form captial letter
    char lname;
    int Age;
    float gpa=9.0f;
   
    // 1.default constructor 
    Student1() 
    {
        // this.fname="lokesh";
        // this.lname='j';
        // this.Age=19;
        // this.gpa=8.8f;
        //this is a constructor call form another construcor
        this("lok",'j',10,0.1f);
    }

    //2.parametic constructor
    Student1(String str,char ch,int age,float gpa) 
    {
      // we need one word to access every object that is (this keyword)
      // this replace of std3
      this.fname=str;
      this.lname=ch;
      this.Age=age;
      this.gpa=gpa;
    }
    void greeting()
    {
      System.out.println("hi! "+this.fname+" welcome ted home ");
    }
    //3.(copy constructor) by passing other std in constructor
    Student1(Student1 other) 
    {
      // we need one word to access every object that is (this keyword)
      // this replace of std3
      this.fname=other.fname;
      this.lname=other.lname;
      this.Age=other.Age;
      this.gpa=other.gpa;
    }
}
*/
//-------------------------------------------------------------------------------------------------------------
//2.
/*
public class javaoops {
  public static void main(String[] args) {
  
        1.data type:
             .Data Type: Also known as primitive data types, these are the
                 basic types of data built into a programming language. 
             .Examples include int, char, float, etc.
             .Data Type: Directly stores the value.
             .value will passing only value.call by value not a reference
             
        2.Wrapper class
            .A Wrapper class in Java is a class whose object wraps or contains primitive data types.
               When we create an object to a wrapper class, 
            .Wrapper Class: Stores the value as an object, providing methods to
               manipulate the data and allowing it to be used in collections like ArrayList, HashMap, etc.
            .value will passing by a reference
  
    //1.primitive data types
    int a=10;
    int b=1;
    swap1(a, b);
    System.out.println(a+" "+b);

    //2.Wrapper Class:
    Integer A=10;
    Integer B=1;
    swap2(A, B);
    System.out.println(A+" "+B);// value will not swap because of Integer class as a final
  }
  static void swap1(int a,int b)
  {
    int temp=a;
    a=b;
    b=temp;
  }
  static void swap2(Integer a,Integer b)
  {
    Integer temp=a;
    a=b;
    b=temp;
  }
}
*/
//---------------------------------------------------------------------------
//3.final value will not be modified (cannot assign a value to final variable
//  only for primitive data type not a wrapper class  
/*
public class javaoops {
  public static void main(String[] args) {
    final int a=1; 
    // a++;
    System.out.println(a);
  }
}
*/
//---------------------------------------------------------------------
//4.
/*
    
    In Java, the static keyword is used to indicate that a member (variable or method) belongs to the class itself,
    rather than to any specific instance of the class. This means that the static member is shared among all instances of the class.
    Static Variables
    Definition: A variable declared with the static keyword.
    Usage: It is shared across all instances of the class.
*/
//override
/*
public class javaoops {
  public static void main(String[] args) {
     function fun = new function();
     System.out.println(fun.toString());
  }
}
class function
{
    String name="lokesh";
     @Override
     public String toString()
     {
      return name;
     }
}  
*/
//--------------------------------------------------------------------------------
//5.oops properties:
/* 
      i)  inheritance 
      ii) polymorisum
      iii)encapsulation
      iv) abstration
*/
//
/*
      Definition:
      .Inheritance is a fundamental concept in Java that allows one class (the subclass or derived class) to inherit
       the fields and methods of another class (the superclass or base class).
       This promotes code reuse and establishes a natural hierarchy between classes. 
      .child class is inheritance properties from the base class
      .using inheritance by the keyword as a extends 
*/
//--------------------------------------------------------------------------------------
//6.types of inheritance
    //  i) single inheritance
    //  ii) multilevel inheritance
    //  iii) multiple inheritance (multiple parent class inheritance with single child class)(but not support in java can we use in interface)
    //  iv) hierarical inheritance (parent class inheritance with many chlid class)
    //  v)  hybrid inheritance (combination of single inheritance and multiple inheritance)(but not support in java can we use in interface)

//-----------------------------i)single inheritance-------------------------------------------
/*
class Box
{
  int l,h,w;
  //1.defalut constructor
  Box()
  {
    this.l=1;
    this.h=1;
    this.w=1;
    System.out.println("defalut constructor");
  }
  //2.paramaric constructor
  Box(int num1,int num2,int num3)
  {
    this.l=num1;
    this.h=num2;
    this.w=num3;
    System.out.println("paramaric constructor");
  }
  //3.copy constructor
  Box(Box temp)
  {
    this.l=temp.l;
    this.h=temp.h;
    this.w=temp.w;
    System.out.println("copy constructor");
  }
  public void display()
  {
    System.out.println(this.l+" "+this.h+" "+this.w);    
  }
}
class Boxweight extends Box
{
  int weight;
  Boxweight()
  {
      this.weight=123;
  }
  Boxweight(int l,int h,int w)
  {
    // super keyword is use for call the parent class constructor
    // used to initialise values present in parent class
    super(l,h,w);
    this.weight=w;
  }  
  Boxweight(Box temp)
  {
    // super keyword is use for call the parent class constructor
    // used to initialise values present in parent class
    super(temp);
    this.weight=w;
  }
}
public class javaoops {
  public static void main(String[] args) {

    System.out.println("parent class");
    Box obj1 = new Box();
    System.out.println(obj1.h+" "+obj1.l+" "+obj1.w);

    Box obj2 = new Box(1,2,3);
    System.out.println(obj2.h+" "+obj2.l+" "+obj2.w);

    Box obj3 = new Box(obj2);
    System.out.println(obj3.h+" "+obj3.l+" "+obj3.w);

    System.out.println("child class");
    Boxweight obj4 = new Boxweight();
    System.out.println(obj4.h+" "+obj4.l+" "+obj4.w+" "+obj4.weight);


  }
}
*/
//-----------------------------------------------------------------------------------------------------
//polymorphism:
// Polymorphism in Java allows one method or object to take many forms, enabling the
// same operation to behave differently on different classes through method overloading and overriding.
// Key Points:
// Method Overloading: Multiple methods with the same name but different parameters within the same class.in  compile time
// Method Overriding: A subclass provides a specific implementation of a method that is already defined in its superclass.

//hiracical
// class Shapes 
// {
//    void area()
//    {
//      System.out.println("i am Shapes");
//    }
// }
// class Circle extends Shapes
// {
//   void area()
//   {
//     System.out.println("i am Circle pi*r*r");
//   }
// }
// class Triangle extends Shapes
// {
//   void area()
//   {
//     System.out.println("i am 0.5*h*b ");
//   }  
// }
// class Square extends Shapes
// {
//   void area()
//   {
//     System.out.println("i am Square of side");
//   }  
// }
// public class javaoops {
//   public static void main(String[] args) {
//     Shapes obj1 = new Shapes();
//     Circle obj2 = new Circle();
//     Shapes obj3 = new Square();
//     obj3.area();
//   }
// }
//-----------Method Overloading (compile time or static polymorphism)----------
/* 
class Box
{
  int l,h,w;
  //1.defalut constructor
  Box()
  {
    this.l=1;
    this.h=1;
    this.w=1;
    System.out.println("defalut constructor");
  }
  //2.paramaric constructor
  Box(int num1,int num2,int num3)
  {
    this.l=num1;
    this.h=num2;
    this.w=num3;
    System.out.println("paramaric constructor");
  }
  //3.copy constructor
  Box(Box temp)
  {
    this.l=temp.l;
    this.h=temp.h;
    this.w=temp.w;
    System.out.println("copy constructor");
  }
  public void display()
  {
    System.out.println(this.l+" "+this.h+" "+this.w);    
  }
}
public class javaoops {
  public static void main(String[] args) {
    Box obj1 = new Box();
    System.out.println(obj1.h+" "+obj1.l+" "+obj1.w);

    Box obj2 = new Box(1,2,3);
    System.out.println(obj2.h+" "+obj2.l+" "+obj2.w);

    Box obj3 = new Box(obj2);
    System.out.println(obj3.h+" "+obj3.l+" "+obj3.w);
  }
}
*/
//-----------Method Override (run time or dyanamic polymorphism)----------
/*
class Shapes
{
  void area()
  {
    System.out.println("hi am shape");
  }
}
class Circle extends Shapes
{
  @Override
  void area()
  {
    System.out.println("hi am shape");
  }
}
public class javaoops {
  public static void main(String[] args) {
    Circle obj = new Circle();
    obj.area();
  }
}
*/

//--------------------------------------------------------------------------------






//--------------------------------------------------------------------------------------------------------------------------------
/*
        linear search:
            time complexity:
                best case: o(1)
                worst case: o(n)
            space complexity:
                O(1)->linear search does not require any additional space apart from a few variables for iteration and comparison
*/
/*
import java.util.Arrays;
import java.util.Scanner;
public class java1 {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int size=scan.nextInt(),arr[]=new int[size];
        int max=Integer.MIN_VALUE,min=Integer.MAX_VALUE;
        for(int i=0;i<size;i++)
        {
            arr[i]=scan.nextInt();
        }
        System.out.println(min(arr,Integer.MAX_VALUE));
        System.out.println(max(arr,Integer.MIN_VALUE));
        System.out.println(find(arr,777,-1));
        
        int arr2[][]=
        {
            {12,3,4,5},
            {123,423,435,52,},
            {1235,5,2,67,8}
        };
       int temp[]=d2arr(arr2, 435);
       System.out.println(Arrays.toString(temp));
    }
    static int min(int arr[],int mini)
    {
        for(int i=0;i<arr.length;i++)
        {
            if(mini>arr[i])
            {
                mini=arr[i];
            }
        }
        return mini;
    }
    static int max(int arr[],int maxi)
    {
        for(int i=0;i<arr.length;i++)
        {
            if(maxi<arr[i])
            {
                maxi=arr[i];
            }
        }
        return maxi;
    }
    static int find(int arr[],int target,int key)
    {
        for(int i=0;i<arr.length;i++)
        {
            if(target==arr[i])
            {
                key=i;
                break;
            }
        }
        return key;
    }
    static int[] d2arr(int arr[][],int target)
    {
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr[0].length;j++)
            {
                if(arr[i][j]==target)
                {
                    return new int[]{i,j};
                }
            }
        }
        return new int[]{-1,-1};
    }

}
*/
//------------------------------------------------------------------------------------------------------
/*
        binary search:
            binary search should be a sort array.
            time complexity:
                o(log n)
            space complexity:
*/
//1.
/* 
public class sohomain {
    public static void main(String[] args) {
        int arr1[]={1,2,3,4,5,6,7};
        int s1=0,e1=arr1.length-1,target1=2;
        System.out.println(ass(arr1, s1, e1, target1));

        int arr2[]={7,8,5,4,3,2,1};
        int s2=0,e2=arr2.length-1,target2=5;
        System.out.println(des(arr2, s2, e2, target2));
    }
    static int ass(int arr[],int s,int e,int target)
    {
        while (s<=e)
        {
            int mid=s+(e-s)/2;
            if(arr[mid]>target)
            {
                e=mid-1;
            }    
            else if(arr[mid]<target)
            { 
                s=mid+1;
            }
            else
            {
                return mid;
            }
        }
        return -1;
    }
    static int des(int arr[],int s,int e,int target)
    {
        while (s<=e)
        {
            int mid=s+(e-s)/2;
            if(arr[mid]>target)
            {
                s=mid+1;
            }    
            else if(arr[mid]<target)
            { 
                e=mid-1;
            }
            else
            {
                return mid;
            }
        }
        return -1;
    }
}
*/
//leedcode 162,852
//-----------------------------------------------------------------------------------------------------------
//bubble sort:
/*
     space complexity : o(1)
     time complexity  :
          best case   : o(n^2) 
          worst case  : o(n^2)
 
public class sohomain {
    public static void main(String[] args) {
        int arr[]={1,2,3,1,2,3,1};
        for(int i=0;i<arr.length-1;i++)
        {
            for(int j=0;j<arr.length-1-i;j++)
            {
                if(arr[j]>arr[j+1])
                {
                    int temp=arr[j];
                    arr[j]=arr[j+1];
                    arr[j+1]=temp;
                }
            }
        }
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
}
*/

//-----------------------------------------------------------------------------------------------
//selection sorting:
/*
     space complexity : o(1)
     time complexity  :
          best case   : o(n^2) 
          worst case  : o(n^2)
 
public class sohomain {
    public static void main(String[] args) {
        int arr[]={1,2,1,1,2,312,23,1};
        for(int i=0;i<arr.length;i++)
        {
            int lastindex=arr.length-1-i;
            int max=0;
            for(int j=0;j<=lastindex;j++)
            {
                if(arr[max]<arr[j])
                {
                    max=j;
                }
            }
            int temp=arr[max];
            arr[max]=arr[lastindex];
            arr[lastindex]=temp;
        }
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
}
*/
//-----------------------------------------------------------------------------------------------
//inselection sorting:
/*
     space complexity : o(1)
     time complexity  :
          best case   : o(n^2) 
          worst case  : o(n^2)

public class sohomain {
    public static void main(String[] args) {
        int arr[]={4,5,1,2,3};
        for(int i=0;i<arr.length-1;i++)
        {
            for(int j=i+1;j>0;j--)
            {
                if(arr[j]<arr[j-1])
                {
                    int temp=arr[j];
                    arr[j]=arr[j-1];
                    arr[j-1]=temp;
                }
                else
                {
                    break;
                }
            }
        }
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
}
*/
//------------------------------------------------------------------------------------------------
//cycle sort:
/*
     only for 0 to n numbers
 */
//1.
/*
public class sohomain {
    public static void main(String[] args) {
        int arr[]={1,4,2,5,3};
        int i=0;
        while(i<arr.length)
        {
            int index = arr[i]-1;
            if(arr[i]!=arr[index])
            {
                int temp=arr[i];
                arr[i]=arr[index];
                arr[index]=temp;
            }
            else
            {
                i++;
            }
        }
        for(i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
}

//2.find missing number in 0 to n
public class sohomain {
    public static void main(String[] args) {
        int arr[]={4,1,0,3,5,6,2,8};
        int i=0;
        while(i<arr.length)
        {
            int index=arr[i];
            if(arr[i]<arr.length&&arr[index]!=arr[i])
            {
                int temp=arr[index];
                arr[index]=arr[i];
                arr[i]=temp;
            }
            else
            {
                i++;
            }
        }
        for(i=0;i<arr.length;i++)
        {
            if(arr[i]!=i)
            {
                System.out.print(i);
                return;
            }
        }
        System.out.print(arr.length);
    }
}
*/
//-----------------------------------------------------------------------------------------------
//Merge Sort
/*
     space complexity : o(n)
     time complexity  :
          best case   : O(n log n) 
          worst case  : O(n log n) Guaranteed O(n log n) performance, good for large datasets and Stable
*/
//Merge Sort-->divide and merge
/* 
public class sohomain {
    public static void main(String[] args) {
        int arr[] = {9, 7, 5, 2, 14, 3};
        sort(arr, 0, arr.length - 1);
        for(int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
    }

    static void sort(int arr[], int l, int r) {
        if (l < r) {
            int mid = (l + r) / 2;
            sort(arr, l, mid);
            sort(arr, mid + 1, r);
            merge(arr, l, mid, r);
        }
    }

    static void merge(int arr[], int l, int mid, int r) {
        int L = mid - l + 1;
        int R = r - mid;

        int Leftarr[] = new int[L];
        int Rightarr[] = new int[R];

        for (int i = 0; i < L; i++) {
            Leftarr[i] = arr[l + i];
        }
        for (int j = 0; j < R; j++) {
            Rightarr[j] = arr[mid + 1 + j];
        }

        int i = 0, j = 0, k = l;
        while (i < L && j < R) {
            if (Leftarr[i] <= Rightarr[j]) {
                arr[k] = Leftarr[i];
                i++;
            } else {
                arr[k] = Rightarr[j];
                j++;
            }
            k++;
        }

        while (i < L) {
            arr[k] = Leftarr[i];
            i++;
            k++;
        }

        while (j < R) {
            arr[k] = Rightarr[j];
            j++;
            k++;
        }
    }
}
*/
//---------------------------------------Recursion---------------------------------------------------------------------

//1.fibo
/*
public class sohomain {
    public static void main(String[] args) 
    {
        System.out.println(fibo(4));
    }  
    static int fibo(int num)
    {
        if(num<2)
        {
            return num;
        }
        return fibo(num-1)+fibo(num- 2);
    }
}
*/
//2.binary search
/*
public class sohomain {
    public static void main(String[] args) {
        int arr[]={1,2,3,4,5,6,12};
        int s=0,e=arr.length,target=2;
        System.out.print(binarysearch(arr,target,s,e));
    }
    static int binarysearch(int arr[],int target,int s,int e)
    {
        if(s>e)
        {
            return -1;
        }
        int mid=s+(e-s)/2;
        if(arr[mid]<target)
        {
            return binarysearch(arr, target, mid+1, e);
        }
        else if(arr[mid]==target)
        {
            return mid;
        }
           return binarysearch(arr, target, s, mid-1);
    }
}
*/
//3.sorted or not
/*
    public class sohomain {
        public static void main(String[] args) {
            int arr[]={1,2,3,4,5,6,7};
            System.out.println(sorted(arr, 0));
        }
        static boolean sorted(int arr[],int index)
        {
            if(index==arr.length-1)
            {
                return true;
            }
            return arr[index]<arr[index+1] &&sorted(arr, index+1);
        }
    }
*/
//4.find index of target element:
/* 
    public class sohomain {
        public static void main(String[] args)
        {
            int arr[]={1,2,3,4,5,6,7};
            System.out.println(find(arr, 0,77));
        }
        static boolean find(int arr[],int index,int target)
        {
            if(index==arr.length)
            {
                return false;
            }
            return arr[index]==target || find(arr, index+1, target);
        }
    }
*/
//5.n to 1 and 1 to n
/*
    public class sohomain {
        public static void main(String[] args) {
            fn1(5);

            System.out.println();

            String str[]={"lokesh","loki","ted"};
            fn2(str, 0);
        }
        static void fn1(int num)
        {
            if(num<0)
            {
                return;
            }
            System.out.print(num+" ");
            fn1(num-1);
            System.out.print(num+" ");
        }
        static void fn2(String str[],int s)
        {
            if(s==str.length)
            {
                return;
            }
            System.out.print(str[s]+" ");
            fn2(str, s+1);
            System.out.print(str[s]+" ");
        }
        
    }
*/
//6.factorial  &  sum of digit & product of a digit
/*
public class sohomain {
    public static void main(String[] args) {

        //1.factorial
        System.out.println("1.factorial "+fn1(5));

        //2.sum of digit
        System.out.println("2.sum of digit "+fn2(1234));

        //3.product of a digit
        System.out.println("3.product of a digit "+fn3(1234));

        //4.reverse a number
        fn4(1234);
        System.out.println("4.reverse a number "+sum);

    }
    static int fn1(int num)
    {
        if(num<=1)
        {
            return num;
        }
        return num+fn1(num-1);
    }
    static int fn2(int num)
    {
        if(num==0)
        {
            return 0;
        }
        return (num%10)+fn2(num/10);
    }
    static int fn3(int num)
    {
        if(num==0)
        {
            return 1;
        }
        return (num%10)*fn3(num/10);
    }
    
    static int sum=0;
    static void fn4(int num)
    {
        if(num==0)
        {
            return;
        }
        sum=sum*10+num%10;
        fn4(num/10);
    }


}

*/
//--------------------------------------------------pattern------------------------------------------------------------------
//1.
/*
public class sohomain {
    public static void main(String[] args) {
        int num=5;
        for(int i=0;i<5;i++)
        {
            for(int j=0;j<5;j++)
            {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}
*/
//2.
/* 
public class sohomain {
    public static void main(String[] args) {
        int num=5;
        for(int i=0;i<5;i++)
        {
            for(int j=0;j<=i;j++)
            {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}
*/
//3.
/*
public class sohomain {
    public static void main(String[] args) {
        int num=5;
        for(int i=1;i<=5;i++)
        {
            for(int j=1;j<=i;j++)
            {
                System.out.print(j);
            }
            System.out.println();
        }
    }
}
*/
//4.
/* 
public class sohomain {
    public static void main(String[] args) {
        int num=5;
        for(int i=1;i<=5;i++)
        {
            for(int j=1;j<=i;j++)
            {
                System.out.print(i);
            }
            System.out.println();
        }
    }
}
*/
//5.
/*
public class sohomain {
    public static void main(String[] args) {
        int num=5;
        for(int i=0;i<5;i++)
        {
            for(int j=0;j<5-i;j++)
            {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}
*/
//6.
/* 
public class sohomain {
    public static void main(String[] args) {
        int num=5;
        for(int i=0;i<5;i++)
        {
            for(int j=1;j<=5-i;j++)
            {
                System.out.print(j);
            }
            System.out.println();
        }
    }
}
*/
//7.
/*
public class sohomain {
    public static void main(String[] args) {
        int num=5;
        for(int i=0;i<5;i++)
        {
            //space
            for(int j=0;j<num-1-i;j++)
            {
                System.out.print(" ");
            }
            //star
            for(int j=0;j<2*i+1;j++)
            {
                System.out.print("*");
            }
            // space
            for(int j=0;j<num-1-i;j++)
            {
                System.out.print(" ");
            }
            System.out.println();
        }
    }
}
*/
//8.
/*
public class sohomain {
    public static void main(String[] args) {
        int num=5;
        for(int i=0;i<5;i++)
        {
            //space
            for(int j=0;j<i;j++)
            {
                System.out.print(" ");
            }
            //star
            for(int j=0;j<(2*num)-(2*i+1);j++)
            {
                System.out.print("*");
            }
            // space
            for(int j=0;j<i;j++)
            {
                System.out.print(" ");
            }
            System.out.println();
        }
    }
}
*/
//10.
/*
public class sohomain {
    public static void main(String[] args) {
        int num=5;
        for(int i=1;i<=2*num-1;i++)
        {
            int end=i;
            if(i>num){end=(2*num)-i;}
            for(int j=1;j<=end;j++)
            {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}
*/
//11.
/*
public class sohomain {
    public static void main(String[] args) {
        int num=5,start=0;
        for(int i=0;i<num;i++)
        {
            if(i%2==0){start=1;}
            else{start=0;}
            for(int j=0;j<=i;j++)
            {
                System.out.print(start);
                start=1-start;
            }
            System.out.println();
        }
    }
}
*/
//12.
/* 
public class sohomain {

    public static void main(String[] args) {
        int num=4;
        for(int i=1;i<=num;i++)
        {
            for(int j=1;j<=i;j++)
            {
                System.out.print(j);
            }
            for(int j=i+1;j<=num*2-i;j++)
            {
                System.out.print(" ");
            }
            for(int j=i;j>=1;j--)
            {
                System.out.print(j);
            }
            System.out.println();
        }
    }
} 
*/

//13.
/* 
public class sohomain {

    public static void main(String[] args) {
        int num=5,temp=1;
        for(int i=1;i<=num;i++)
        {
            for(int j=1;j<=i;j++)
            {
                System.out.print(temp+++" ");
            }
            System.out.println();
        }
    }
} 
*/
//14.
/* 
public class sohomain {
    public static void main(String[] args) {
        int num=5;
        for(int i=0;i<num;i++)
        {
            for(int j=0;j<=i;j++)
            {
                System.out.print((char)(j+'A')+" ");
            }
            System.out.println();
        }
    }
}
*/
//15.
/* 
public class sohomain {
    public static void main(String[] args) {
        int num=5;
        for(int i=0;i<num;i++)
        {
            for(int j=0;j<num-i;j++)
            {
                System.out.print((char)(j+'A')+" ");
            }
            System.out.println();
        }
    }
}
*/
//16.
/* 
public class sohomain {
    public static void main(String[] args) {
        int num=5;
        for(int i=0;i<num;i++)
        {
            for(int j=0;j<=i;j++)
            {
                System.out.print((char)(i+'A')+" ");
            }
            System.out.println();
        }
    }
}
*/
//17.
/*
public class sohomain {
    public static void main(String[] args) {
        int num=5;
        for(int i=0;i<num;i++)
        {
            for(int j=0;j<num-i-1;j++)
            {
                System.out.print("-");
            }
            char ch='A';
            int breakpoint=(2*i+1)/2;
            for(int j=1;j<=(2*i+1);j++)
            {
                System.out.print(ch);
                if(j<=breakpoint){ch++;}
                else{ch--;}
            }
            System.out.println();
        }
    }
}
*/
//22.

//------------------------------------------basics math----------------------------------------------------------------------------------- 

//1.reverse integer
/*
class Solution {
    public int reverse(int x) {
        int sum=0;
        while(x!=0)
        {
            if(sum>Integer.MAX_VALUE/10||sum<Integer.MIN_VALUE/10)
            {
                return 0;
            }
            sum=sum*10+x%10;
            x=x/10;
        }
        return sum;
    }
}
*/
//2.Palindrome Number
/* 
class Solution {
    public boolean isPalindrome(int x) {
        int sum=0,num=x;
        if(x<0)
        {
            return false;
        }
        while(num>0)
        {
            sum=(sum*10)+(num%10);
            num/=10;
        }
        return (x==sum);
    }
}
*/
//3.largest element in a array
/*
class Compute {
    
    public int largest(int arr[], int n)
    {
        int max=arr[0];
        for(int i=0;i<n;i++)
        {
            if(arr[i]>max){max=arr[i];}
        }
        return max;
    }
}
*/
//4.second largest element in array
/*
class Solution {
    int print2largest(int arr[], int n) {
        int max1=max(arr);
        for(int i=0;i<n;i++)
        {
            if(max1==arr[i])
            {
                arr[i]=0;
            }
        }
        max1=max(arr);
        return max1;
    }
    static int max(int arr[])
    {
        int max=-1;
        for(int i=0;i<arr.length;i++)
        {
            if(max<arr[i]&&arr[i]!=0)
            {
                max=arr[i];
            }
        }
        return max;
    }
}
*/
//5.Remove Duplicates from Sorted Array
// Input: nums = [0,0,1,1,1,2,2,3,3,4]
// Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
/*
class Solution {
    public int removeDuplicates(int[] arr) {
        return fn(arr,0,0);
    }
    static int fn(int arr[],int s,int j)
    {
        if(arr.length==s)
        {
            return j;
        }
        if(s==arr.length-1)
        {
            arr[j++]=arr[s];
        }
        else if(arr[s]!=arr[s+1])
        {
            arr[j++]=arr[s];
        }
        return fn(arr,s+1,j);
    }
}
*/
//6.Left Rotate an array by one place
//time complixity:o(n)
//space complisity:o(1)
/* 
public class sohomain {
    public static void main(String[] args) {
        int arr[]={1,2,3,4,5,6};
        int temp=arr[0],i=0;
        while(i<=arr.length-2)
        {
            arr[i]=arr[i+1];
            i++;
        }
        arr[arr.length-1]=temp;
        for(i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
}
*/
//7. Rotate Array
//input:1,2,3,4,5,6,7,R=3
//output:4,5,6,7,1,2,3
/* 
    public class sohomain {
        public static void main(String[] args) {
            int arr[]={1,2,3,4,5,6,7},R=3,len=arr.length;
            R=R%len;
            int temp[]=new int[R],i=0,j=0;
            while(i<R) // 0 1 2
            {
                temp[i]=arr[i++];
            }
            while(i<len)
            {
                arr[i-R]=arr[i++];
            }
            i=len-R;j=0;
            while(j<R)
            {
                arr[i++]=temp[j++];
            }
            for(i=0;i<len;i++)
            {
                System.out.print(arr[i]+" ");
            }
        }
    }
*/
//8.Move Zeroes
// Input: nums = [0,1,0,3,12]
// Output: [1,3,12,0,0]
/*
public class sohomain {
    public static void main(String[] args) {
        int arr[]={0,1,0,3,12,0},i=0,j=0;
        for(i=0;i<arr.length;i++) // o(n)
        {
            if(arr[i]!=0)
            {
                arr[j++]=arr[i];
            }
        }
        for(i=j;i<arr.length;i++)//o(n-x)
        {
            arr[i]=0;
        }
        for(i=0;i<arr.length;i++)//o(n)
        {
            System.out.print(arr[i]+" ");
        }
        //o(n)+o(n-x)+o(n)=0(3n-x)
    }
}
*/
//
//9.linear search using recursion: time complexity:o(n)
/* 
class Solution{
    static int searchInSorted(int arr[], int N, int K)
    {
        return fn(arr,0,K)==true?1:-1;
    }
    static boolean fn(int arr[],int s,int target)
    {
        if(s==arr.length)
        {
            return false;
        }
        return arr[s]==target||fn(arr,s+1,target);
    }
}
*/
//10.binary search using recursion: time complexity:o(log n)
// N = 5, K = 6
// arr[] = {1,2,3,4,6}
/* 
class Solution{
    static int searchInSorted(int arr[], int N, int K)
    {
        int i=0,mid=0;
        N=N-1;
        while(i<=N)
        {
             mid=i+(N-i)/2;
            if(arr[mid]<K)
            {
                i=mid+1;
            }
            else if(arr[mid]>K)
            {
                N=mid-1;
            }
            else
            {
                break;
            }
        }
        return arr[mid]==K?1:-1;
    }
}
*/
//11.union of two sorted arrays
/* 
import java.util.ArrayList;
public class sohomain 
{
    public static void main(String[] args) {
        int arr1[]={2,2,3,4,5},arr2[]={1,1,2,3,4},n=5,m=5;
        ArrayList <Integer> arr=new ArrayList<>();
        arr = findUnion(arr1, arr2, n, m);
        for(int i=0;i<arr.size();i++)
        {
            System.out.printf(arr.get(i)+" ");
        }
    }
    static ArrayList<Integer> findUnion(int arr1[], int arr2[], int n, int m)
    {
        ArrayList<Integer>arr=new ArrayList<Integer>();
        n=remove(arr1,0);
        m=remove(arr2,0);
        int i=0,j=0;
        while(i<n&&j<m)
        {
            if(arr1[i]<arr2[j])
            {
                arr.add(arr1[i++]);
            }
            else if(arr1[i]>arr2[j])
            {
                arr.add(arr2[j++]);
            }
            else
            {
                arr.add(arr1[i]);
                i++;
                j++;
            }
        }
        while(i<n)
        {
            arr.add(arr1[i++]);
        }
        while(j<m)
        {
            arr.add(arr2[j++]);
        }
        return arr;
    }
    static int remove(int arr[],int j)
    {
        for(int i=0;i<arr.length;i++)
        {
            if(i==arr.length-1)
            {
                arr[j++]=arr[i];
            }
            else if(arr[i]!=arr[i+1])
            {
                arr[j++]=arr[i];
            }
        }
        return j;
    }
}
*/
//12.missing number in 0 to n
/* 
public class sohomain {
    public static void main(String[] args) 
    {
        int arr[]={9,6,4,2,3,5,7,0,1};
        for(int i=0;i<arr.length;)
        {
            int index=arr[i];
            if(index<arr.length&&arr[i]!=arr[index]) // o(n)
            {
                arr[i]=arr[i]^arr[index]; //a = a^b
                arr[index]=arr[i]^arr[index]; //b = a^b
                arr[i]=arr[i]^arr[index]; // a = a^b
            }
            else
            {
                i++;
            }
        }
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]!=i)
            {
                System.out.print(i+" ");
            }
        }
    }
}
*/
//13. Max Consecutive Ones
/* 
public class sohomain {
    public static void main(String[] args) {
        int arr[]={1,1,0,1,1,1},max=0,ctr=0;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]==1)
            {
                ctr++;
                if(max<ctr){max=ctr;}
            }
            else
            {
                ctr=0;
            }
        }
        System.out.print(max);
    }
}
*/
//14.Single Number
/* 
    class Solution {
        public int singleNumber(int[] arr) {
            int r=0,i=0;
            while(i<arr.length)
            {
                r=r^arr[i++];
            }
            return r;
        }
    }
*/
//15.Longest subarray with given sum K(positives)
//subarray is contingous part of the array
/* 
public class sohomain {
    public static void main(String[] args) {
        int arr[]={10,5,2,7,1,9},k=15;
        System.out.println(lenOfLongSubarr(arr, arr.length, k));//o(n^2)

        System.out.println(longestsubarray(arr, arr.length, k));//o(2n)

    }
    static int lenOfLongSubarr(int A[], int N, int K) {
        int max=0;
        for(int i=0;i<N;i++)
        {
            int sum=0;
            for(int j=i;j<N;j++)
            {
                sum+=A[j];
                if(sum==K)
                {
                    if(max<(j-i+1))
                    {
                        max=j-i+1;
                    }
                }
            }
        }
        return max;
    }
    static int longestsubarray(int A[],int N,int K )
    {
        int left=0,right=0,max=0;
        long sum=A[0];
        while(right<N)
        {
            while(left<=right&&sum>K)
            {
                sum=sum-A[left];
                left++;
            }
            if(sum==K)
            {
                if(max<(right-left+1))
                {
                    max=(right-left+1);
                }
            }
            right++;
            if(right<N){sum=sum+A[right];}
        }
        return max;
    }
}
*/
//16.2Sum Problem
/* 
import java.util.Arrays;

public class sohomain {
    public static void main(String[] args) {
        int arr[]= {2,7,11,15,1},target=9;
        Arrays.sort(arr);
        fn(arr, target);
    }
    static void fn(int arr[],int target)
    {
        int left=0,right=arr.length-1;
        while(left<right)
        {
            if(arr[left]+arr[right]==target)
            {
                System.out.println(left+" "+right);
                return;
            }
            else if(arr[left]+arr[right]>target)
            {
                right--;
            }
            else
            {
                left++;
            }
        }
        return;
    }
}
*/
//
//17. Sort Colors 0 1 2
//leetcode:75
// Input: nums = [2,0,2,1,1,0]
// Output: [0,0,1,1,2,2]
/*
public class sohomain {
    public static void main(String[] args) {
        int arr[]={2,0,2,1,1,0};
        fn1o2n(arr);
        for(int i=0;i<arr.length;i++)
        {
            // o(2n)
            //o(1)
            System.out.print(arr[i]+" ");
        }
    }
    static void fn1o2n(int arr[])
    {
        int ctr_0=0,ctr_1=0;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]==0)
            {
                ctr_0++;
            }
            else if(arr[i]==1){
                ctr_1++;
            }
        }
        for(int i=0;i<ctr_0;i++)
        {
            arr[i]=0;
        }
        for(int i=ctr_0;i<ctr_0+ctr_1;i++)
        {
            arr[i]=1;
        }
        for(int i=ctr_0+ctr_1;i<arr.length;i++)
        {
            arr[i]=2;
        }
        return;
    }
}
*/
//18.The majority element is the element that appears more than ⌊n / 2⌋ times. 
//leetcode 169:
// Input: nums = [2,2,1,1,1,2,2]
// Output: 2
/* 
class Solution {
    public int majorityElement(int[] nums) {
        //method 1:
        // Arrays.sort(nums);
        // return (nums[nums.length/2]);
        //method 2:
        int num=0,ctr=0;
        for(int i=0;i<nums.length;i++)
        {
            if(ctr==0)
            {
                num=nums[i];
                ctr=1;
            }
            else if(num==nums[i])
            {
                ctr++;
            }
            else 
            {
                ctr--;
            }
        }
        ctr=0;
        for(int i=0;i<nums.length;i++)
        {
            if(num==nums[i]){ctr++;}
        }
        if(ctr>nums.length/2)
        {
            return num;
        }
        return -1;
    }
}
*/
//19.Maximum Subarray in the subarray with the largest sum, and return its sum.
//leedcode:53:
// Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
// Output: 6
/*
public class sohomain {
    public static void main(String[] args) {
        int arr[]={-2,1,-3,4,-1,2,1,-5,4};
        int sum=0,max=-1;
        for(int i=0;i<arr.length;i++)
        {
            if(sum<0)
            {
                sum=0;
            }
            sum+=arr[i];
            if(sum>max)
            {
                max=sum;
            }
        }
        System.out.print(max);
    }
}
*/

//20.Best Time to Buy and Sell Stock
// Input: prices = [7,1,5,3,6,4]
// Output: 5
/*
public class sohomain {
    public static void main(String[] args) {
        int price[]={7,1,5,3,6,4};
        System.out.println(maxProfit(price));
    }
    static int maxProfit(int[] prices)
     {
        int minsharebuy=prices[0],maxprofit=0;
        for(int i=1;i<prices.length;i++)
        {
            int cost = prices[i]-minsharebuy;
            if(cost>maxprofit)
            {
                maxprofit=cost;
            }
            if(minsharebuy>prices[i])
            {
                minsharebuy=prices[i];
            }
        }
        return maxprofit;
    }
}
*/
//21.Rearrange Array Elements by Sign equal number of positive and negative integers.
//leedcode:2149
// Input: nums = [3,1,-2,-5,2,-4]
// Output: [3,-2,1,-5,2,-4]
/*
public class sohomain {
    public static void main(String[] args) {
        int arr[]={3,1,-2,-5,2,-4};
        arr=fn(arr);
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
    static int[] fn(int nums[])
    {
        int positive_index=0,negetive_index=1,arr[]=new int[nums.length];
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]>=0)
            {
                arr[positive_index]=nums[i];
                positive_index+=2;
            }
            else
            {
                arr[negetive_index]=nums[i];
                negetive_index+=2;
            }
        }
        return arr;
    }
}
*/

//22.Leaders in an array
// A[] = {16,17,4,3,5,2}
// Output: 17 5 2
/* 
public class sohomain {
    public static void main(String[] args) {
        int arr[]={17,16,17,4,3,5,2},maxindex=arr[arr.length-1];
        for(int i=arr.length-2;i>=0;i--)
        {
            if(arr[i]>=maxindex)
            {
                maxindex=arr[i];
            }
            else
            {
                arr[i]=-777;
            }
        }
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]==-777?"":arr[i]+" ");
        }
    }
}
*/
//23.longest consective sequence
//input:100,102,100,101,101,4,3,2,3,2,1,1,1,2
//output:4
/* 
import java.util.Arrays;
public class sohomain {

    public static void main(String[] args) {
        int arr[]={100,102,100,101,101,4,3,2,3,2,1,1,1,2};
        Arrays.sort(arr);// use merage sort
        int count_current=0,last_smaller=Integer.MIN_VALUE,longest=1;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]-1==last_smaller)
            {
                count_current++;
                last_smaller=arr[i];
            }
            else if(last_smaller!=arr[i])
            {
                count_current=1;
                last_smaller=arr[i];
            }
            if(longest<count_current)
            {
                longest=count_current;
            }
        }
        System.out.println(longest);
    }
}
*/
//24.
/*
public class sohomain {
    public static void main(String[] args) {
        int arr[][]=
                {
                  {1,1,1,1},
                  {1,0,1,1},
                  {1,1,0,1},
                  {0,1,1,1}
                };
        int col00=1;
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr[i].length;j++)
            {
                if(arr[i][j]==0)
                {
                    arr[i][0]=0; //row
                    //col
                    if(j!=0)
                    {
                        arr[0][j]=0;
                    }
                    else
                    {
                        col00=0;
                    }
                }
            }
        }
        //inside of matric
        for(int i=1;i<arr.length;i++)
        {
            for(int j=1;j<arr[i].length;j++)
            {
                if(arr[i][j]!=0)
                {
                    if(arr[i][0]==0||arr[0][j]==0)
                    {
                        arr[i][j]=0;
                    }
                }
            }
        }
        //col
        if(arr[0][0]==0)
        {
            for(int i=0;i<arr[0].length;i++)
            {
                arr[0][i]=0;   
            }
        }
        //row
        if(col00==0)
        {
            for(int i=0;i<arr.length;i++)
            {
                arr[i][0]=0;
            }
        }
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr[0].length;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
    }
}
*/
//25.Rotate Image
//leecode:48
//Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
// Output: [[7,4,1],[8,5,2],[9,6,3]]
/* 
public class sohomain {
    public static void main(String[] args) {
        int arr[][]=
        {
                {1,2,3},
                {4,5,6},
                {7,8,9}
        };
        int len=arr.length;
        for(int i=0;i<len;i++)
        {
            for(int j=i;j<len;j++)
            {
                int temp=arr[i][j];
                arr[i][j]=arr[j][i];
                arr[j][i]=temp;
            }
        }
        for(int i=0;i<len;i++)
        {
            int s=0,e=len-1;
            while(s<=e)
            {
                int temp=arr[i][s];
                arr[i][s]=arr[i][e];
                arr[i][e]=temp;
                s++;
                e--;
            }
        }
    }
}
*/
//26.Spiral Matrix
//Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
// Output: [1,2,3,6,9,8,7,4,5]
/* 
public class sohomain {
    public static void main(String[] args) {
        int arr[][]=
        {
            {1,2,3},
            {4,5,6},
            {7,8,9}
        };
        int temp[]=new int[3*3],ctr=0;
        int row_s=0,row_e=arr.length-1,col_s=0,col_e=arr[0].length-1;
        while(row_s<=row_e&&col_s<=col_e)
        {
            for(int i=col_s;i<=col_e;i++)
            {
                temp[ctr++]=arr[row_s][i];
            }
            row_s++;
            for(int i=row_s;i<=row_e;i++)
            {
                temp[ctr++]=arr[i][col_e];
            }
            col_e--;
            if(row_s>row_e||col_s>col_e)
            {
                break;
            }
            for(int i=col_e;i>=col_s;i--)
            {
                temp[ctr++]=arr[row_e][i];
            }
            row_e--;
            for(int i=row_e;i>=row_s;i--)
            {
                temp[ctr++]=arr[i][col_s];
            }
            col_s++;
        }
        for(int i=0;i<9;i++)
        {
            System.out.print(temp[i]+" ");
        }
    }
}
*/

//27.Count subarrays with given sum
//leetcode:560
// Input: nums = [1,1,1], k = 2
// Output: 2
/* 
public class sohomain {
    public static void main(String[] args) {
        int nums[]={1,1,1},k=2;
        System.out.println(fn(nums, k));
    }
    static int fn(int arr[],int k)
    {
        int s=0,e=0,sum=0,ctr=0;
        while(s<arr.length)
        {
            sum+=arr[e];
            if(sum==k)
            {
                ctr++;
            }
            e++;
            if(e>=arr.length)
            {
                sum=0;
                s++;
                e=s;
            }
        }
        return ctr;
    }
}
*/

//28.pascal's triangle:
//Input: numRows = 5
// Output: [
        //     [1],
        //    [1,1],
        //   [1,2,1],
        //  [1,3,3,1],
        // [1,4,6,4,1]
        // ]
/* 
import java.util.*;
class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> col = new ArrayList<>();
        for(int i=0;i<numRows;i++)
        {
            List<Integer> row =new ArrayList<>();
            for(int j=0;j<=i;j++)
            {
                if(j==0||j==i)
                {
                    row.add(1);
                }
                else
                {
                    List<Integer> pre = col.get(i-1);
                    row.add(pre.get(j)+pre.get(j-1));
                }
            }
            col.add(row);
        }
        return col;
        
    }
}
*/
//29.ith is set or not using bit munipulation
/* 
public class sohomain {
    public static void main(String[] args) {
        int num=13,i=2;
        //left shift
        if((num&(1<<i))!=0)
        {
            System.out.println("given number is ith position is set");
        }
        else
        {
            System.out.println("given number is ith position is not set");
        }
        num=13;
        //right shift
        if(((num>>i)&i)!=0)
        {
            System.out.println("given number is ith position is set");
        }
        else
        {
            System.out.println("given number is ith position is not set");
        }

    }
}
*/
//30.given number set ith bit 
/*
public class sohomain {
    public static void main(String[] args) {
        int num=9,i=2;
        num=num|(1<<i);
        System.out.println(num);      
    }
}
*/ 
//31.given number set clear ith bit
/* 
public class sohomain {
    public static void main(String[] args) {
        int num=9,i=2;
        num=num&(~(1<<i));
        System.out.println(num);      
    }
}
*/
//32.given number toggle the ith bit 
/* 
public class sohomain {
    public static void main(String[] args) {
        int num=9,i=2;
        num=num^((1<<i));
        System.out.println(num);      
    }
}
*/
//33.remove last set bit
/*
public class sohomain {
    public static void main(String[] args) {
        int num=13;
        num=num&(num-1);
        System.out.println(num);
    }
}
*/
//34.check if number is power of 2
/*
public class sohomain {
    public static void main(String[] args) {
        int num=16;
        if((num&(num-1))==0)
        {
            System.out.println("yes");
        }
        else
        {
            System.out.println("no");
        }
    }
}
*/
//35.count the set bit
/* 
public class sohomain {
    public static void main(String[] args) {
        int num1=13,num2=13,num3=13;
        int ctr=0;
        while(num1>0)
        {
            ctr+=num1&1;
            num1=num1>>1;
        }
        System.out.println(ctr);

        ctr=0;
        while(num2>0)
        {
            if(num2%2==1)
            {
                ctr++;
            }
            num2=num2/2;
        }
        System.out.println(ctr);

        ctr=0;
        while(num3>0)
        {
            num3=num&num-1;
            ctr++;
        }
        System.out.print(ctr);
    }
}
*/
//36.covert x to y how many bit are required
/* 
public class sohomain {

    public static void main(String[] args) {
        int x=10,y=7;
        int ans=x^y;
        int ctr=0;
        while(ans>0)
        {
            ctr+=ans&1;
            ans=ans>>1;
        }
        System.out.println(ctr);

    }
}
*/
//37.print all subset
//input:[1,2,3]
/* 
import java.util.*;
public class sohomain {
    public static void main(String[] args) {
        int arr[]={1,2,3};
        int num=3;
        int subset=1<<num;//2^3=8
        List<List<Integer>> list = new ArrayList<>();
        for(int i=0;i<=subset-1;i++)
        {
            List<Integer> temp = new ArrayList<>();
            for(int j=0;j<=num-1;j++)
            {
                if((i&(1<<j))!=0)
                {
                    temp.add(arr[j]);
                }
            }
            list.add(temp);
        }
        for(List<Integer> row : list)
        {
            for (Integer element : row)
            {
                System.out.print(element+" ");
            }
            System.out.println();
        }
        System.out.println(1<<num);
    }
}
*/
//38.single number 
//input:4,1,2,1,2
/*
public class sohomain {
    public static void main(String[] args) {
        int arr[]={4,1,2,1,2};
        int result=0;
        for(int i=0;i<arr.length;i++)
        {
            result=result^arr[i];
        }
        System.out.println(result+" ");
    }
}
*/
//39.the  given number power two
/*
    import java.util.*;
    public class sohomain {
        public static void main(String[] args) {
            Scanner scan = new Scanner(System.in);
            int num=scan.nextInt();
            System.out.println(isPowerOfTwo(num));
        }
        static boolean isPowerOfTwo(int n)
        {
            return n>0 && (n&(n-1))==0;
        }
    } 
*/
//40.the given number print 1 to n xor opreation:
/* 
public class sohomain {
    public static void main(String[] args) {
        int num=6;
        System.out.println(xor(num));
    }
    static int xor(int num)
    {
        if(num%4==1)
        {
            return 1;
        }
        else if(num%4==2)
        {
            return num+1;
        }
        else if(num%4==0)
        {
            return 0;
        }
        return num;
    }
}
*/
//40.get ith bit and set ith bit cleat ith bit
/*
public class sohomain {
    public static void main(String[] args) {
        int num=70,i=3;
        i--;
        System.out.print(get(num,i)+" "+set(num,i)+" "+clear(num,i));
    }
    static int get(int num,int i)
    {
        return (1&(num>>i));
    }
    static int set(int num,int i)
    {
        return (num|(1<<i));
    }
    static int clear(int num,int i)
    {
        return (num&(~(1<<i)));
    }
}
*/
//41.print divisons of number
// input:36 
/* 
import java.util.*;
public class sohomain {
    public static void main(String[] args) {
        int num=64;
        ArrayList<Integer>arr=new ArrayList<>();
        for(int i=1;i*i<=num;i++) // i*i<=num  ====> i<=sqrt(num)
        {
            if(num%i==0)
            {
                arr.add(i);
                if(num/i!=i)
                {
                    arr.add(num/i);
                }
            }
        }
        for(int i=0;i<arr.size();i++)
        {
            System.out.print(arr.get(i)+" ");
        }
    }
}
*/
//42.check is a number is prime or not
/*
public class sohomain {
    public static void main(String[] args) {
        System.out.println(isPrime(7));
    }
    static String isPrime(int num)
    {
        for(int i=2;i*i<=num;i++)
        {
            if(num%i==0)
            {
                return "the number is not a prime number";
            }
        }
        return "the number is prime number";
    }
}
*/
//43.pow(x,n)
/*
public class sohomain {
    public static void main(String[] args) {
        int x=2,n=3,temp=0;
        if(n<0)
        {
            temp=1/(pow(x, -n));
        }
        else
        {
            temp=pow(x, n);
        }
        System.out.println(temp);
    }
    static int pow(int x,int n)
    {
        int ans=1;
        while(n>0)
        {
            if(n%2==1)
            {
                ans=ans*x;
                n=n-1;
            }
            else
            {
                x=x*x;
                n=n/2;
            }
        }
        return ans; 
    }
}
*/
//44.sieve of eratosthenes (for  prime number)
/* 
public class sohomain {
    public static void main(String[] args) {
        int num=31;
        int prime_arr[]=new int[num+1];//default all the element will be 0 in java and c  will be old compiler is garbage  value
        for(int i=2;i*i<=num;i++)
        {
            if(prime_arr[i]==0)
            {
                for(int j=i*i;j<=num;j+=i)
                {
                    prime_arr[j]=1;
                }
            }
        }
        for(int i=2;i<num+1;i++)
        {
            if(prime_arr[i]==0)
            {
            System.out.print(i+" ");
            }
        }
    }
}
*/
//--------------------------sliding window and two pointer----------------------------------------------------------
//45.maximum points you can obtain from cards.card take only form the (last or first)(last and first)
/*
public class sohomain {
    public static void main(String[] args) {
        int arr[]={6,2,3,4,7,2,1,7,1},k_cards=4;
        int left_sum=0,rigth_sum=0,max=0;
        for(int i=0;i<k_cards;i++)
        {
            left_sum+=arr[i];
        }
        if(max<left_sum){max=left_sum;}
        int last_index=arr.length-1;
        for(int i=k_cards-1;i>=0;i--)
        {
            left_sum=left_sum-arr[i];
            rigth_sum=rigth_sum+arr[last_index];
            last_index--;
            if(max<(left_sum+rigth_sum))
            {
                max=left_sum+rigth_sum;
            }
        }
        System.out.println(max);
    }
}
*/
//46.longest substring without repeating character
//input:cadbzabcd
//output:5
/*
public class sohomain {
    public static void main(String[] args) {
        char ch[]="cadbzabcd".toCharArray();
        int l=0,r=0,max=0;
        int hash[]=new int[256];
        while(r<ch.length)
        {
            if(hash[ch[r]]!=0)
            {
                if(hash[ch[r]]>=l)
                {
                    l=hash[ch[r]]+1;
                }
            }
            if(max<r-l+1)
            {
                max=r-l+1;
            }
            hash[ch[r]]=r;
            r++;
        }
        System.out.println(max);
    }
}
*/
//47.
// Input:
// N = 7
// Arr = {1, 2, 3, 5, 4, 7, 10}
// Output:
// 7 5 3 1 2 4 10
/* 
import java.util.*;
public class sohomain {
    public static void main(String[] args) {
        int arr[]={1,2,3,5,4,7,10};
        Arrays.sort(arr);
        int arr1[]=new int[arr.length];
        int j=0;
        for(int i=arr.length-1;i>=0;i--)
        {
            if(arr[i]%2==1)
            {
                arr1[j++]=arr[i];
            }
        }
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]%2==0)
            {
                arr1[j++]=arr[i];
            }
        }
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(arr1[i]+" ");
        }
    }
}
*/
//------------------------------------------------------
//48.
// Input : 800
// Output : Currency  Count 
//          500 : 1
//          200 : 1
//          100 : 1

// Input : 2456
// Output : Currency  Count
//          2000 : 1
//          200 : 2
//          50 : 1
//          5 : 1
//          1 : 1
/* 
public class sohomain {
    public static void main(String[] args) {
        int num=2456;
        System.out.println("2000:"+num/2000);
        // num=num/2000;//1
        // num=num%2000//456
        num=num/2000!=0?num%500:num;

        System.out.println("500:"+num/500);
        num=num/500!=0?num%500:num;

        System.out.println("200:"+num/200);
        num=num/200!=0?num%200:num;
        
        System.out.println("100:"+num/100);
        num=num/100!=0?num%100:num;

        System.out.println("50:"+num/50);
        num=num/50!=0?num%50:num;

        System.out.println("20:"+num/20);
        num=num/20!=0?num%20:num;
        
        System.out.println("10:"+num/10);
        num=num/10!=0?num%10:num;

        System.out.println("5:"+num/5);
        num=num/5!=0?num%5:num;

        System.out.println("1:"+num/1);
        num=num/1!=0?num%1:num;

    }
}
*/
//-----------------------------------------------------------------
//49.
/* 
public class sohomain {
    public static void main(String[] args) {
        String str[]={"loke","loeks"};
        int i=0;
        try
        {
            while(str[i]!=null)
            {
                System.out.println(str[i]+" ");
                i++;
            }
        }
        catch(Exception e)
        {

        }

    }
}
*/
//-----------------------
//50.
//Single Number II
/* 
class Solution {
    public int singleNumber(int[] nums) {
        int one=0,two=0;
        for(int i=0;i<nums.length;i++)
        {
            one = ((one^nums[i])&(~two));
            two = ((two^nums[i])&(~one));
        }
        return one;
    }
}
*/
//----------------------
//51.
/* 
public class sohomain {
    public static void main(String[] args) {
        int arr[][]=
              {
                {3,3,1,1},
                {1,2,3,4},
                {1,2,3,4}
              };
    }
    static int diagonalSum(int[][] mat) {
        int sum=0;
        int j=mat.length-1;
        for(int i=0;i<mat.length;i++){
            sum+=mat[i][i];
            if(i!=j){
                sum+=mat[i][j];
            }
            j--;
        }
        return sum;
    }
}
*/

//----------------
//52.
/* 
static String isSquare(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4)
{
       if(x1 == x2 && x3 == x4 && y1 == y2 && y3 == y4)
       { 
         return "No";
       }
       if(((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1) ) == ((x4-x3)*(x4-x3)+(y4-y3)*(y4-y3))) 
       {
          return "Yes";
       }
       return "No";
}
*/
//---------------
//53.
// Input:
// n = 5
// arr[] = {1,2,3,4,5}
// Output: 2 1 4 3 5
// Explanation: Array elements after 
// sorting it in wave form are 
// 2 1 4 3 5.
// Example 2:

// Input:
// n = 6
// arr[] = {2,4,7,8,9,10}
// Output: 4 2 8 7 10 9
// Explanation: Array elements after 
// sorting it in wave form are 
// 4 2 8 7 10 9.

/* 
class Solution {
    public static void convertToWave(int n, int[] a) {
        int len=a.length%2==0?a.length-1:a.length-2;
        for(int i=len;i>0;i-=2)
        {
            a[i]=a[i]^a[i-1];
            a[i-1]=a[i]^a[i-1];
            a[i]=a[i]^a[i-1];
        }
    }
}
*/
//---------------------
//54.
// Example 1:
// Input:
// N = 7, X = 2
// Arr[] = {1, 1, 2, 2, 2, 2, 3}
// Output: 4
// Explanation: 2 occurs 4 times in the
// given array.
// Example 2:

// Input:
// N = 7, X = 4
// Arr[] = {1, 1, 2, 2, 2, 2, 3}
// Output: 0
// Explanation: 4 is not present in the
// given array.
/* 
class Solution {
    int count(int[] arr, int n, int x) {
        int ctr=0;
        for(int i=0;i<n/2;i++)
        {
            if(arr[i]==x)
            {
                ctr++;
            }
            if(arr[n-i-1]==x)
            {
                ctr++;
            }
        }
        if(n%2==1&&arr[n/2]==x){ctr++;}
        return ctr;
    }
}
*/
//-------------------------------
//55.second longest
/* 
public class sohomain {
    public static void main(String[] args) {
        int arr[]={1,2,34,351,1,1223,42342};
        int f=0,s=0;
        for(int i=0;i<arr.length;i++)
        {
            if(s<arr[i])
            {
                s=f;
                f=arr[i];
            }
            else if(s<arr[i]&&f!=arr[i])
            {
                s=arr[i];
            }
        }
        System.out.println(f+" "+s);
    }
}
*/
//--------------------------------
//56.
// class Solution {
//     public int climbStairs(int n) {
//         if (n == 0 || n == 1) {
//             return 1;
//         }
//         return climbStairs(n-1) + climbStairs(n-2);
//     }
// }
//--------------------------------
//57.
/* 
public class sohomain {

    public static void main(String[] args) {
        int arr[][]=
                   {
                    {1,2,3},
                    {4,5,6},
                    {7,8,9},
                   };
        ninetyDegree(arr);
        System.out.println("90 degeree");
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr.length;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
        ninetyDegree(arr);
        System.out.println("180 degeree");
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr.length;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
        ninetyDegree(arr);
        System.out.println("270 degeree");
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr.length;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
        ninetyDegree(arr);
        System.out.println("360 degeree");
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr.length;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
    }
    static void ninetyDegree(int arr[][])
    {
        for(int i=0;i<arr.length;i++)
        {
            for(int j=i;j<arr.length;j++)
            {
                int temp=arr[i][j];
                arr[i][j]=arr[j][i];
                arr[j][i]=temp;
            }
        }
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr.length/2;j++)
            {
                int temp=arr[i][j];
                arr[i][j]=arr[i][arr.length-1-j];
                arr[i][arr.length-1-j]=temp;
            }
        }
    }
}
*/
//--------------------------------------------------
//1.
/* 
public class sohomain 
{
    public static void main(String[] args) {
        String str[]={"one","two","three"};
        fn(str, 0);
    }
    static void fn(String str[],int i)
    {
        if(i>=str.length)
        {
            return;
        }
        System.out.print(str[i]+" ");
        fn(str,i+1);
        System.out.print(str[i]+" ");
    }
}
*/
//-----------------------------------------
//2.
/* 
public class sohomain {
    public static void main(String[] args) {
        int arr1[]={2,3,4,5,6,7,9,10,13},arr2[]={2,3,4,5,6,7,8,11,15};
        int arr3[]=new int[arr1.length+arr2.length];
        int i=0,j=0,ctr=0;
        int m=remove(arr1, 0),n=remove(arr2, 0);
        while(i<m&&j<n)
        {
            if(arr1[i]<arr2[j])
            {
                arr3[ctr++]=arr1[i];
                i++;
            }
            else if(arr1[i]>arr2[j])
            {
                arr3[ctr++]=arr2[j];
                j++;
            }
            else
            {
                arr3[ctr++]=arr1[i];
                i++;
                j++;
            }
        }
        while(i<m)
        {
            arr3[ctr++]=arr1[i];
            i++;
        }
        while(j<n)
        {
            arr3[ctr++]=arr2[j++];
        }
        for(i=0;i<ctr;i++)
        {
            System.out.print(arr3[i]+" ");
        }
    }
    static int remove(int arr[],int i)
    {
        for(int j=0;j<arr.length;j++)
        {
            if(j==arr.length-1)
            {
                arr[i++]=arr[j];
            }
            else if(arr[j]!=arr[j+1])
            {
                arr[i++]=arr[j];
            }
        }
        return i;
    }
}
*/
//--------------------------
//3.
/* 
public class sohomain {
    public static void main(String[] args) {
        String str="12345";
        for(int i=0;i<str.length();i++)
        {
            for(int j=0;j<str.length();j++)
            {
                if(i==j||j==str.length()-1-i)
                {
                    System.out.print(str.charAt(j)+" ");
                }
                else
                {
                    System.out.print(" ");
                }
            }
            System.out.println();
        }
    }
}
*/
//---------
//4.
/* 
import java.util.Arrays;
public class sohomain {
    public static void main(String[] args)
    {
        String str="b3c6d15";
        char ch;
        for(int i=0;i<str.length();i+=2)
        {
            int n=(int)(str.charAt(i+1)-'0');
            ch=str.charAt(i);
            if(i+2<str.length()&&str.charAt(i+2)>='0'&&str.charAt(i+2)<='9')
            {
                n=n*10+(int)(str.charAt(i+2)-'0');
                i++;
            }
            for(int j=0;j<n;j++)
            {
                System.out.print(ch+" ");
            }
        }
    }
}
*/
//-----------------
//1.Pangram Checking
/* 
public class sohomain {
    public static void main(String[] args) {
        String str="abc defGhi JklmnOP QRStuv wxz";
        int arr[]=new int[26];
        for(int i=0;i<str.length();i++)
        {
            if(str.charAt(i)>='a'&&str.charAt(i)<='z')
            {
                arr[(int)(str.charAt(i)-'a')]++;
            }
            else if(str.charAt(i)>='A'&&str.charAt(i)<='Z')
            {
                arr[(int)(str.charAt(i)-'A')]++;
            }
        }
        for(int i=0;i<26;i++)
        {
            if(arr[i]==0)
            {
                System.out.println("False");
                return;
            }   
        }
        System.out.println("True");
    }
}
*/
//------------------------
//2. Password Strength
/* 
public class sohomain {
    public static void main(String[] args) {
        String str="QwertY123";
        int i=0,u=0,l=0,d=0,s=0;
        if(str.length()<=7){System.out.println("Weak");return;}
        for(i=0;i<str.length();i++)
        {
            if(str.charAt(i)>='A'&&str.charAt(i)<='Z')
            {
                u++;
            }
            else if(str.charAt(i)>='a'&&str.charAt(i)<='z')
            {
                l++;
            }
            else if(str.charAt(i)>='0'&&str.charAt(i)<='9')
            {
                d++;
            }
            else 
            {
                s++;
            }
        }
        i=0;
        if(u!=0){i++;}
        if(l!=0){i++;}
        if(d!=0){i++;}
        if(s!=0){i++;}
        System.out.println(
                           i==4?"Strong":
                           i==3?"Good":
                           i==2?"Medium":"Weak"
                         );
    }
}
*/
//----------------------------
//3. First Occurrences
/* 
public class sohomain {
    public static void main(String[] args) {
        String str1="ZOHOCORPORATION",str2="PORT";
        int min=99999,max=0;
        for(int i=0;i<str2.length();i++)
        {
            for(int j=0;j<str1.length();j++)
            {
                if(str2.charAt(i)==str1.charAt(j))
                {
                    if(min>j){min=j;}
                    if(max<j){max=j;}
                    break;
                }
            }
        }
        for(int i=min;i<=max;i++)
        {
            System.out.print(str1.charAt(i)+" ");
        }
    }
}
*/
//---------------
//4. Matrix Diagonal sum
//sum of upper layer and lower layer
/* 
public class sohomain {
    public static void main(String[] args) {
        int arr[][]=
        {
            {1,2,3},
            {4,5,6},
            {7,8,9}
        };
        int u=0,l=0;
        for(int i=0;i<3;i++)
        {
            for(int j=0;j<3;j++)
            {
                if(i<=j)
                {
                    u+=arr[i][j];
                }
                if(i>=j)
                {
                    l+=arr[i][j];
                }
            }
        }
        System.out.println(u+" "+l);     
    }
}
//output:26 34
*/
//------------------------------
/* 
5. Cricket Scores
Given a timeline of scores, find the individual scores of player 1 and player 2 and Extras
W – Wide N – No Ball . – Dot Ball
Consider the game starts from player 1
I/P:
1 . 2 . 4 3 6 W 1 . N . 2 1
O/P:
P1 – 8
P2 – 12
Extras – 2
public class sohomain {
    public static void main(String[] args) {
        String input = "1 . 2 . 4 3 6 W 1 . N . 2 1";
        String[] timeline = input.split(" ");
        int p1Score = 0, p2Score = 0, extras = 0;
        boolean isPlayer1 = true;
        for (String event : timeline) {
            switch (event) {
                case ".":
                    break;
                case "W":
                    extras++;
                    break;
                case "N":
                    extras++;
                    break;
                default:
                    int runs = Integer.parseInt(event);
                    if (isPlayer1) {
                        p1Score += runs;
                    } else {
                        p2Score += runs;
                    }
                    if (runs % 2 != 0) {
                        isPlayer1 = !isPlayer1;
                    }
                    break;
            }
        }

        System.out.println("P1 - " + p1Score);
        System.out.println("P2 - " + p2Score);
        System.out.println("Extras - " + extras);
    }
}
*/
//------------
//6.in c language
//7.
/* 
public class sohomain {
    public static void main(String[] args) {
        int arr[][]=
        {
            {1,2,3},
            {4,5,6},
            {7,8,9}
        };
        int m=arr.length,n=arr[0].length;
        int temp[]=new int[m*n];
        int row=0,col=0;
        int ctr=0;
        boolean up = true;
        while(row<m&&col<n)
        {
            if(up)
            {
                while(row>0&&col<n-1)
                {
                    temp[ctr++]=arr[row][col];
                    row--;
                    col++;
                }
                temp[ctr++]=arr[row][col];
                if(col==n-1)
                {
                    row++;
                }
                else
                {
                    col++;
                }
            }
            else
            {
                while(col>0&&row<n-1)
                {
                    temp[ctr++]=arr[row][col];
                    row++;
                    col--;
                }
                temp[ctr++]=arr[row][col];
                if(row==n-1)
                {
                    col++;
                }
                else
                {
                    row++;
                }   
            }
            up=!up;

        }
        for(int i=0;i<ctr;i++)
        {
            System.out.print(temp[i]+" ");
        }
    }
}
*/




--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


//1.given a unsorted array to find continues pair largest sum value
//input:0,5,6,0,9,0,1,4
/*
public class zoho {
    public static void main(String[] args) {
        int arr[]={0,5,6,0,9,0,1,4},max=0;
        for(int i=0;i<arr.length-1;i++)
        {
            if(max<arr[i]+arr[i+1])
            {
                max=arr[i]+arr[i+1];
            }
        }
        System.out.println(max);
    }
}
*/
//2.print the range form x to y in n array
// N=6 A=4,3,7,11,50,1 
// X=4 Y=10
/* 
public class zoho {
    public static void main(String[] args) {
        int arr[]={4,3,7,11,50,1};
        int x=4,y=10;
        for(int i=0;i<arr.length;i++)
        {
            if(x<arr[i]&&arr[i]<y)
            {
                System.out.println(arr[i]);
                return;
            }
        }
    }
}
*/

//3.given an array find the sum of elements present in specified gap n
//input:arr[]={1,2,3,4,5,6,7,8,9,10,11,12,13},gap=3
//output: 
// 35 => 1+4+7+10+13 
// 26 => 2+5+8+11
// 30 => 3+6+9+12
/* 
public class zoho {
    public static void main(String[] args) {
        int arr[]={1,2,3,4,5,6,7,8,9,10,11,12,13};
        int gap=3,s=0,e=0,sum=0;
        while(s<gap)
        {
            System.out.print(arr[e]+" ");
            sum+=arr[e];
            e+=gap;
            if(e>=arr.length)
            {
                s++;
                e=s;
                System.out.println(" ==> "+sum);
                sum=0;
            }
        }
    }
}
*/
//4.anagram
//input: s1=anagram s2=nagaram

//5.
// Input:2,3,4,5,1,7,6
// output:1,3,2,5,4,7,6

/* 
import java.util.Arrays;
public class zoho {
    public  static void main(String[] args) {
        int arr[]={2,3,4,5,1,7,6};
        Arrays.sort(arr);
        for(int i=1;i<arr.length;i+=2)
        {
                arr[i]=arr[i]^arr[i+1];
                arr[i+1]=arr[i]^arr[i+1];
                arr[i]=arr[i]^arr[i+1];
        }
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
}
*/
//6.from a given array of integers print the next bigger number for each number in array
//input:8,4,1,9,6,2
//output:8->9,4->6,1->2,9->,6->8,2->4
/*
public class zoho {
    public static void main(String[] args) {
        int arr[]={8,4,1,9,6,2};
        int s=0,e=0,min=Integer.MAX_VALUE;
        while(s<arr.length)
        {
            if(arr[s]<arr[e])
            {
                if(arr[e]<min)
                {
                    min=arr[e];
                }
            }
            e++;
            if(e>=arr.length)
            {
                if(min!=Integer.MAX_VALUE)
                {
                    System.out.println(arr[s]+" ==> "+min);
                }
                else
                {
                    System.out.println(arr[s]+" ==>");
                }
                min=Integer.MAX_VALUE;
                e=0;
                s++;
            }
        }
    }
}
*/
//7.
// input:3
// output:{},{{}},{{{}}};
/*
public class zoho {
    public static void main(String[] args) {
        int num=3;
        for(int i=1;i<=num;i++)
        {
            for(int j=1;j<=i;j++)
            {
                System.out.print("{");
            }
            for(int j=1;j<=i;j++)
            {
                System.out.print("}");
            }
            System.out.print(" ");
        }
    }
}
*/

/* 
1.Implement strstr
Example 1:
    Input  : s = GeeksForGeeks, x = Fr
    Output : -1
Example 2:
    Input  :  s = GeeksForGeeks, x = For
    Output : 5

public class zoho {
    public static void main(String[] args) {
        char ch1[]="GeeksForGeeks".toCharArray(),ch2[]="Fr".toCharArray(); 
        int index=-1;
        for(int i=0;i<ch1.length;i++)
        {
            if(ch1[i]==ch1[0])
            {
                int l=i,ctr=0;
                for(int j=0;j<ch2.length;j++)
                {
                    if(&&ch1[l++]==ch2[j])
                    {
                        ctr++;
                    }
                    else
                    {
                        break;
                    }
                }
                if(ctr==ch2.length){index=i;break;}
            }
        }
        System.out.println(index);  
    }
}
*/
//2.counting sorting:
// Input:
// N = 5
// S = "edsab"
// Output:
// abdes
/*
public class zoho {
    public static void main(String[] args) {
        String str="edsab";
        System.out.println(countSort(str));    
    }
    static String countSort(String arr)
    {
        int count[]=new int [26];
        for(int i=0;i<arr.length();i++)
        {
            count[arr.charAt(i)-'a']++;
        }
        arr="";
        for(int i=0;i<26;i++)
        {
            for(int j=0;j<count[i];j++)
            {
               arr+=(char)(i+'a'); 
            }
        }
        return arr;
    }
}
*/
//3.Print Matrix in snake Pattern
/*
import java.util.ArrayList;
public class zoho {
    public static void main(String[] args) {
        int arr[][]={
            {1,2,3},
            {4,5,6},
            {7,8,9}
        };
        ArrayList<Integer> temp = new ArrayList<Integer>();
        int len=arr[0].length;
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<len;j++)
            {
                if(i%2==0)
                {
                    temp.add(arr[i][j]);
                }
                else
                {
                    temp.add(arr[i][len-j-1]);
                }
            }
        }
        for(int i=0;i<temp.size();i++)
        {
            System.out.println(temp.get(i)+" ");
        }
    }
}
*/
// 4.2nd longest elements
/*
public class zoho {
    public static void main(String[] args) {
        int arr[]={1,7,2,3,6,5,22};
        int first_max=-1,second_max=-1;
        for(int i=0;i<arr.length;i++)
        {
            if(first_max<arr[i])
            {
                second_max=first_max;
                first_max=arr[i];
            }
            else if(second_max<arr[i]&&first_max!=arr[i])
            {
                second_max=arr[i];
            }
        }
        System.out.println(second_max);
    }
}
*/
//5.sum digit in string
/* 
public class zoho {
    public static void main(String[] args) {
        String str="1ab40b3s1";
        int sum=0,num=0;
        for(int i=0;i<str.length();i++)
        {
            if(str.charAt(i)>='0'&&str.charAt(i)<='9')
            {
                num=num*10+(int)(str.charAt(i)-'0');
            }
            else
            {
              sum+=num;
              num=0;   
            }
            if(i==str.length()-1)
            {
                sum+=num;
            }
        }
        System.out.println(sum);
    }
}
*/
//6.remove duplicate number in array
/* 
public class zoho {
    public static void main(String[] args) {
        int arr[]={1,2,3,5,5};
        int i=0,j=0;
        while(i<arr.length-1)
        {
            if(arr[i]!=arr[i+1])
            {
                arr[j++]=arr[i];
            }
            i++;
        }
        i=0;
        while (i<j) 
        {
            System.out.print(arr[i]+" ");
            i++;    
        }
    }
}
*/
//7.remove character for str1 to str2
/*
public class zoho {
    public static void main(String[] args) {
        String str1="occurrence",str2="car";
        int count[]=new int[26];
        for(int i=0;i<str1.length();i++)
        {
            count[(int)str1.charAt(i)-'a']++;
        }
        for(int i=0;i<str2.length();i++)
        {
            count[(int)str2.charAt(i)-'a']=0;
        }
        for(int i=0;i<str1.length();i++)
        {
            if(count[(int)str1.charAt(i)-'a']!=0)
            {
                System.out.print(str1.charAt(i));
            }
        }
    }
}
*/
//8.replace all 0's by 5
/* 
public class zoho {
    public static void main(String[] args) {
        int num=1004,ans=0,num1=num;
        int factor=1;
        while(num>0)
        {
            if(num%10==0)
            {
                ans=ans+(5*factor);//4+50=54 || 55+500=554
            }
            else
            {
                ans=ans+(num%10*factor);//4 || 1000+554=1554
            }
            num/=10;
            factor=factor*10;//1 10 100 1000
        }
        System.out.println(ans);
        ans=0;
        while (num2>0) 
        {
            if(num2%10==0)
            {
                ans=ans*10+5;
            }    
            else
            {
                ans=ans*10+num2%10;
            }
            num2/=10;
        }
        System.out.println(ans);
    }
}
*/
//9.multiply two polynimials
/*
public class zoho {
    public static void main(String[] args) {
        int m=4,n=3;
        int arr1[]={1,0,3,2},arr2[]={2,0,4};
        int result[]=new int[m+n-1];
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                result[i+j]+=arr1[i]*arr2[j];
                // 0 0 0 0 0 0 0 0
                // 2 0 4                 i=0
                //   0 0 0               i=1
                //     6 9 12            i=2
                //       4 0 8           i=4
            }
        }

        for(int i=0;i<m+n-1;i++)
        {
            System.out.print(result[i]+" ");
        }

    }
}
*/
//10.geek-anacci number

/* 
import java.util.Scanner;
public class zoho {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int num=3;
        for(int i=0;i<num;i++)
        {
            int a=scan.nextInt(),b=scan.nextInt(),c=scan.nextInt(),n=scan.nextInt();
            System.out.println(fn(a,b,c,n));
        }
    }
    static int fn(int a,int b,int c,int n)
    {
        int count=3,sum=0;
        while(count<n)
        {
            sum = a+b+c;
            a=b;
            b=c;
            c=sum;
            count++;
        }
        return c;
    }
}
*/

//11.square root of number is <=x
/*
public class zoho {
    public static void main(String[] args) {
        int num=5;
        System.out.println(floorSqrt(num));
    }
    static int floorSqrt(int num)
    {
        int start=1,end=num;
        int floor_ans=0;
        int mid;
        while(start<=end)
        {
            
            mid=(start+end)/2;
            if(mid*mid==num)
            {
                return mid;
            }
            else if(mid<=num/mid)
            {
                start=mid+1;
                floor_ans=mid;
            }
            else
            {
                end=mid-1;
            }
        }
        return floor_ans;
    }
}
*/
//12.anagram
/* 
public class zoho {
    public static void main(String[] args) {
        int arr[]=new int[26];
        String str1="geeksforgeeks",str2="forgeeksgeeks";
        for(int i=0;i<str1.length();i++)
        {
            arr[(int)(str1.charAt(i)-'a')]++;
        }
        for(int i=0;i<str2.length();i++)
        {
            if(arr[(int)(str2.charAt(i)-'a')]>0)
            {
                arr[(int)(str2.charAt(i)-'a')]--;
            }
            else
            {
                System.out.println("NO");
                return;
            }
        }
        System.out.println("YES");
    }
}
*/
//13.Intersection of two arrays
/* 
public class zoho {
    public static void main(String[] args) {
       int  n = 5, m = 3;
       int a[] = {89, 24, 75, 11, 23};
       int b[] = {89, 2, 4};
       System.out.println(NumberofElementsInIntersection(a, b, n, m));
    }
    static int NumberofElementsInIntersection(int a[], int b[], int n, int m) {
        int i=0,j=0,ctr=0;
        while(i<n)
        {
            if(a[i]==b[j++])
            {
                ctr++;
            }
            if(j>=m)
            {
                j=0;
                i++;
            }
        }
        return ctr;
    }
}
*/
//13.
/*
public class zoho {
    public static void main(String[] args) {
        String str="67542-/+-";
        fn(str, 0);
    }
    static int fn(String str,int ans)
    {
        int o_index=0;
        for(int i=0;i<str.length();i++)
        {
            if((str.charAt(i)<'0'||str.charAt(i)>'9'))
            {
                o_index=i;
                break;
            }
        }
        ans=(int)(str.charAt(0)-'0');
        int j=o_index;
        for(int i=1;i<j;i++)
        {
            if(str.charAt(o_index)=='+')
            {
                ans=ans+(int)(str.charAt(i)-'0');
            }
            else if(str.charAt(o_index)=='-')
            {
                ans=ans-(int)(str.charAt(i)-'0');
            }      
            else if(str.charAt(o_index)=='%')
            {
                ans=ans%(int)(str.charAt(i)-'0');
            }
            else if(str.charAt(o_index)=='/')
            {
                ans=ans/(int)(str.charAt(i)-'0');
            }
            o_index++;      
        }
        System.out.println(ans);
        return 0;
    }
}
*/
//14.
/* 
public class zoho {
 
    public static void main(String[] args) {
        String str="1c0c1c1a0b1";
        // a-and , b-or ,c-xor 
        int ans = (int)(str.charAt(0)-'0');
        for(int i=1;i<str.length();i+=2)
        {
            if(str.charAt(i)=='a')
            {
                ans = ans&(int)(str.charAt(i+1)-'0');
            }
            else if(str.charAt(i)=='b')
            {
                ans=ans|(int)(str.charAt(i+1)-'0');
            }
            else if(str.charAt(i)=='c')
            {
                ans=ans^(int)(str.charAt(i+1)-'0');
            }
        }
        System.out.println(ans);
    }
}
*/
//15.total number of sock in 3 different type of colour
// 1-red
// 2-green
// 3-blue
/* 
public class zoho {
    public static void main(String[] args) {
        int arr[]={2,1,1,2,3,3,1};
        int temp[]=new int[3],result=0;
        for(int i=0;i<arr.length;i++)
        {
            temp[arr[i]-1]++;
        }
        for(int i=0;i<3;i++)
        {
            result+=temp[i]/2;
        }
        System.out.println(result); // 2-2->1 pair && 1-1 && 3-3
    }
}
*/
//16.
//sting mappint in str1 to str2

//input:str1="add",str2="egg" (a-->e && d-->g)
//output:yes

//input:str1="add",str2="edg" (a-->e && r-->g ||~ d-->g)
//output:yes

/* 
public class zoho {
    public static void main(String[] args) {
        String str1="add",str2="edg";
        int arr[]=new int[26];
        for(int i=0;i<str1.length();i++)
        {
            if(arr[(int)str1.charAt(i)-'a']==0)
            {
                arr[(int)str1.charAt(i)-'a']=(int)(str2.charAt(i)-'a');
            }
            else if(arr[(int)str1.charAt(i)-'a']!=(int)(str2.charAt(i)-'a'))
            {
                System.out.print("NO");
                return;
            }
        }
        System.out.println("YES");
    }
}
*/

//17.
/* 
public class zoho {
    public static void main(String[] args) {
        String str="abbaccc",result="";
        int ctr=1;
        for(int i=1;i<str.length();i++)
        {
            if(str.charAt(i-1)!=str.charAt(i))
            {
                result+=str.charAt(i-1)+""+(char)('0'+ctr);
                ctr=1;
            }
            else
            {
                ctr++;
            }
        }
        result+=str.charAt(str.length()-1)+""+(char)('0'+ctr);
        System.out.println(result);
    }
}
*/
//18.first non repeating character:
/* 
public class zoho {
    public static void main(String[] args) {
        String str="hello";
        int len=str.length(),arr[]=new int[26];
        for(int i=0;i<len;i++)
        {
            arr[(int)str.charAt(i)-'a']++;
        }
        for(int i=0;i<len;i++)
        {
            if(arr[(int)str.charAt(i)-'a']==1)
            {
                System.out.println(str.charAt(i));
                return;
            }
        }
    }
}
*/

//19.Given a street of N houses (a row of houses), each house having K amount of money kept inside; now there is a thief who is going to steal this money but he has a constraint/rule that he cannot steal/rob two adjacent houses. Find the maximum money he can rob.
/*
public class zoho {
    public static void main(String[] args) {
        int N=5,K=10;
        System.out.println(maximizeMoney(N, K));   
    }
    static int maximizeMoney(int N , int K) {
        N=(N%2==0)?N/2:N/2+1;
        return N*K;
    }
}
*/

//20.count 0 and 1> and <-1
/* 
public class zoho {
    public static void main(String[] args) {
        int arr[]={1,1,0,-1,-2};
        double ctr_0=0,ctr_1=0,ctr_2=0;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]==0)
            {
                ctr_0++;
            }
            else if(arr[i]>0)
            {
                ctr_1++;
            }
            else 
            {
                ctr_2++;
            }
        }
        ctr_0=ctr_0/arr.length;
        ctr_1=ctr_1/arr.length;
        ctr_2=ctr_2/arr.length;
        System.out.printf("%."+arr.length+"f",ctr_0);
        System.out.printf("%."+arr.length+"f",ctr_1);
        System.out.printf("%."+arr.length+"f",ctr_2);
    }
}
*/
//21.isogram is if all character is unique than return true otherwise false

//22.number to word
/* 
public class zoho {

    public static void main(String[] args) {
        long n=77744448l;
        String ans="";
        ans+=numtoword((int)(n/10000000),"crore ");// 7 0's
        ans+=numtoword((int)((n/100000)%100),"lakh "); // 5 0's
        ans+=numtoword((int)((n/1000)%100),"thousand "); // 3 0's
        ans+=numtoword((int)((n/100)%10),"hundred ");   // 2's
        if(n>100 && n%100>0){
            ans+="and ";
        }
        ans+=numtoword((int)(n%100),"");
        System.out.println(ans);
    }
    static String numtoword(long n,String s)
    {
        String one[]={"","one ","two ","three ","four ","five ","six ","seven ","eight ","nine ","ten ","eleven ","twelve ","thirteen ","fourteen ","fifteen ","sixteen ","seventeen ","eighteen ","nineteen "};
        String tens[]={"","","twenty ","thirty ","forty ","fifty ","sixty ","seventy ","eighty ","ninety "};
        String str="";
        if(n>19){
            str+=tens[(int) (n/10)]+one[(int) (n%10)];
        }else{
            str+=one[(int) n];
        }
        if(n!=0){
            str+=s;
        }
        return str;
    }
}
*/
//23.diagonal traverse
// public class zoho {
//     public static void main(String[] args) {
//         int arr[][]={
//             {1,2,3},
//             {4,5,6},
//             {7,8,9}
//         };
        
//     }
// }
//-------------------------------------------------------------------------
//24.pangram checking
// Check whether all english alphabets are present in the given sentence or not
// I/P: abc defGhi JklmnOP QRStuv wxyz
// O/P: True

// I/P: abc defGhi JklmnOP QRStuv
// O/P: False
/*
public class zoho {
    public static void main(String[] args) {
        int arr[]=new int [26];
        String str="abc defGhi JklmnOP QRStuv wxyz";
        for(int i=0;i<str.length();i++)
        {
            if(str.charAt(i)>='a'&&str.charAt(i)<='z')
            {
                arr[(int)str.charAt(i)-'a']++;
            }
            else if(str.charAt(i)>='A'&&str.charAt(i)<='Z')
            {
                arr[(int)str.charAt(i)-'A']++;
            }
        }
        for(int i=0;i<26;i++)
        {
            if(arr[i]==0)
            {
                System.out.println("False");
                return ;
            }
        }
        System.out.println("True");
        return;
    }
}
*/
//25.password strength
/* 
public class zoho {
    public static void main(String[] args) {
        String str="Qwertyuiop";
        if(str.length()<6){System.out.println("weak");return;}
        int uc=0,lc=0,d=0,s=0,i=0;
        for(i=0;i<str.length();i++)
        {
            if(str.charAt(i)>='a'&&str.charAt(i)<='z')
            {
                lc++;
            }
            else if(str.charAt(i)>='A'&&str.charAt(i)<='Z')
            {
                uc++;
            }
            else if(str.charAt(i)>='0'&&str.charAt(i)<='9')
            {
                d++;
            }
            else
            {
                s++;
            }
        }
        i=0;
        if(uc!=0){i++;}
        if(lc!=0){i++;}
        if(d!=0){i++;}
        if(s!=0){i++;}
        switch(i)
        {
            case 1:
                System.out.println("Weak");
                break;
            case 2:
                System.out.println("Medium");
                break;
            case 3:
                System.out.println("Good");
                break;
            case 4:
                System.out.println("Strong");
                break;
            
        }
    }
}
*/
//26.First Occurrences
// Explanation: The index of P in first string is 7, O is 1, R is 6 and T is 11. The largest range is 1 – 11.
// So print the characters of the first string in this inex range i.e. OHOCORPORAT
/*
public class zoho {
    public static void main(String[] args) {
        String str1="ZOHOCORPORATION",str2="PORT";
        int i=0,j=0,min=99999,max=0;
        while(i<str2.length())
        {
            if(str1.charAt(j++)==str2.charAt(i))
            {
                if(min>(j-1))
                {
                    min=(j-1);
                }
                if(max<(j-1))
                {
                    max=(j-1);
                }
                j=0;
                i++;
            }
            if(j>=str1.length())
            {
                j=0;
                i++;
            }
        }
        System.out.println(min+" "+max);
        for(int k=min;k<=max;k++)
        {
            System.out.print(str1.charAt(k));
        }
        return;
    }
}
*/
//27.
// Matrix Diagonal sum
// Given a matrix print the largest of the sums of the two triangles split by diagonal from top right to bottom left
// I/P:
// 3 3
// 1 2 3
// 4 5 6
// 7 8 9
// O/P: 38
/*
public class zoho {
    public static void main(String[] args) {
        int arr[][]=
        {
            {1,2,3},
            {4,5,6},
            {7,8,9},
        };
        int upper_sum=0,lower_sum=0;
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr[0].length;j++)
            {
                if(i<=j)
                {
                    upper_sum+=arr[i][j];
                }
                if(i>=j)
                {
                    lower_sum+=arr[i][j];
                }
            }   
        }
        System.out.print(lower_sum+" "+upper_sum);
    }
}
*/
//28.
// January - 31 days
// February - 28 days in a common year and 29 days in leap years
// March - 31 days
// April - 30 days
// May - 31 days
// June - 30 days
// July - 31 days
// August - 31 days
// September - 30 days
// October - 31 days
// November - 30 days
// December - 31 days


//30.product of each excpect
/* 
public class zoho {
    public static void main(String[] args) {
        int arr[]={1,2,3,4},sum=1;
        for(int i=0;i<arr.length;i++)
        {
            sum=sum*arr[i];
        }
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(sum/arr[i]+" ");
        }
    }
}
*/
//31.
/* 
public class zoho {
    public static void main(String[] args) {
        int arr[][]=
        {
            {1,2,3,4},
            {4,5,6,5},
            {7,8,9,6},
            {7,8,9,10}
        };
        (0,3)
        (0,2)(1,3)
        (0,1)(1,2)(2,3)
        (0,0)(1,1)(2,2)(3,3)
        (1,0)(2,1)(3,2)
        (2,0)(3,1)
        (3,0)
        int n=3;
        for(int i=0;i<=3;i++)
        {
            for(int j=0;j<=i;j++)
            {
                System.out.print(arr[j][n+j]+" ");
            }
            n--;
        }
        n=2;
        for(int i=1;i<=3;i++)
        {
            for(int j=0;j<=n;j++)
            {
                System.out.print(arr[i+j][j]+" ");
            }
            n--;
        }
    }
}

*/

/* 
public class zoho
{
    public static void main(String[] args) {
        int ans=0;
        int arr[]={1,1,1,2,2,3};
        for(int i=0;i<arr.length;i++)
        {
            for(int j=i+1;j<arr.length;j++)
            {
                if(arr[i]==arr[j])
                {
                    ans++;
                }
            }
        }
        System.out.println(ans);
    }
}
*/

/* 
public class zoho {
    public static void main(String[] args) {
        int arr[]=new int[5];
        for(int i=1;i<5;i++){
            arr[i]=(i>>1)+(i&1);
        }
        for(int i=0;i<5;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
}
*/

/* 
public class zoho {
    public static void main(String[] args) {
        System.out.println(fn(16));
    }
    static boolean fn(int num)
    {
        if(num==1)
        {
            return true;
        }
        if(num%4!=0)
        {
            return false;
        }
        return !fn(num/4);
    }
}
*/
/* 
public class zoho {
    public static void main(String[] args) {
        int arr[]={1,2,3};
        int arr1[]=new int[arr.length*2];
        for(int i=0;i<arr.length;i++)
        {
            arr1[i]=arr1[i+arr.length]=arr[i];
        }
        for(int i=0;i<arr.length*2;i++)
        {
            System.out.print(arr1[i]+" ");
        }
    }
}*/
/* 
public class zoho {
    public static void main(String[] args) {
        int arr[]={1,3,2,5,3};
        int i=0;
        while(i<arr.length)
        {
            int index = arr[i]-1;
            if(arr[i]!=arr[index])
            {
                int temp=arr[i];
                arr[i]=arr[index];
                arr[index]=temp;
            }
            else
            {
                i++;
            }
        }
        for(i=0;i<arr.length;i++)
        {
            if(i!=arr[i]-1)
            {
                System.out.print(arr[i]+" "+i);
            }
        }
    }
}
*/



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


//1.Program to print the diamond shape
/* 
public class javasoho1 
{
    public static void main(String[] args) 
    {
        int num=5;
        diamond_shape1(num);
        diamond_shape2(num);
    }
    static void diamond_shape1(int num)
    {
        for(int i=1;i<=num*2;i++)
        {
            for(int j=1;j<=num;j++)
            {
                if(i<=num)
                {
                    System.out.print(j<=num-i?" ":"* ");
                }
                else
                {
                    System.out.print(j<=(i%(num+1))?" ":"* ");
                }
            }
            System.out.println();
        }
    }
    static void diamond_shape2(int num)
    {
        for(int i=1;i<=num*2;i++)
        {
            for(int j=1;j<=num;j++)
            {
                System.out.print( i<=num ?j<=num-i?" ":"* ":j<=(i%(num+1))?" ":"* ");
            }            
            System.out.println();
        }
    }
}
*/
//2.Make a Distinct Digit Array
// Input: nums = [131, 11, 48]
// Output: 1 3 4 8
/* 
public class javasoho1 
{
    public static void main(String[] args)
    {
        int Array1[]={131,11,48};
        simple1(Array1);
    }
    static void simple1(int arr[])
    {
        int Distinct_Digit_Array[]=new int[10];
        for(int i:arr)
        {
            int number=i;
            while(number>0)
            {
                Distinct_Digit_Array[number%10]++;
                number/=10;
            }
        }
        for(int i=0;i<10;i++)
        {
            System.out.print(Distinct_Digit_Array[i]!=0?i+" ":"");
        }
    }

}
*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//1.Pangram Checking
/* 
Check whether all english alphabets are present in the given sentence or not
I/P: abc defGhi JklmnOP QRStuv wxyz
O/P: True
I/P: abc defGhi JklmnOP QRStuv
O/P: False

public class javasoho1 
{
    public static void main(String[] args) 
    {
        String str="abc defGhi JklmnOP QRStuv wxyz";
        int arr[]=new int[26];
        for(char i:str.toCharArray())
        {
            if(i>='a'&&i<='z')
            {
                arr[i-'a']++;
            }
            else if(i>='A'&&i<='Z')
            {
                arr[i-'A']++;
            }
        }
        for(int i=0;i<13;i++)
        {
            if(arr[i]==0||arr[25-i]==0)
            {
                System.out.println("False");
                return;
            }
        }
        System.out.println("True"); //True
    }
}
*/

//2. First Occurrences
/* 
    Given two strings, find the first occurrence of all characters of second string in the first string and
    print the characters between the least and the highest index
    I/P: ZOHOCORPORATION PORT
    O/P: OHOCORPORAT

public class javasoho1 
{
    public static void main(String[] args) 
    {
        char str1[]="ZOHOCORPORATION".toCharArray(),str2[]="PORT".toCharArray();
        //O(m*n)
        Brute(str1, str2); //1 11
        //O(m+n)
        Optimal(str1, str2);//1 11
    }
    static void Brute(char[] str1,char[] str2)
    {
        int len=str1.length-1;
        int left=0,right=0,min=9999,max=0;
        while(right<str2.length)
        {
            if(str1[left]==str2[right])
            {
                max=Math.max(max, left);
                min=Math.min(min, left);
                right++;
                left=0;
            }
            left++;
        }
        System.out.println(min+" "+max);
    }
    static void Optimal(char[] str1,char[] str2)
    {
        int arr[]=new int[26],min=9999,max=0;
        for(int i=0;i<str1.length;i++)
        {
            if(arr[str1[i]-'A']==0)
            {
                arr[str1[i]-'A']=-1*i;
            }
        }
        for(int i=0;i<str2.length;i++)
        {
            if(arr[str2[i]-'A']<0)
            {
                max=Math.max(max, -1*arr[str2[i]-'A']);
                min=Math.min(min, -1*arr[str2[i]-'A']);
            }
        }
        System.out.println(min+" "+max);
    }
}
*/

//3.Matrix diagonal sum
/* 
public class javasoho1 
{
    public static void main(String[] args) 
    {
        int arr[][]=
        {
            {1,2,3},
            {4,5,6},
            {7,8,9}
        };
        upper_lower(arr); // 1+2+3+5+6+9=
    }
    static void upper_lower(int arr[][])
    {
        int upper_sum=0;
        int lower_sum=0;
        int i=0,j=0;
        while (i<arr.length) 
        {
            if(i<=j)
            {
                lower_sum+=arr[i][j];
            }
            if(i>=j)
            {
                upper_sum+=arr[i][j];
            }
            j++;
            i=j>=arr.length?++i:i;
            j=j>=arr.length?0:j;
        }
        System.out.println(upper_sum+" "+lower_sum);
    }
}
*/
/* 
public class javasoho1 
{
    public static void main(String[] args) 
    {
        int i=0,j=0;
        int arr[]={1,2,23,23,1,234234,-11};
        BubbleSort(arr);
        for(int temp:arr)
        {
            System.out.print(temp+" ");
        }
        System.out.println();
        BubbleSort2(arr);
        for(int temp:arr)
        {
            System.out.print(temp+" ");
        }
        System.out.println();
        

    }
    static void BubbleSort(int arr[])
    {
        int i=0,j=0;
        int len=arr.length;
        while (i<(len-1))
        {
            if(arr[j]>arr[j+1])
            {
                int temp=arr[j];
                arr[j]=arr[j+1];
                arr[j+1]=temp;
            }
            j++;
            if(j>=len-i-1)
            {
                j=0;
                i++;
            }
        }
    }
    static void BubbleSort2(int arr[])
    {
        for(int i=0;i<arr.length-1;i++)
        {
            for(int j=0;j<arr.length-1-i;j++)
            {
                if(arr[j]>arr[j+1])
                {
                    int temp=arr[j];
                    arr[j]=arr[j+1];
                    arr[j+1]=temp;
                }
            }
        }
    }
}
*/

//5. Matrix Addition
/* 
        Given n integer arrays of different size, find the addititon of numbers represented by the arrays
        I/P: 4
        3 5 4 2
        2 4 5
        4 5 6 7 8
        4 9 2 1
        1 2
        O/P: 50856

import java.util.Scanner;
public class javasoho1 
{
    public static void main(String[] args) 
    {
        int num=4;    
        System.out.println(Brute(num));
    }
    static int Brute(int num)
    {
        Scanner scan = new Scanner(System.in);
        int sum=0;
        for(int i=0;i<num;i++)
        {
            String str=scan.nextLine();
            int temp=0;
            for(char ch:str.toCharArray())
            {
                if(ch>='0'&&ch<='9')
                {
                    temp=temp*10+(int)(ch-'0');
                }
            }
            System.out.println(temp+" ");
            sum+=temp;
        }
        return sum;
    }
}
*/


//5. Cricket Scores
/* 
    Given a timeline of scores, find the individual scores of player 1 and player 2 and Extras
    W – Wide N – No Ball . – Dot Ball
    Consider the game starts from player 1
    I/P:
    1 . 2 . 4 3 6 W 1 . N . 2 1
    O/P:
    P1 – 8
    P2 – 12
    Extras – 2

public class sohomain
 {
    public static void main(String[] args) {
        String input = "1 . 2 . 4 3 6 W 1 . N . 2 1";
        String[] timeline = input.split(" ");
        int p1Score = 0, p2Score = 0, extras = 0;
        boolean isPlayer1 = true;
        for (String event : timeline) {
            switch (event) {
                case ".":
                    break;
                case "W":
                    extras++;
                    break;
                case "N":
                    extras++;
                    break;
                default:
                    int runs = Integer.parseInt(event);
                    if (isPlayer1) {
                        p1Score += runs;
                    } else {
                        p2Score += runs;
                    }
                    if (runs % 2 != 0) {
                        isPlayer1 = !isPlayer1;
                    }
                    break;
            }
        }

        System.out.println("P1 - " + p1Score);
        System.out.println("P2 - " + p2Score);
        System.out.println("Extras - " + extras);
    }
}
*/

//6.shuffle an array
/* 
import java.util.*;
public class sohomain 
{
    public static void main(String[] args)
    {
         int num=3;
         Scanner scan = new Scanner(System.in);
         for(int i=0;i<num;i++)
         {
            int s=scan.nextInt(),e=scan.nextInt();
            int arr[]=new int[e-s+1];
            for(int j=s;j<=e;j++)
            {
                arr[j-s]=j;
            }
            shuffleArray(arr);
            for(int temp:arr)
            {
                System.out.print(temp+" ");
            }
            System.out.println();
         }
    }
    static void shuffleArray(int[] arr) 
    {
        Random rand = new Random();
        for (int i = arr.length - 1; i > 0; i--) {
            int j = rand.nextInt(i + 1); // Random index from 0 to i
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
}
*/
//-------------------------------------------------------------------------------------------------------

//7.
/* 
public class Main {
    public static void main(String[] args) {
        int[][] mat = {
            {1, 2, 3, 4, 6},
            {5, 3, 8, 1, 2},
            {4, 6, 7, 5, 5},
            {2, 4, 8, 9, 4}
        };
        
        int x1 = 2, y1 = 0; // Top-left corner index
        int x2 = 3, y2 = 4; // Bottom-right corner index
        
        printSubmatrix(mat, x1, y1, x2, y2);
    }
    
    static void printSubmatrix(int[][] mat, int x1, int y1, int x2, int y2) {
        // Check if indices are valid
        if (x1 < 0 || x1 >= mat.length || y1 < 0 || y1 >= mat[0].length ||
            x2 < 0 || x2 >= mat.length || y2 < 0 || y2 >= mat[0].length) {
            System.out.println("Invalid indices.");
            return;
        }
        
        // Swap indices if necessary to ensure x1 <= x2 and y1 <= y2
        if (x1 > x2) {
            int temp = x1;
            x1 = x2;
            x2 = temp;
        }
        if (y1 > y2) {
            int temp = y1;
            y1 = y2;
            y2 = temp;
        }
        
        // Print the submatrix
        System.out.println("Rectangle");
        int sum = 0;
        for (int i = x1; i <= x2; i++) {
            for (int j = y1; j <= y2; j++) {
                System.out.print(mat[i][j] + " ");
                sum += mat[i][j];
            }
            System.out.println();
        }
        System.out.println("sum " + sum);
    }
}
*/

//-----------------------------------------------------------------------------------------------
//8.
/* 
public class DateDifference {

    static int[] monthDays = {31, 28, 31, 30, 31, 30,31, 31, 30, 31, 30, 31};

    static boolean isLeap(int year) {
        // If a year is multiple of 400 or (multiple of 4 and not multiple of 100), it's a leap year
        return (year % 400 == 0) || ((year % 4 == 0) && (year % 100 != 0));
    }


    static int countDays(int d, int m, int y) {
        int days = y * 365 + d;

        for (int i = 0; i < m - 1; i++) {
            days += monthDays[i];
        }

        for (int i = 1; i < y; i++) {
            if (isLeap(i)) {
                days++;
            }
        }

        return days;
    }

    // Function to calculate difference in days between two dates
    static int getDifference(int d1, int m1, int y1, int d2, int m2, int y2) {
        // Get total days from 01-Jan to both dates
        int days1 = countDays(d1, m1, y1);
        int days2 = countDays(d2, m2, y2);

        // Return the absolute difference
        return Math.abs(days2 - days1);
    }

    // Main method to test the functions
    public static void main(String[] args) {
        // Example dates
        int d1 = 1, m1 = 2, y1 = 2004; // 01-Feb-2000
        int d2 = 6, m2 = 2, y2 = 2004; // 01-Feb-2004

        // Calculate and print the difference in days
        System.out.println("Difference between two dates is " +
                getDifference(d1, m1, y1, d2, m2, y2));
    }
}
*/
//------------
//9.Print longest sequence between same character
/* 
    Ex I/p abcccccbba
    O/p 8 (from a to a)
    I/p aaaaaaaa
    O/p 6

public class ZOHO
{
    public static void main(String[] args)
    {
        System.out.println(longestSequenceBetweenSameCharacters("abcccccbba")); // 8  a to a 
    }
    static int longestSequenceBetweenSameCharacters(String str) 
    {
        int maxLength = 0;
        int len = str.length();

        // Iterate through each character in the string
        for (int i = 0; i < len; i++) {
            char currentChar = str.charAt(i);

            // Find the last occurrence of the current character
            int lastIndex = str.lastIndexOf(currentChar);

            // Calculate the length of the sequence between the first and last occurrence
            if (lastIndex != i) {
                int sequenceLength = lastIndex - i + 1;
                maxLength = Math.max(maxLength, sequenceLength);
            }
        }

        return maxLength;
    }   
}
*/

//------------
//10.sort the array odd numbers in ascending and even numbers in descending.
// I/p 5 8 11 6 2 1 7
// O/p 1 5 7 11 8 6 2
/* 
import java.util.*;
public class ZOHO
{
    public static void main(String[] args) {
        int arr[]={5,8,11,6,2,1,7},odd=0;
        for(int i=0;i<arr.length;i++)
        {
            arr[i]=arr[i]%2==1?arr[i]:-1*arr[i];
            if(arr[i]%2==1){odd++;}
        }  
        Arrays.sort(arr);
        for(int i=odd-1;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");
        }
        for(int i=0;i<arr.length-odd;i++)
        {
            System.out.print(-1*arr[i]+" ");
        }
    }
}
*/

//---------------
//11.
/* 
public class ZOHO 
{
    public static void main(String[] args) 
    {
        String str[]={"catch", "got", "tiger", "mat", "eat", "pat", "tap", "tea"};
        String word="ate"; 
        functions(str, word);
    }
    static void functions(String str[],String word)
    {
        int arr[]=new int[26];
        for(int i=0;i<word.length();i++)
        {
            arr[word.charAt(i)-'a']++;
        }
        for(int i=0;i<str.length;i++)
        {
            if(word.length()==str[i].length())
            {
                int temp[]=new int[26];
                char ch1[]=str[i].toCharArray();
                for(char j:ch1)
                {
                    temp[j-'a']++;
                }
                for(int j=0;j<26;j++)
                {
                    if(arr[j]!=temp[j])
                    {
                        temp[0]=-123;
                        break;
                    }
                }
                if(temp[0]!=-123)
                {
                    System.out.println(str[i]+" ");
                }
            }
        }
    }
}
*/

//---------------
//12.4.array of numbers were given to find a number which has same sum of numbers in it’s either side.
// I/p 1, 2, 3, 7, 6
// O/p 7(has 1+ 2+3 in left 6 in right)
/* 
public class ZOHO 
{
    public static void main(String[] args) 
    {
        int arr[]={1,2,3,7,6};
        int totalsum=0;
        for(int i:arr)
        {
            totalsum+=i;
        }
        int leftsum=0;
        for(int i:arr)
        {
            totalsum=totalsum-i;
            if(totalsum==leftsum)
            {
                System.out.println(i);
                return;
            }
            leftsum+=i;
        }    
    }
}
*/

//---------------
//13.1) To find the odd numbers in between the range.
// Input:
// 2
// 15
// Output:
// 3,5,7,9,11,13
/* 
public class ZOHO 
{
    public static void main(String[] args) 
    {
        int s=2,o=15;
        s=s%2==0?s+1:s;
        o=s%2==0?o-1:o;  
        functions(s, o); 
    }
    static void functions(int s,int e)
    {
        if(s>=e)
        {
            return;
        }
        System.out.print(s+" ");
        functions(s+2, e);
    }
}
*/
//-------------------------------------------------------------------------------
//14.Sort even-placed elements in increasing and odd-placed in decreasing order
// Let given array: arr[] = {0, 1, 2, 3, 4, 5, 6, 7}
// Array after multiplying by -1 to even placed elements: arr[] = {0, 1, -2, 3, -4, 5, -6, 7}
// Array after sorting: arr[] = {-6, -4, -2, 0, 1, 3, 5, 7}
// Array after reverting negative values: arr[] = {6, 4, 2, 0, 1, 3, 5, 7}
// After reversing the first half of array: arr[] = {0, 2, 4, 6, 1, 3, 5, 7}
// After reversing the second half of array: arr[] = {0, 2, 4, 6, 7, 5, 3, 1}



//---------------------------------------------------------------------------------
//15.To find the factors of the numbers given in an array and to sort the numbers in descending order according to the factors present in it.
// Input:
// Given array : 8, 2, 3, 12, 16
// Output:
// 12, 16, 8, 2, 3
/* 
public class ZOHO 
{
    public static void main(String[] args) 
    {
        int arr[]={8,2,3,12,16};
        int temp[]=new int[arr.length];
        for(int i=0;i<arr.length;i++)
        {
            temp[i]=factorsCount(arr[i]);
        }
        for(int i=0;i<temp.length-1;i++)
        {
            for(int j=0;j<temp.length-1-i;j++)
            {
                if(temp[j]>temp[j+1])
                {
                    int t=temp[j];
                    temp[j]=temp[j+1];
                    temp[j+1]=t;
                    t=arr[j];
                    arr[j]=arr[j+1];
                    arr[j+1]=t;
                }
            }
        }
        for(int i:arr)
        {
            System.out.print(i+" ");
        }
    }
    static int factorsCount(int num)
    {
        int ctr=0;
        for(int i=1;i*i<=num;i++)
        {
            if(num%i==0)
            {
                ctr++;
             //  System.out.print(i+" ");
                if(num/i!=i)
                {
                    ctr++;
                 //  System.out.print(num/i+" ");
                }
            }   
        }
        return ctr;
    }
}

*/
//----------------------------------
//16.number to word
/* 
public class NumberToWords 
{
    private static final String[] belowTwenty = {"", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", 
        "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
    private static final String[] tens = {"", "", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
    private static final String[] thousands = {"", "Thousand", "Million"};

    public static void main(String[] args) {
        int num = 2342222;
        System.out.println(numberToWords(num));
    }

    public static String numberToWords(int num) {
        if (num == 0) return "Zero";
        int i = 0;
        String words = "";
        
        while (num > 0) 
        {
            if (num % 1000 != 0) {
                words = helper(num % 1000) + thousands[i] + " " + words;
            }
            num /= 1000;
            i++;
        }
        return words.trim();
    }

    private static String helper(int num) {
        if (num == 0) {
            return "";
        } else if (num < 20) {
            return belowTwenty[num] + " ";
        } else if (num < 100) {
            return tens[num / 10] + " " + helper(num % 10);
        } else {
            return belowTwenty[num / 100] + " Hundred " + (num % 100 == 0 ? "" : "and ") + helper(num % 100);
        }
    }
}
*/
//-------------------------
//17. Print the given pattern:
// Input:
// N= 3, M=3
// Output:
// X X X
// X 0 X
// X X X
/* 
public class ZOHO
{
    public static void main(String[] args)
    {
        int r=10,c=7;
        for(int i=1;i<=r;i++)
        {
            for(int j=1;j<=c;j++)
            {
                int temp=Math.min(Math.min(i,j),Math.min(r-i+1,c-j+1));
                System.out.print(temp%2==1?"X ":"O ");
            }
            System.out.println();
        }    
    }
}
*/
//----------------------------
//18.adding a digit to all the digits of a number eg digit=4, number = 2875, o/p= 612119
/* 
public class ZOHO 
{
    public static void main(String[] args) 
    {
        int number=reverse(2875);
        System.out.println(number);//5782
        while(number>0)
        {
            System.out.print((number%10)+4);
            number=number/10;
        }
    }
    static int reverse(int num)
    {
        int temp=0;
        while(num>0)
        {
            temp=temp*10+num%10;
            num/=10;
        }
        return temp;
    }
}
*/
//--------------------------------------
//19.
/* 
public class ZOHO 
{
    public static void main(String[] args) {
        String[] arr = {"Harit", "Girish", "Gritav", "Lovenish", "Nikhil", "Harman","Arun","ArunKumar"};

        // Sort the array in lexicographical order
        sortLexicographically(arr);

        // Print the sorted array
        System.out.println("Sorted array in lexicographical order:");
        for (String s : arr) {
            System.out.print(s + " ");
        }
        System.out.println();
    }

    public static void sortLexicographically(String[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                // Compare adjacent strings and swap if they are in the wrong order
                if (compareStrings(arr[j], arr[j + 1]) > 0) {
                    // Swap arr[j] and arr[j+1]
                    String temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }

    // Custom function to compare two strings lexicographically
    public static int compareStrings(String s1, String s2) {
        int len1 = s1.length();
        int len2 = s2.length();
        int minLen = Math.min(len1, len2);

        for (int i = 0; i < minLen; i++) {
            char c1 = s1.charAt(i);
            char c2 = s2.charAt(i);
            if (c1 != c2) {
                return c1 - c2;
            }
        }

        // If one string is prefix of other, shorter string is smaller
        return len1 - len2;
    }
}
*/

//---------------------
//20.find the extra elements in a index
/* 
public class ZOHO 
{
    public static void main(String[] args) 
    {
        int arr1[]={10,20,30,12,5},arr2[]={10,20,30,12};
        int tsum=0;
        for(int i=0;i<arr1.length;i++)
        {
            tsum+=arr1[i];
        }    
        for(int i:arr2)
        {
            tsum=tsum-i;
        }
        System.out.println(tsum);//5
    }
}
*/
//---------------------
//21.Print true if second string is a substring of first string, else print false.
// Note : * symbol can replace n number of characters
// Input : Spoon  Sp*n  Output : TRUE
//     Zoho     *o*o  Output : TRUE
//     Man       n*     Output : FALSE
//     Subline  line   Output : TRUE
/* 
public class ZOHO 
{
    public static void main(String[] args) 
    {
        String str1="spoon",str2="n*";
        int i=0,j=0;
        while(j<str2.length()-1)
        {
            if(str1.charAt(i)==str2.charAt(j))
            {
                i++;
                j++;
            }
            else if(str1.charAt(i)!=str2.charAt(j) && str2.charAt(j)=='*')
            {
                i++;
            }
            else
            {
                System.out.println("Flase");
                return;
            }
            if(str1.charAt(i)==str2.charAt(j+1))
            {
                j++;
            }
        }    
        System.out.println("True");
    }
}
*/
//--------------------
//22. Given an array, find the minimum of all the greater numbers for each element in the array.  

// Sample: 
// Array : {2, 3, 7, ­1, 8, 5, 11} 
// Output: 
// {2­>3, 3­>5, 7­>8, ­1­>2, 8­>11, 5­>7, 11­>} 
/* 
import java.util.*;
public class ZOHO 
{
    public static void main(String[] args)
    {
        int arr1[]={2,3,7,1,8,5,11};
        for(int i=0;i<arr1.length;i++)
        {
            int min=9999;
            for(int j=0;j<arr1.length;j++)
            {
                if(arr1[i]<arr1[j])
                {
                    min=Math.min(min,arr1[j]);
                }
            }
            System.out.println(arr1[i]+"-->"+(min!=9999?min:""));
        }
    }
}
*/
//---------------------------------------
// 23. Given a string, we have to reverse the string without changing the position of punctuations and spaces.
// Sample:   house no : 123@ cbe 
// Output:    ebc32 1o :  nes@ uoh 
/* 
public class ZOHO 
{
    public static void main(String[] args) 
    {
        char str[]="house no : 123@ cbe".toCharArray();
        int l=0,r=str.length-1;
        while(l<=r)
        {
            if(!isAlphanumeric(str[l]))
            {
                l++;
            }
            else if(!isAlphanumeric(str[r]))
            {
                r--;
            }
            else 
            {
                char ch=str[l];
                str[l]=str[r];
                str[r]=ch;
                l++;
                r--;
            }
        }    
        for(char ch:str)
        {
            System.out.print(ch);
        }
    }  
    static boolean isAlphanumeric(char ch) {
        return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9');
    }  
}
*/
//--------------------------------------
//24.word serach 
/* 
class Solution {
    public boolean exist(char[][] board, String word) {
        if (board == null || board.length == 0 || word == null || word.length() == 0) {
            return false;
        }
        
        int m = board.length;
        int n = board[0].length;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (dfs(board, word, 0, i, j)) {
                    return true;
                }
            }
        }
        
        return false;
    }

    private boolean dfs(char[][] board, String word, int index, int i, int j) {
        if (index == word.length()) {
            return true;
        }
        
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != word.charAt(index)) {
            return false;
        }
        
        char temp = board[i][j];
        board[i][j] = '#'; // Mark as visited
        
        boolean found = dfs(board, word, index + 1, i + 1, j) ||
                        dfs(board, word, index + 1, i - 1, j) ||
                        dfs(board, word, index + 1, i, j + 1) ||
                        dfs(board, word, index + 1, i, j - 1);
        
        board[i][j] = temp; // Restore the original value
        return found;
    }
}
*/
/* 
public class Solution {
    public static void main(String[] args) {
        char[][] board = {
            {'a', 'z', 'o', 'l'},
            {'n', 'x', 'h', 'o'},
            {'v', 'y', 'i', 'v'},
            {'o', 'r', 's', 'e'}
        };

        String[] dictionary = {"van", "zoho", "love", "are", "is"};
        
        for (String word : dictionary) {
            if (exist(board, word)) {
                System.out.println(word);
            }
        }
        for(int i=0;i<board.length;i++)
        {
            for(int j=0;j<board[i].length;j++)
            {
                System.out.print(board[i][j]+" ");
            }
            System.out.println();
        }
    }

    public static boolean exist(char[][] board, String word) {
        if (board == null || board.length == 0 || word == null || word.length() == 0) {
            return false;
        }
        
        int m = board.length;
        int n = board[0].length;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (dfs(board, word, 0, i, j)) {
                    return true;
                }
            }
        }
        
        return false;
    }

    private static boolean dfs(char[][] board, String word, int index, int i, int j) {
        if (index == word.length()) {
            return true;
        }
        
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != word.charAt(index)) {
            return false;
        }
        
        char temp = board[i][j];
        board[i][j] = '#'; // Mark as visited
        
        // Only search right and down
        boolean found = dfs(board, word, index + 1, i + 1, j) || 
                        dfs(board, word, index + 1, i, j + 1);
        
        board[i][j] = temp; // Restore the original value
        return found;
    }
}
*/
///----------------------------
//25) Find the largest sum contiguous subarray which should not have negative numbers. We have to print the sum and the corresponding array elements which brought up the sum.
/* 
public class Solution 
{
    public static void main(String[] args) 
    {
        int arr[]={2,7,5,1,3,2,9,7};
        int sum=14;
        int s=0,e=0,total=0;
        int last=0;
        while(e<arr.length)
        {
            if(total<sum)
            {
                total+=arr[e];
            }
            else if(total>sum)
            {
                total=total-arr[s++];
            }
            if(total==sum)
            {
                last=e;
            }
            e++;
        }    
        System.out.println(s+" "+e);
    }
}
*/
//--------------------------------
//26.
/* 
public class Solution 
{
    public static void main(String[] args) 
    {
        String str[]={"one","two","three"}; 
        reverse(str, 0);

    }
    static void reverse(String str[],int i)
    {
        if(i==str.length)
        {
            return;
        }
        System.out.print(str[i]+" ");
        reverse(str, i+1);
        System.out.print(str[i]+" ");
    }
}
*/
//--------------------------
//27.
// 1  
// 3 2
// 6 5 4
// 10 9 8 7
/* 
public class SOHO
{
    public static void main(String[] args) 
    {
        int num=5,temp=1;
        for(int i=1;i<=num;i++)
        {
            int c=temp;
            for(int j=0;j<i;j++)
            {
                System.out.print(c-j+" ");
            }
            temp+=i+1;`
            System.out.println();
        }    
    }
}
*/
//-------------
//28.Replace every element with the greatest element on right side
/* 
public class SOHO   
{
    public static void main(String[] args) {
        int arr[]={16,17,4,3,5,2},max=arr[arr.length-1];
        arr[arr.length-1]=-1;
        for(int i=arr.length-2;i>=0;i--)
        {
            int temp=arr[i];
            arr[i]=max;
            max=max<temp?temp:max;
        }
        for(int i:arr)
        {
            System.out.print(i+" ");
        }

    }
}
*/
//----------
//29.2. Given a Boolean matrix mat[M][N] of size M X N, modify it such that if a matrix cell mat[i][j] is 1 then make its adjacent cells as 0.
/* 
public class SOHO 
{
    public static void main(String[] args) 
    {
        int arr[][]=
        {
            {1,2,0,3,0},
            {1,2,3,0,1},
            {2,3,4,2,2},
            {2,3,4,1,1}
        };
        for(int i=0;i<arr.length;i++)
        {
            for(int j=arr[i].length-1;j>0;j--)
            {
                if(arr[i][j-1]==0)
                {
                    arr[i][j]=0;
                }
            }
        }
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr[i].length;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
    }
}
*/
//-------------------
//30. Equilibrium index of an array is an index such that the sum of elements at lower indexes is equal to the sum of elements at higher indexes. For example, in an array A:
// Example :
// Input: A[] = {-7, 1, 5, 2, -4, 3, 0}
// Output: 3
// 3 is an equilibrium index, because:
// A[0] + A[1] + A[2] = A[4] + A[5] + A[6]
// Input: A[] = {1, 2, 3}
// Output: -1
/* 
public class SOHO {
    public static void main(String[] args) {
        int arr[] = {-7, 1, 5, 2, -4, 3, 0};
        int left_sum = 0;
        int right_sum = 0;
        for (int i = 0; i < arr.length; i++) 
        {
            right_sum += arr[i];
        }
        for (int i = 0; i < arr.length; i++) 
        {
            right_sum -= arr[i];
            if (left_sum == right_sum) 
            {
                System.out.println("Equilibrium index found at: " + i);
                return;
            }
            left_sum += arr[i];
        }
        System.out.println("No equilibrium index found.");
    }
}
*/
//----------------------------
//31.
/* 
public class DiagonalPrint {
    public static void main(String[] args) {
        int[][] matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        
        int m = matrix.length;
        int n = matrix[0].length;
        
        for (int k = 0; k < m; k++) {
            int i = k;
            int j = 0;
            while (i >= 0) {
                System.out.print(matrix[i][j] + " ");
                i--;
                j++;
            }
        }
        
        for (int k = 1; k < n; k++) {
            int i = m - 1;
            int j = k;
            while (j < n) {
                System.out.print(matrix[i][j] + " ");
                i--;
                j++;
            }
        }
    }
}
//1 4 2 7 5 3 8 6 9     
*/
/* 
public class DiagonalPrint {
    public static void main(String[] args) {
        int[][] matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        
        int m = matrix.length;
        int n = matrix[0].length;
        
        int[] result = new int[m * n];
        int index = 0;
        
        // Traverse each diagonal starting from the top-left to bottom-right
        for (int diagonalSum = 0; diagonalSum <= m + n - 2; diagonalSum++) {
            int startRow = Math.min(diagonalSum, m - 1);
            int startCol = Math.max(0, diagonalSum - (m - 1));
            
            int endRow = Math.max(0, diagonalSum - (n - 1));
            int endCol = Math.min(diagonalSum, n - 1);
            
            if (diagonalSum % 2 == 0) {
                for (int i = startRow, j = startCol; i >= endRow && j <= endCol; i--, j++) {
                    result[index++] = matrix[i][j];
                }
            } else {
                for (int i = endRow, j = endCol; i <= startRow && j >= startCol; i++, j--) {
                    result[index++] = matrix[i][j];
                }
            }
        }
        
        // Print the result array
        for (int num : result) {
            System.out.print(num + " ");
        }
    }
}
//1 2 4 7 5 3 6 8 9 
*/

///--------------------------------------------------------------------------------
/* 
    1.Using Recursion reverse the string such as
    Eg 1: Input: one two three
    Output: three two one
    Eg 2: Input: I love india
    Output: india love I

    public class ZOHO
    {
        public static void main(String[] args) 
        {
            String str[]={"one","two","three"};    
            reverse(str, 0);//three two one 
        }
        static void reverse(String str[],int i)
        {
            if(i==str.length)
            {
                return;
            }
            reverse(str, i+1);
            System.out.print(str[i]+" ");
        }
    }
*/
//---------------------------
/*
    2.Given two sorted arrays, merge them such that the elements are not repeated
    Eg 1: Input:
    Array 1: 2,4,5,6,7,9,10,13
    Array 2: 2,3,4,5,6,7,8,9,11,15
    Output:
    Merged array: 2,3,4,5,6,7,8,9,10,11,13,15

    public class ZOHO 
    {
        public static void main(String[] args) 
        {
            int arr1[]={2,4,5,6,7,9,10,13};
            int arr2[]={2,3,4,5,6,7,8,9,11,15};
            int len1=arr1.length,len2=arr2.length;
            int arr3[]= merge(arr1, arr2);
            for(int i:arr3)
            {
                if(i==0){break;}
                System.out.print(i+" "); //2 3 4 5 6 7 8 9 10 11 13 15 
            }
        }
        static int[] merge(int arr1[],int arr2[])
        {
            int arr3[]=new int[arr1.length+arr2.length];
            int s=0,e=0;
            int index=0;
            while( s<arr1.length && e<arr2.length )
            {
                if(arr1[s]>arr2[e])
                {
                    arr3[index++]=arr2[e++];
                }
                else if(arr1[s]<arr2[e])
                {
                    arr3[index++]=arr1[s++];
                }
                else 
                {
                    arr3[index++]=arr1[s++];
                    e++;
                }
            }
            while(s<arr1.length) 
            {    
                arr3[index++]=arr1[s++];
            }
            while(e<arr2.length)
            {
                arr3[index++]=arr2[e++];
            }
            return arr3;
        }
    }
*/
//-------------------------
/*
    3.Find if a String2 is substring of String1. If it is, return the index of the first occurrence. 
    else return -1.
    Eg 1:Input:
    String 1: test123string
    String 2: 123
    Output: 4
    Eg 2: Input:
    String 1: testing12
    String 2: 1234
    Output: -1
    
    public class ZOHO 
    {
        public static void main(String[] args)
        {
            String str1="test123string";
            String str2="123"; 

            if(indexOf(str1, str2)!=-1)
            {
                System.out.println(indexOf(str1, str2)-str2.length()+1);//4
                System.out.println(indexOf(str1, str2));//6
            }
            else
            {
                System.out.println(-1);
            }
        }
        static int indexOf(String str1,String str2)
        {
            int l=0,r=0,ctr=0;
            while(l<str1.length())
            {
                if(str1.charAt(l)==str2.charAt(r))
                {
                    r++;
                    ctr++;
                    if(ctr==str2.length())
                    {
                        return l;
                    }
                }
                else
                {
                    ctr=0;
                    r=0;
                }
                l++;
            }
            return -1;
        }
    }
*/
//------------------------
/* 
    4.Write a program to print the following output for the given input. You can assume the string is of
      odd length
        Eg 1: Input: 12345
        Output:
        1 5
        2 4
        3
        2 4
        1 5

        public class ZOHO 
        {
            public static void main(String[] args) 
            {
                String str="12345";   
                function(str); 
                function2(str);
            }
            static void function(String str)
            {
                int i=0,j=0;
                for(i=0;i<str.length();i++)
                {
                    for(j=0;j<str.length();j++)
                    {
                        if(i==j)
                        {
                            System.out.print(str.charAt(j));
                        }
                        else if(j==str.length()-i-1)
                        {
                            System.out.print(str.charAt(j));
                        }
                        else
                        {
                            System.out.print("-");
                        }
                    }
                    System.out.println();
                }
            }
            static void function2(String str)
            {
                int i=0,j=0;
                for(i=0;i<str.length();)
                {
                    System.out.print( i==j||j==str.length()-i-1?str.charAt(j):'-');
                    j++;
                    if(j>=str.length()){j=0;i++;System.out.println();}
                }
            }
        }
*/
//------------------------------

/*
    5.
    Write a program to give the following output for the given input
    Eg 1: Input: a1b10
    Output: abbbbbbbbbb
    Eg: 2: Input: b3c6d15
    Output: bbbccccccddddddddddddddd
    The number varies from 1 to 99.
 
    public class ZOHO 
    {
        public static void main(String[] args) 
        {
            char str[] = "a1b12c1".toCharArray();
            char alpha = 0;
            int num = 0;

            for (int i = 0; i < str.length; i++) 
            {
                if (str[i] >= 'a' && str[i] <= 'z')
                {
                    // If there's a previous character to print, print it
                    if (alpha != 0) {
                        for (int j = 0; j < num; j++) {
                            System.out.print(alpha);
                        }
                        num = 0; // Reset num for the next character
                    }
                    alpha = str[i];
                } else if (str[i] >= '0' && str[i] <= '9') {
                    num = num * 10 + (str[i] - '0');
                }
            }
            // Print the last character sequence
            for (int j = 0; j < num; j++) {
                System.out.print(alpha);
            }
        }
    }
*/
//------------------------
/*
    6.Form a number system with only 3 and 4. Find the nth number of the number system.
    Eg.) The numbers are: 3, 4, 33, 34, 43, 44, 333, 334, 343, 344, 433, 434, 443, 444, 3333, 3334,
    3343, 3344, 3433, 3434, 3443, 3444 ....
    

    public class CustomNumberSystem
    {
        public static void main(String[] args) 
        {
            int n = 10; // Example input for nth number
            for(int i=0;i<=20;i++)
            {
                System.out.println(findNthNumber(i));
            }
        }

        static String findNthNumber(int n) 
        {
            String result = "";
            while (n > 0) {
                // Find remainder when n is divided by 2 (as we have two digits in our system)
                int remainder = (n - 1) % 2;
                // Convert remainder to '3' or '4' and prepend to result
                result = (remainder == 0 ? '0' : '1') + result;
                // Update n for the next iteration
                n = (n - 1) / 2;
            }
            return result;
        }
}

*/
//-----------------------
/*
    7.Replace every element with the greatest element on right side
      Given an array of integers, replace every element with the next greatest element 
      (greatest element on the right side) in the array. Since there is no element next to 
      the last element, replace it with -1. For example, if the array is {16, 17, 4, 3, 5, 2},
      then it should be modified to {17, 5, 5, 5, 2, -1}.
 
        public class ZOHO
        {
            public static void main(String[] args)
            {
                int arr[]={16,17,4,3,5,2};
                int max=arr[arr.length-1];
                arr[arr.length-1]=-1;
                for(int i=arr.length-2;i>=0;i--)
                {
                    int temp=arr[i];
                    arr[i]=max;
                    if(max<temp)
                    {
                        max=temp;
                    }
                } 
                for(int i:arr)
                {
                    System.out.print(i+" ");
                }
            }
        }
*/
//-------------------------
/*
     8.Given a Boolean matrix mat[M][N] of size M X N, modify it such that if a matrix 
     cell mat[i][j] is 1 then make its adjacent cells as 0.     

    public class ZOHO 
    {
        public static void main(String[] args) 
        {
            int arr[][]=
            {
                {1,2,0,1},
                {0,1,0,1},
                {2,3,2,1},
                {1,0,1,1},
            };
            for(int i=0;i<arr.length;i++)
            {
                for(int j=arr[0].length-1;j>0;j--)
                {
                    if(arr[i][j]!=0&&arr[i][j-1]==0)
                    {
                        arr[i][j]=0;
                    }
                }
            }
            for(int i=0;i<arr.length;i++)
            {
                for(int j=0;j<arr[0].length;j++)
                {
                    System.out.print(arr[i][j]+" ");
                }
                System.out.println();
            }
        }
    }
    1 2 0 0 
    0 0 0 0 
    2 3 2 1 
    1 0 0 1 
*/
//----------------------
/*
     9.3. Equilibrium index of an array is an index such that the sum of elements at lower indexes is equal to the sum of elements at higher indexes. For example, in an array A:
     Example :
    Input: A[] = {-7, 1, 5, 2, -4, 3, 0}
    Output: 3
    3 is an equilibrium index, because:
    A[0] + A[1] + A[2] = A[4] + A[5] + A[6]
    Input: A[] = {1, 2, 3}
    Output: -1

    public class ZOHO 
    {
        public static void main(String[] args) 
        {
            int arr[]={-7,1,5,2,-4,3,0};
            int left_sum=0,right_sum=0;
            for(int i:arr)
            {
                right_sum+=i;
            }    
            for(int i=0;i<arr.length;i++)
            {
                right_sum=right_sum-arr[i];
                if(left_sum==right_sum)
                {
                    System.out.println(arr[i]);
                    return;
                }
                left_sum=left_sum+arr[i];
            }
        }
    }
    //2
*/
//---------------
/*
     10. Given a matrix of 2D array of n rows and m coloumns.
         Print this matrix in ZIG-ZAG fashion as shown in figure.
 

        public class ZOHO
        {
            public static void main(String[] args) 
            {
                int[][] matrix = {
                    {1, 2, 3},
                    {4, 5, 6},
                    {7, 8, 9}
                };
                
                int m = matrix.length;
                int n = matrix[0].length;
                
                int[] result = new int[m * n];
                int index = 0;
                
                // Traverse each diagonal starting from the top-left to bottom-right
                for (int diagonalSum = 0; diagonalSum <= m + n - 2; diagonalSum++) 
                {
                    int startRow = Math.min(diagonalSum, m - 1);
                    int startCol = Math.max(0, diagonalSum - (m - 1));
                    
                    int endRow = Math.max(0, diagonalSum - (n - 1));
                    int endCol = Math.min(diagonalSum, n - 1);
                    
                    if (diagonalSum % 2 == 0)
                    {
                        for (int i = startRow, j = startCol; i >= endRow && j <= endCol; i--, j++)
                        {
                            result[index++] = matrix[i][j];
                        }
                    }
                    else 
                    {
                        for (int i = endRow, j = endCol; i <= startRow && j >= startCol; i++, j--) {
                            result[index++] = matrix[i][j];
                        }
                    }
               }
               for (int num : result) 
               {
                   System.out.print(num + " ");
               }
            }
        }
*/
//---------------------
/*
    11.Print all possible subsets of the given array whose sum equal to given N.
    example: Input: {1, 2, 3, 4, 5} N=6 Output: {1, 2, 3}, {1, 5}, {2, 4}

        public class ZOHO 
        {
            public static void main(String[] args) 
            {
                int[] array = {1, 2, 3, 4, 5};
                printAllSubsets(array);
            }

            static void printAllSubsets(int[] array) 
            {
                int[] subset = new int[array.length];
                generateSubsets(array, subset, 0);
            }

            static void generateSubsets(int[] array, int[] subset, int index) 
            {
                if (index == array.length)
                {
                    printSubset(subset, index);
                } 
                else
                {
                    subset[index] = 0;
                    generateSubsets(array, subset, index + 1);

                    subset[index] = array[index];
                    generateSubsets(array, subset, index + 1);
                }
            }

            private static void printSubset(int[] subset, int size) {
                System.out.print("{ ");
                for (int i = 0; i < size; i++) {
                    if (subset[i] != 0) {
                        System.out.print(subset[i] + " ");
                    }
                }
                System.out.println("}");
            }
        }
*/
//-----------------
/*
     12.island
 
public class ZOHO 
{
    public static void main(String[] args) 
    {
        char ch[][]=
        {
            {'1','1','1','1','0'},
            {'1','1','0','1','0'},
            {'1','1','0','0','0'},
            {'0','0','0','0','0'}
        };
        System.out.println(numIslands(ch));
    }
    static int numIslands(char[][] grid) {
        int ans=0;
        for(int i=0;i<grid.length;i++)
        {
            for(int j=0;j<grid[0].length;j++)
            {
                if(grid[i][j]=='1')
                {
                    ans+=1;
                    fn(grid,i,j);
                }
            }
        }
        return ans;
    }
    static void fn(char ch[][],int i,int j)
    {
        if(i<0 || i>=ch.length ||j<0||j>=ch[0].length||ch[i][j]=='0')
        {
            return;
        }
        ch[i][j]='0';
        fn(ch,i,j+1);
        fn(ch,i,j-1);
        fn(ch,i+1,j);
        fn(ch,i-1,j);
    }
}
*/
//------------
/* 
  //  13.print all Permutations
//   ABC
// ACB
// BAC
// BCA
// CBA
// CAB
 
public class ZOHO
{
    public static void main(String[] args) {
        String str = "ABC";
        findPermutations(str, 0, str.length() - 1);
    }

    static void findPermutations(String str, int left, int right) {
        if (left == right) {
            System.out.println(str);
        } else {
            for (int i = left; i <= right; i++) {
                str = swap(str, left, i);
                findPermutations(str, left + 1, right);
                str = swap(str, left, i); // backtrack
            }
        }
    }

    static String swap(String str, int i, int j) {
        char[] charArray = str.toCharArray();
        char temp = charArray[i];
        charArray[i] = charArray[j];
        charArray[j] = temp;
        return String.valueOf(charArray);
    }
}
*/
//--------------
//Given a number, print all the code that can be formed with z={a=1, .., z=26}.1123
/* 
public class ZOHO {
    public static void main(String[] args) {
        String number = "111";
        printCodes(number, 0, "");
        System.out.println(count);
    }
    static int count=0;
    static void printCodes(String number, int index, String result) {
        // If the entire number has been processed, print the result
        if (index == number.length())
        {
            System.out.println(result);
            count++;
            return;
        }

        // Take one digit
        int oneDigit = number.charAt(index) - '0';
        if (oneDigit >= 1 && oneDigit <= 9)
        {
            printCodes(number, index + 1, result + (char) ('a' + oneDigit - 1));
        }

        // Take two digits
        if (index + 1 < number.length())
        {
            int twoDigits = (number.charAt(index) - '0') * 10 + (number.charAt(index + 1) - '0');
            if (twoDigits >= 10 && twoDigits <= 26)
            {
                printCodes(number, index + 2, result + (char) ('a' + twoDigits - 1));
            }
        }
    }
}
//---------------
*/


//1.linear search
//best case o(1)
//worst case o(n)

//1.
/* 
import java.util.*;
public class MainJava {
    public static void main(String[] args) {
        int arr[][]={
                      {18,12},
                      {9,14},
                      {77,50}
                    },target=12;
        int[] temp=linearSearch(arr, target);
        System.out.println(Arrays.toString(temp));
        System.out.println(Integer.MIN_VALUE+" "+Integer.MMAX _VALUE);
    }
    static int[] linearSearch(int arr[][],int target)
    {
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr.length;j++)
            {
              if(arr[i][j]==target)
              {
                   return new int[]{i,j};
              }
            }
        }
        return new int[]{-1,-1};
    }
}
*/
//2.
//1295. Find Numbers with Even Number of Digits (linear search)
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={12,345,2,6,7896,-11,-1222},ctr=0;
        for(int i=0;i<arr.length;i++)
        {
            if(method1(arr[i])%2==0)
            {
                ctr++;
            }
        }
        System.out.println("method1 "+ctr);
        ctr=0;
        for(int i=0;i<arr.length;i++)
        {
            if(method2(arr[i])%2==0)
            {
                ctr++;
            }
        }
        System.out.println("method2 "+ctr);
    }
    static int method1(int num)
    {
        int ctr=0;
        while(num!=0)
        { 
            ctr++;
            num/=10;
        }
        return ctr;
    }
    static int method2(int num)
    {
        if(num<0){num*=-1;}
        return (int)(Math.log10(num))+1;// minus value will not counted
    }
}
*/
//3.
//1672.richest customer wealth (linear search)
/* 
import java.util.Scanner;
public class MainJava 
{
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int arr[][]=
        {
            {1,2,3},
            {3,2,1}
        };
        for(int i=0;i<arr.length;i++)
        {
            int sum=0;
            for(int j=0;j<arr[0].length;j++)
            {
                sum+=arr[i][j];
            }
            System.out.print(sum+" ");
        }
    }
}
//output: 6 6
*/
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//2.Binary search
//if the given array is sort use binary search it's more efficient
//best case:o(1)
//worst case:o(log n)
/* 
//1.
public class MainJava {
    public static void main(String[] args) {
        int arr1[]={2,4,6,9,11,12,14,20,36,48},target1=36;
        System.out.println(BinarySearchAscending(arr1, target1));

        int arr2[]={90,75,18,12,6,4,3,1},target2=75 ;
        System.out.println(BinarySearchDescending(arr2, target2));

    }
    static int BinarySearchAscending(int arr[],int target)
    {
        int start=0,end=arr.length-1;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(arr[mid]<target)
            {
                start=mid+1;
            }
            else if(arr[mid]>target)
            {
                end=mid-1;
            }
            else
            {
                return mid;
            }
        }
        return -1;
    }
    static int BinarySearchDescending(int arr[],int target)
    {
        int start=0,end=arr.length-1;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(arr[mid]<target)
            { 
                end=mid-1;
            }
            else if(arr[mid]>target)
            {
                start=mid+1;
            }
            else
            {
                return mid;
            }
        }
        return -1;
    }
}
*/   
//2.
//852. Peak Index in a Mountain Array 
//162. Find Peak Element
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={0,10,5,2};
        System.out.println(peakIndexInMountainArray(arr));
    }
    static int peakIndexInMountainArray(int[] arr)
    {
        int start=0,end=arr.length-1;
        while(start<end)
        {
            int mid = start+(end-start)/2;
            if(arr[mid]>arr[mid+1])
            {
                end=mid;
            }
            else
            {
                start=mid+1;
            }
        }
        return start;
    }
}
*/
//3.ceiling number (greater or equal to the target elements)
/* 
public class MainJava {
    public static void main(String[] args) {
         int arr[]={2,3,5,9,14,16,18},target=15;
         System.out.println(ceiling(arr, target));//5
         System.out.println(floor(arr, target));//4
    }
    static int ceiling(int arr[],int target)
    {
        int start=0,end=arr.length-1;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(target<arr[mid])
            {
                end=mid-1;
            }
            else if(target>arr[mid])
            {
                start=mid+1;
            }
            else 
            {
                return mid;
            }
        }
        return start;
    }
    static int floor(int arr[],int target)
    {
        int start=0,end=arr.length-1;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(target<arr[mid])
            {
                end=mid-1;
            }
            else if(target>arr[mid])
            {
                start=mid+1;
            }
            else 
            {
                return mid;
            }
        }
        return end;
    }
}
*/
//4.
/* 
744. Find Smallest Letter Greater Than Target
Return the smallest character in letters that is lexicographically greater than target. If such a character does not exist, return the first character in letters.
Example 1:
Input: letters = ["c","f","j"], target = "a"
Output: "c"
Explanation: The smallest character that is lexicographically greater than 'a' in letters is 'c'.

Example 2:
Input: letters = ["c","f","j"], target = "c"
Output: "f"
Explanation: The smallest character that is lexicographically greater than 'c' in letters is 'f'.

Example 3:
Input: letters = ["x","x","y","y"], target = "z"
Output: "x"
Explanation: There are no characters in letters that is lexicographically greater than 'z' so we return letters[0].

public class MainJava {
    public static void main(String[] args) {
        char arr[]={'c','f','j'},target='a';
        System.out.println(nextGreatestLetter(arr, target));//c
    }
    static char nextGreatestLetter(char[] letters, char target) {
        int s=0,e=letters.length-1;
        while(s<=e)
        {
            int mid=s+(e-s)/2;
            if(letters[mid]>target)
            {
                e=mid-1;
            }
            else
            {
                s=mid+1;
            }
        }
        return letters[s % letters.length];
    }
}
*/
//5.
//34. Find First and Last Position of Element in Sorted Array
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={5,7,7,7,7,8,8,10},target=7;
        int temp[]=new int[2];
        temp[0]=search(arr, target, true);
        temp[1]=search(arr, target, false);
        System.out.println(temp[0]+" "+temp[1]);// 1 4
    }
    static int search(int arr[],int target,boolean firstindex)
    {
        int ans=-1;
        int start = 0,end=arr.length-1;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(target<arr[mid])
            {
                end=mid-1;
            }
            else if(target>arr[mid])
            {
                start=mid+1;
            }
            else
            {
                ans=mid;
                if(firstindex)
                {
                    end=mid-1;
                }
                else
                {
                    start=mid+1;
                }
            }
        }
        return ans;
    }
}
*/
//6.find the peak in moutain array
/*
public class MainJava {
    public static void main(String[] args) {
        int arr[]={3,4,5,6,2};
        System.out.println(peakIndexInMountainArray(arr));
    }
    static int peakIndexInMountainArray(int[] arr) {
        int start=0,end=arr.length-1;
        while(start<end)
        {
            int mid = start+(end-start)/2;
            if(arr[mid]>arr[mid+1])
            {
                end=mid;
            }
            else 
            {
                start=mid+1;
            }
        }
        return end; // start and end both are pointing to the answer
    }
}
*/
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//3.bubble sort:
//space complexity:o(1)
//time complexity:o(n^2)
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={3,1,5,4,2};
        sort(arr);
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
    static void sort(int arr[])
    {
        for(int i=0;i<arr.length-1;i++)
        {
            for(int j=0;j<arr.length-i-1;j++)
            {
                if(arr[j]>arr[j+1])
                {
                    arr[j]=arr[j]*arr[j+1];
                    arr[j+1]=arr[j]/arr[j+1];
                    arr[j]=arr[j]/arr[j+1];
                }
            }
        }
    }
}
*/
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


//1.pattern printing:

//1.
/* 
public class MainJava {
    public static void main(String[] args) 
    {
        int num=5;
        for(int i=0;i<num;i++)
        {
            for(int j=0;j<num;j++)
            {
                System.out.print("* ");
            }
            System.out.println();
        }
    }
}

//output:
* * * * * 
* * * * * 
* * * * * 
* * * * * 
* * * * *
 */
//-------------------
//2.
/* 
public class MainJava {
    public static void main(String[] args) 
    {
        int num=5;
        for(int i=0;i<num;i++)
        {
            for(int j=0;j<i+1;j++)
            {
                System.out.print("* ");
            }
            System.out.println();
        }
    }
}

//output:
* 
* *
* * *
* * * *
* * * * *
 */
//-------------------

//3.
/* 
public class MainJava {
    public static void main(String[] args) 
    {
        int num=5;
        for(int i=0;i<num;i++)
        {
            for(int j=1;j<=i+1;j++)
            {
                System.out.print(j+" ");
            }
            System.out.println();
        }
    }
}

//output:
1 
1 2
1 2 3
1 2 3 4
1 2 3 4 5
 */

//-------------------

//4.
/* 
public class MainJava {
    public static void main(String[] args) 
    {
        int num=5;
        for(int i=1;i<=num;i++)
        {
            for(int j=0;j<i;j++)
            {
                System.out.print(i+" ");
            }
            System.out.println();
        }
    }
}
//output:
1 
2 2
3 3 3
4 4 4 4
5 5 5 5 5
 */

 //-------------------

//5.
/* 
public class MainJava {
    public static void main(String[] args) 
    {
        int num=5;
        for(int i=0;i<num;i++)
        {
            for(int j=0;j<num-i;j++)
            {
                System.out.print("* ");
            }
            System.out.println();
        }
    }
}

//output:
* * * * * 
* * * *
* * *
* *
*
*/


 //-------------------

//6.

/* 
public class MainJava {
    public static void main(String[] args) 
    {
        int num=5;
        for(int i=0;i<num;i++)
        {
            for(int j=1;j<=num-i;j++)
            {
                System.out.print(j+" ");
            }
            System.out.println();
        }
    }
}
//output:
1 2 3 4 5 
1 2 3 4
1 2 3
1 2
1
*/

 //-------------------

//7.
/* 
public class MainJava {
    public static void main(String[] args) 
    {
        int num=5;
        for(int i=0;i<num;i++)
        {
            //space
            for(int j=0;j<num-i-1;j++)
            {
                System.out.print("- ");
            }
            //star
            for(int j=0;j<(2*i)+1;j++)
            {
                System.out.print("* ");
            }
            //space
            for(int j=0;j<num-i-1;j++)
            {
                System.out.print("- ");
            }
            System.out.println();
        }
        
    }
}

//output:
- - - - * - - - -   4 1 4
- - - * * * - - -   3 3 3
- - * * * * * - -   2 5 2
- * * * * * * * -   1 7 1
* * * * * * * * *   0 9 0
*/


//-------------------

//8.

/* 
public class MainJava {
    public static void main(String[] args) 
    {
        int num=5;
        for(int i=0;i<num;i++)
        {
            for(int j=0;j<i;j++)
            {
                System.out.print("- ");
            }
            for(int j=0;j<(num*2)-(2*i+1);j++)
            {
                System.out.print("* ");
            }
            for(int j=0;j<i;j++)
            {
                System.out.print("- ");
            }
            System.out.println();
        }
        
    }
}

//output:
JAVA(ii)\" ; if ($?) { javac MainJava.java } ; if ($?) { java MainJava }
* * * * * * * * *        0  9  0
- * * * * * * * -        1  7  1
- - * * * * * - -        2  5  2
- - - * * * - - -        3  3  3
- - - - * - - - -        4  1  4
*/
//------------------------
//10.
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        for(int i=0;i<num*2-1;i++)
        {
            int end=i;
            if(i>=num){end=num*2-i-2;}
            for(int j=0;j<=end;j++)
            {
                System.out.print("* ");
            }
            System.out.println();
        }    
    }
}
//output:


*             1  0
* *           2  1 
* * *         3  2 
* * * *       4  3  
* * * * *     5  4
* * * *       4  5   (10-5-2) 0 to 3
* * *         3  6   (10-6-2) 0 to 2    
* *           2  7   (10-7-2) 0 to 1
*             1  8   (10-8-2) 0 to 0

*/

//----------------------------
//11.

/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        for(int i=0;i<num;i++)
        {
            int start=i%2==0?1:0;
            for(int j=0;j<i+1;j++)
            {
                System.out.print(start+" ");
                start=1-start;
            }
            System.out.println();
        }
    }
}

//output:
1 
0 1
1 0 1
0 1 0 1
1 0 1 0 1
*/


//----------------------------
//12.

/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        for(int i=1;i<=num;i++)
        {
            for(int j=1;j<=i;j++)
            {
                System.out.print(j+" ");
            }
            for(int j=1;j<=(num*2)-(2*i);j++)
            {
                System.out.print("- ");
            }
            for(int j=i;j>=1;j--)
            {
                System.out.print(j+" ");
            }
            System.out.println();
        }
    }
}

//output: 
1 - - - - - - - - 1     1 8 1
1 2 - - - - - - 2 1     2 6 2
1 2 3 - - - - 3 2 1     3 4 3
1 2 3 4 - - 4 3 2 1     4 2 4
1 2 3 4 5 5 4 3 2 1     5 0 5

*/

//--------------------------------------

//13.
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5,temp=1;
        for(int i=0;i<num;i++)
        {
            for(int j=0;j<i+1;j++)
            {
                System.out.print(temp+++" ");
            }
            System.out.println();
        }
    }
}
//output:
1 
2 3
4 5 6
7 8 9 10
11 12 13 14 15
*/


//------------------------------------

//14.
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        for(int i=0;i<num;i++)
        {
            for(int j=0;j<i+1;j++)
            {
                System.out.print((char)(65+j)+" ");
            }
            System.out.println();
        }
    }
}
//output:
A 
A B
A B C
A B C D
A B C D E
*/

//----------------------------------------

//15.
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        for(int i=0;i<num;i++)
        {
            for(int j=0;j<num-i;j++)
            {
                System.out.print((char)(65+j)+" ");
            }
            System.out.println();
        }
    }
}
A B C D E 
A B C D
A B C
A B
A
*/

//------------------------------

//16.
/* 

public class MainJava {
    public static void main(String[] args) {
        int num=5;
        for(int i=0;i<num;i++)
        {
            for(int j=0;j<=i;j++)
            {
                System.out.print((char)(65+i)+" ");
            }
            System.out.println();
        }
    }
}
A 
B B
C C C
D D D D
E E E E E

*/

//----------------------------------

//17.
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        
        for(int i=0;i<num;i++)
        {
            for(int j=0;j<num-i-1;j++)
            {
                System.out.print("- ");
            }
            char ch='A';
            int breakpoint=(2*i+1)/2;
            for(int j=1;j<=(2*i)+1;j++)
            {
                System.out.print(ch+" ");
                if(j<=breakpoint)
                {
                    ch++;
                }
                else
                {
                    ch--;
                }
            }
            for(int j=0;j<num-i-1;j++)
            {
                System.out.print("- ");
            }
            System.out.println();
        }
    }
}
//output:
- - - - A - - - - 
- - - A B A - - -
- - A B C B A - -
- A B C D C B A -
A B C D E D C B A
*/

//------------------------------------------

//18.
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5,ch=65+(num-1);
        for(int i=0;i<num;i++)
        {
            for(int j=0;j<i+1;j++)
            {
                System.out.print((char)(ch+j)+" ");
            }
            ch--;
            System.out.println();
        }
    }
}
//output:
E 
D E
C D E
B C D E
A B C D E
*/

//-------------------------------------------------

//21.
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        for(int i=0;i<num;i++)
        {
            if(i==0||i==num-1)
            {
                for(int j=0;j<num;j++)
                {
                    System.out.print("* ");
                }
                System.out.println("\n");
            }
            else 
            {
                for(int j=0;j<num;j++)
                {
                    System.out.print(j==0||j==num-1?"* ":"  ");
                }
                System.out.println("\n");
            }

        }
    }
}
//output:
* * * * * 

*       * 

*       * 

*       * 

* * * * *
*/

//-------------------------------------------------

//22.
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        for(int i=1;i<=num;i++)
        {
            for(int j=1;j<=num;j++)
            {
                if(i==j)
                {
                    System.out.print(i);
                }
                else if(j==num-i+1)
                {
                    System.out.print(num-i+1);
                }
                else
                {
                    System.out.print(" ");
                }
            }
            System.out.println();
        }
    }
}
//output:
1   5
 2 4
  3
 2 4
1   5
*/

//--------------------------------------------------
//23.
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        num=num*2;
        for(int i=0;i<=num;i++)
        {
            for(int j=0;j<=num;j++)
            {
                int temp=Math.min(Math.min(i,j),Math.min(num-i, num-j));
                System.out.print(temp+" ");
            }
            System.out.println();
        }
    }
}
//output:
0 0 0 0 0 0 0 0 0 0 0 
0 1 1 1 1 1 1 1 1 1 0 
0 1 2 2 2 2 2 2 2 1 0 
0 1 2 3 3 3 3 3 2 1 0 
0 1 2 3 4 4 4 3 2 1 0 
0 1 2 3 4 5 4 3 2 1 0 
0 1 2 3 4 4 4 3 2 1 0 
0 1 2 3 3 3 3 3 2 1 0 
0 1 2 2 2 2 2 2 2 1 0 
0 1 1 1 1 1 1 1 1 1 0
*/

//----------------------------------------------------------------------------------------------------------------------------------


//2.basics maths 

//1.count digit:
/* 
public class MainJava {
    public static void main(String[] args)
    {
        int num=1223,ctr=0;
        while(num>0)
        {
            ctr++;
            num/=10;
        }
        System.out.println(ctr);
    }
}
*/
//2.reverse number
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=-123,reverse=0;
        while(num!=0)
        {
            reverse=reverse*10+num%10;
            num/=10;
        }
        System.out.println(reverse);
    }
}
*/
//3.Palindrome Number
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=-121;
        if(num<0)
        {
            System.out.println(false);
            return;
        }
        int reverse=0,N=num;
        while(num!=0)
        {
            reverse=reverse*10+num%10;
            num/=10;
        }
        System.out.println(N==reverse);

    }
}
*/
//4.armstrong number 
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=371,len=(int)(Math.log10(num)+1),sum=0,N=num;
        while(num>0)
        {
            sum=sum+(int)(Math.pow(num%10,len));
            num/=10;
        }
        System.out.println(sum==N?"Yes":"No");//Yes
    }
}
*/
//5.Print all Divisors
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=36;
        for(int i=1;i<=num;i++)
        {
            if(num%i==0)
            {
                System.out.print(i+" ");//1 2 3 4 6 9 12 18 36 
            }
        }
    }
}
*/
//6.check for prime
/* 
import java.net.Socket;
class Prime
{
    public int isPrime(int num)
    {
        for(int i=2;i*i<=num;i++)
        {
            if(num%i==0){return 0;}
        }
        return 1;
    }
}
public class MainJava {
    public static void main(String[] args) {
        int num=22;
        if(num<=1)
        {
            System.out.print("No a Prime number");
            return;
        }
        Prime obj = new Prime();
        
        System.out.println(obj.isPrime(num)==1?"Prime Number":"Not a Prime Number");
    }
}
*/
//7.GCD (great common Divisor) or HCF Highest common factor
/* 
public class MainJava {
    public static void main(String[] args) {
        int num1=9,num2=12;
        for(int i=Math.min(num1, num2);i>=1;i--)
        {
            if(num1%i==0&&num2%i==0)
            {
                System.out.println(i); // 3
                return;
            }
        }
    }
}
*/

//-----------------------------------------------------------------------------------------------------------------------------------------
//3.recursion-when a function calls itself until a specified condition is met without base condition stack overflow is occur


//1.print name 5 times
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        function1(num);
    }
    static void function1(int num)
    {
        if(num==0)
        {
            return;
        }
        System.out.print("Hi ");//Hi Hi Hi Hi Hi 
        function1(num-1);//5 4 3 2 1 0
    }
}
*/
//2.print 1 to n
/* 
public class MainJava {
    public static void main(String[] args) {
        function(10, 1);
    }
    static void function(int num,int start)
    {
        if(num<start)
        {
            return;
        }
        System.out.print(start+" ");//1 2 3 4 5 6 7 8 9 10 
        function(num, start+1);
    }
}
*/
//3.print n to 1 and 1 to n
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        function(num);
    }
    static void function(int num)
    {
        if(num==0)
        {
            return;
        }
        System.out.print(num+" ");// 5 4 3 2 1
        function(num-1); // (5) 4 3 2 1 0
        System.out.print(num+" ");//1 2 3 4 5
    }
}
*/
//4.print 1 to n and  n to 1
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        function1(1,num);// 1 2 3 4 5
        System.out.println();
        function2(num);// 5 4 3 2 1
    }
    static void function1(int s,int num)
    {
        if(num<s)
        {
            return;
        }
        System.out.print(s+" ");
        function1(s+1, num);
    }
    static void function2(int num)
    {
        if(num==0)
        {
            return;
        }
        System.out.print(num+" ");
        function2(num-1);
    }
}
*/
//5.1 to n using bactracking
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        function(num);// 1 2 3 4 5
    }
    static void function(int num)
    {
        if(num==0)
        {
            return;
        }
        function(num-1);
        System.out.print(num+" "); 
    }
}
    function(5)   print(5)
        |            |
    function(4)   print(4)
        |            |
    function(3)   print(3)
        |            |
    function(2)   print(2)
        |            |
    function(1)    print(1)
        |            |
        V            |
    function(0) -> (return 0)      
*/
//6. n to 1 using bactracking
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        function(num);
    }
    static void function(int num)
    {
        if(num==0)
        {
            return;
        }
        System.out.print(num+" ");
        function(num-1);
    }
}
*/
//7.sum of n number
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        System.out.println(function(num, 0));//15
    }
    static int function(int num,int sum)
    {
        if(num==0)
        {
            return sum;
        }
        //sum=sum+num;  also same
        return function(num-1, sum+num);   
        //             5 0+5
        //             4 5+4
        //             3 9+3
        //             2 12+2
        //             1  14+1
        //             0 (return)
    }
}
*/
//8.sum of n number
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        System.out.println(function1(num));
    }
    static int function1(int num)
    {
        if(num==0)
        {
            return num;// 0
        }
        return num+function1(num-1);
        // 5+fun(4)                       5+10
        //   4+fun(3)                     4+6
        //      3+fun(2)                  3+3
        //        2+fun(1)                2+1
        //          1+fun(0)-->(return)-->1+0
        //              
    }
}
*/
//9.factorial of n
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        System.out.println(function1(num));
    }
    static int function1(int num)
    {
        if(num==0)
        {
            return 1;
        }
        return num*function1(num-1);
        // 5+fun(4)                       5*24
        //   4+fun(3)                     4*6
        //      3+fun(2)                  3*2
        //        2+fun(1)                2*1
        //          1+fun(0)-->(return)-->1*1
        //              
    }
}
*/
//10.reverse array
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={1,2,3,4,5,6,7};
        fun(arr, 0, arr.length-1); // arr 0 6
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
    static void fun(int arr[],int start ,int end)
    {
        if(start>=end)
        {
            return;
        }
        int temp=arr[start];
        arr[start]=arr[end];
        arr[end]=temp;
        fun(arr, start+1, end-1);
        // swap(0,6)
        // fun(arr,1,5)
        //          |
        //     swap(1,5)
        //     fun(arr,2,4)
        //            |
        //        swap(2,4)
        //        fun(arr,3,3) --> return 

    }
}
*/
//11.reverse array
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={1,2,3,4,5,6,7};
        fun(arr, 0); // arr 0 6
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
    static void fun(int arr[],int start)
    {
        if(start>=arr.length/2)
        {
            return;
        }
        int temp=arr[start];
        arr[start]=arr[arr.length-1-start];
        arr[arr.length-1-start]=temp;
        fun(arr, start+1);
    }
}
*/
//12.string palindrome or not
/* 
public class MainJava {
    public static void main(String[] args) {
        String str="malayalam";
        System.out.println(function(str, 0));// true
    }
    static boolean function(String str,int start)
    {
        if(start>=str.length()/2)
        {
            return true;
        }
        if(str.charAt(start)!=str.charAt(str.length()-1-start))
        {
            return false;
        }
        return function(str, start+1);
    }
}
// function("malayalam", 0)
//     |
//     |--- function("malayalam", 1)  // str.charAt(0) == str.charAt(8) ('m' == 'm')
//             |
//             |--- function("malayalam", 2)  // str.charAt(1) == str.charAt(7) ('a' == 'a')
//                     |
//                     |--- function("malayalam", 3)  // str.charAt(2) == str.charAt(6) ('l' == 'l')
//                             |
//                             |--- function("malayalam", 4)  // str.charAt(3) == str.charAt(5) ('a' == 'a')
//                                     |
//                                     |--- function("malayalam", 5)  // start >= str.length()/2 (base case)
//                                             |
//                                             |--- return true
//                                     |
//                                     |--- return true
//                             |
//                             |--- return true
//                     |
//                     |--- return true
//             |
//             |--- return true
//     |
//     |--- return true
*/
//13.multiple recursion calls (fibonacce number)
// 0 1 2 3 4 5 6 
// 0 1 1 2 3 5 8
/* 
public class MainJava {
    public static void main(String[] args) {
        System.out.println(fib(6));
    }
    static int fib(int num)
    {
        if(num<=1)
        {
            return num;
        }
        int last=fib(num-1);
        int slast=fib(num-2);
        return last+slast;
    }
}
*/
//-------------------------------------------------------------------------------------------------------------------------------
//4.Hashing or Mapping

//1.Frequencies of Limited Range Array Elements
/*
// Input:
// N = 5
// arr[] = {2, 3, 2, 3, 5}
// Output:
// 0 2 2 0 1 
public class MainJava {
    public static void main(String[] args) {
        int N=5;
        int arr[]={2,3,2,3,5};
        int temp[]=new int[N+1];
        for(int i=0;i<N;i++)
        {
            temp[arr[i]]++;
        }
        for(int i=1;i<=N;i++)
        {
            System.out.println(i+"-->"+temp[i]);
        }
    }
}
*/

//2. 
// int inside of main size will be a arr[1e6] 1e6 ==> 10^6
// int global declaration is size will be arr[1e7] ==> 10^7
// boolean inside of main size will be a arr[1e7] 1e7 ==> 10^7
// boolena global declaration is size will be arr[1e8] ==> 10^8

//-------------------------------------------------------------------------------------------------------------------------------
//5.sorting
//1.bubble sort
//time complexity:o(n^2)
//space complexity:o(1)
/* 
public class MainJava {
    public static void main(String[] args) 
    {
        int arr[]={13,46,24,52,20,9};
        int len=arr.length;
        bubbleSort1(arr, len);
        for(int i=0;i<len;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
    static void bubbleSort1(int arr[],int len)
    {
        for(int i=len-1;i>=0;i--)
        {
            for(int j=0;j<=i-1;j++)
            {
                if(arr[j]>arr[j+1])
                {
                    int temp=arr[j];
                    arr[j]=arr[j+1];
                    arr[j+1]=temp;
                }
            }
        }
    }
}
*/
//2.selection sorting
//time complexity:o(n^2);
//space complexity:o(1)
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={13,46,24,52,20,9,0};
        int len=arr.length;
        for(int i=0;i<len;i++)
        {
            int min=i;
            for(int j=i;j<len;j++)
            {
                if(arr[j]<arr[min])
                {
                    min=j;
                }
            }
            int temp=arr[min];
            arr[min]=arr[i];
            arr[i]=temp;
        }
        for(int i=0;i<len;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
}
*/
//3.inselection sort
//time complexity:o(n^2)
//space complexity:o(1)
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={4,5,1,2,3};
        int len=arr.length;
        for(int i=0;i<arr.length-1;i++)
        {
            for(int j=i+1;j>0;j--)
            {
                if(arr[j]<arr[j-1])
                {
                    int temp=arr[j];
                    arr[j]=arr[j-1];
                    arr[j-1]=temp;
                }
                else
                {
                    break;
                }
            }
        }
        for(int i=0;i<len;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
}
*/
//-------------------------------------------------------------------------------------------------------
//5.arrays
//1.longest second number in  array
/* 
import java.util.*;
public class MainJava {
    public static void main(String[] args) {
        int arr[]={1,23,342,1,12,23};
        System.out.println(longest(arr));
    }
    static int longest(int arr[])
    {
        int f_l=arr[0],s_l=Integer.MAX_VALUE;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]<f_l)
            {
                s_l=f_l;
                f_l=arr[i];
            }
            else if(arr[i]!=f_l&&arr[i]<s_l)
            {
                s_l=arr[i];
            }
        }
        return s_l;
    }
}
*/
//2.array is sorted or not
/*
public class MainJava {
    public static void main(String[] args) {
        int arr[]={2,3,4,5,1};
        for(int i=0;i<arr.length-1;i++)
        {
            if(arr[i]>arr[i+1])
            {
                System.out.println("Array Unsorted");
                return;
            }
        }
        System.out.println("Array is sorted");
    }
}
*/
//3.Left Rotate an array by one place
/* 
public class MainJava 
{
    public static void main(String[] args)
    {
        int arr[]={1,2,3,4,5};
        int temp=arr[0],i;
        for(i=1;i<arr.length;i++)
        {
            arr[i-1]=arr[i];
        }
        arr[i-1]=temp;
        for(i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");//2 3 4 5 1 
        }
    }
}
*/
//4.Left rotate an array by D places
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={1,2,3,4,5,6,7,8,9},k=3;
        // 4 5 6 7 8 9 1 2 3
        if(k>=arr.length)
        {
            k=k%arr.length;
        }
        int i=k;
        while(i<arr.length)
        {
            System.out.print(arr[i++]+" ");
        }
        i=0;
        while(i<k)
        {
            System.out.print(arr[i++]+" ");
        }

    }
}
*/
//5.Move Zeros to end
/* 
public class MainJava {
    public static void main(String[] args) {
        int[] arr = {1, 0, 2, 3, 2, 0, 0, 4, 5, 1};
        int j=0,z=0;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]!=0){arr[j++]=arr[i];}
            else{z++;}
        }
        while(j<arr.length)
        {
            arr[j++]=0;
        }
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
}
*/
//6.missing number 
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={3,0,1};
        for(int i=0;i<arr.length;)
        {
            int index=arr[i];
            if(arr[i]<arr.length&&arr[i]!=arr[index])
            {
                int temp=arr[i];
                arr[i]=arr[index];
                arr[index]=temp;
            }
            else
            {
                i++;
            }
        }
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]!=i)
            {
                System.out.println(i);
                return;
            }
        }
        System.out.println(arr.length);
    }
}
//output:2
*/
//7.Maximum Consecutive Ones
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={1,1,0,1,1,1,0,1,1,1,1,0};
        int ctr=0,max=0;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]==1){ctr++;}
            else
            {
                if(max<ctr)
                {
                    max=ctr;
                    ctr=0;
                }
            }
            if(i==arr.length-1)
            {
                if(max<ctr)
                {
                    max=ctr;
                }
            }
        }
        System.out.println(max);//4
    }
}

*/
//8.Find the number that appears once, and other numbers twice.
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={1,1,2,2,3,4,5,4,5};
        int temp=0;
        for(int i=0;i<arr.length;i++)
        {
            temp=temp^arr[i];
        }
        System.out.println(temp); //3
    }
}
*/
//9.longest substring 
/* 
public class MainJava {
    public static void main(String[] args) {
        int A[] = {10, 5, 2, 7, 1, 9};
        int K=15;
        System.out.println(lenOfLongSubarr(A, A.length, K));
    }
    static int lenOfLongSubarr (int A[], int N, int K) {
        int left=0,right=0,max=0;
        long sum=A[0];
        while(right<N)
        {
            while(left<=right&&sum>K)
            {
                sum=sum-A[left];
                left++;
            }
            if(sum==K)
            {
                if(max<right-left+1)
                {
                    max=right-left+1;
                }
            }
            right++;
            if(right<N){sum=sum+A[right];}
        }
        return max;
    }
}
*/
//10.2sum
/* 
import java.util.ArrayList;
import java.util.HashMap;
public class MainJava {
    public static void main(String[] args) {
        int arr[]={2,6,5,8,11};
        int target=14;
        
        System.out.println(fun(arr, target));// YES

        for(int i=0;i<arr.length;i++)
        {
            for(int j=i+1;j<arr.length-1;j++)
            {
                if(arr[i]+arr[j]==target)
                {
                    System.out.println("YES");
                    return;
                }
            }
        }
        System.out.println("NO");

    }
    static String fun(int arr[],int target)
    {
        ArrayList <Integer> list = new ArrayList<>();
        for(int i=0;i<arr.length;i++)
        {
            int temp=target-arr[i];
            if(list.contains(temp))
            {
                return "YES";
            }
            list.add(arr[i]);
        }
        return "NO";
    }
}
*/
//11.sorting in 0 1 2
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={0, 2, 1, 2, 0, 1};
        int s=0,i=0,e=arr.length-1;
        while(i<=e)
        {
            if(arr[i]==0)
            {
                int temp=arr[i];
                arr[i]=arr[s];
                arr[s]=temp;
                s++;
                i++;
            }
            else if(arr[i]==2)
            {
                int temp=arr[i];
                arr[i]=arr[e];
                arr[e]=temp;
                e--;
            }
            else if(arr[i]==1)
            {
                i++;
            }
        }
        for(int k=0;k<arr.length;k++)
        {
            System.out.print(arr[k]+" ");
        }
    }
}
*/
//12.Majority Element n/2
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={2,2,3,3,1,2,2};
        System.out.println(Brute(arr));// 2

        System.out.println(Brute(arr));// 2
    }
    static int Brute(int arr[])
    {
        for(int i=0;i<arr.length;i++)
        {
            int ctr=0;
            for(int j=0;j<arr.length;j++)
            {
                if(arr[i]==arr[j])
                {
                    ctr++;
                }
            }
            if(ctr>arr.length/2)
            {
                return arr[i];
            }
        }
        return -1;
    }
    static int DryRun(int arr[])
    {
        int element=0,ctr=0;
        for(int i=0;i<arr.length;i++)
        {
            if(ctr==0)
            {
                element=arr[i];
                ctr=1;
            }
            else if(element==arr[i])
            {
                ctr++;
            }
            else
            {
                ctr--;
            }
        }
        return element;
    }

}
*/
//13.Kadane's Algorithm maximum subarray 
/* 
import java.util.*;
public class MainJava {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int arr[]={-2,1,-3,4,-1,2,1,-5,4};
        // 4 -1 2 1 ==> 6
        int max=0,sum=0;
        for(int i=0;i<arr.length;i++)
        {
            sum+=arr[i];
            if(sum>max){max=sum;}
            if(sum<0){sum=0;}
        }
        System.out.println(max);
    }
}
*/
//14.Rearrange Array Elements by Sign positive == negative size
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={3,1,-2,-5,2,-4},e=0,o=1;
        int temp[]=new int[arr.length];
        //  3 -2 1 -5 2 -4
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]>0)
            {
                temp[e]=arr[i];
                e=e+2;
            }
            else
            {
                temp[o]=arr[i];
                o=o+2;
            }
        }
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(temp[i]+" ");
        }
    }
}
*/
//15.Rearrange Array Elements by Sign positive != negative size
/* 
     it's not a posible to do optimal solution so use butte or butter
*/

//16.Leaders in an Array problem
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={10,22,12,3,0,6};
        int max=0;
        for(int i=arr.length-1;i>=0;i--)
        {
            if(max<arr[i])
            {
                System.out.print(arr[i]+" ");//6 12 22
                max=arr[i];
            }
        }
        //using recursion in java
        System.out.println();
        function(arr, arr.length-1,0);//6 12 22
    }
    static void function(int arr[],int end,int max)
    {
        if(end==-1)
        {
            return;
        }
        if(max<arr[end])
        {
            System.out.print(arr[end]+" ");
            max=arr[end];
        }
        function(arr, end-1, max);
    }
}
*/


//17.Longest Consecutive Sequence
/* 
import java.util.*;
public class MainJava {
    public static void main(String[] args) {
        int arr[]={102,4,100,1,101,3,2,1,1},max=0;
        ArrayList<Integer> array = new ArrayList<>();
        for(int i=0;i<arr.length;i++)
        {
            if(!array.contains(arr[i])){array.add(arr[i]);}
        }
        for(int i=0;i<array.size();i++)
        {
            int len=0;
            int element=array.get(i);
            while(array.contains(element))
            {
                len++;
                element++;
            }
            if(max<len){max=len;}
        }
        System.out.println(max);
    }
}
*/

//18.set matrix as zero  
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[][]=
        {
            {1,1,1},
            {1,0,1},
            {1,1,1}
        };
        setZeroes(arr);
    }
    static void setZeroes(int[][] arr) {
        int col00=1;
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr[i].length;j++)
            {
                if(arr[i][j]==0)
                {
                    //row
                    arr[i][0]=0;
                    //col
                    if(j!=0)
                    {
                        arr[0][j]=0;
                    }
                    else
                    {
                        col00=0;
                    }
                }
            }
        }
        //inside a arr without col1 and row1
        for(int i=1;i<arr.length;i++)
        {
            for(int j=1;j<arr[i].length;j++)
            {
                if(arr[i][0]==0||arr[0][j]==0)
                {
                    arr[i][j]=0;
                }
            }
        }
        if(arr[0][0]==0)
        {
            for(int i=0;i<arr[0].length;i++)
            {
                arr[0][i]=0;
            }
        }
        if(col00==0)
        {
            for(int i=0;i<arr.length;i++)
            {
                arr[i][0]=0;
            }
        }
    }
}
*/
//19.Rotate Image by 90 degree
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[][]=
        {
            {1,2,3},
            {4,5,6},
            {7,8,9}
        };
        int len=arr.length;
        for(int i=0;i<len;i++)
        {
            for(int j=0;j<len;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
        function(arr);
        System.out.println("----------90-----------");
        for(int i=0;i<len;i++)
        {
            for(int j=0;j<len;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
        function(arr);
        System.out.println("----------180-----------");
        for(int i=0;i<len;i++)
        {
            for(int j=0;j<len;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
        function(arr);
        System.out.println("----------270-----------");
        for(int i=0;i<len;i++)
        {
            for(int j=0;j<len;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
        function(arr);
        System.out.println("----------360-----------");
        for(int i=0;i<len;i++)
        {
            for(int j=0;j<len;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
    }
    static void function(int arr[][])
    {
        //transpose
        for(int i=0;i<arr.length;i++)
        {
            for(int j=i;j<arr[0].length;j++)
            {
                int temp=arr[i][j];
                arr[i][j]=arr[j][i];
                arr[j][i]=temp;
            }
        } 
        //reverse
        int len=arr.length;
        for(int i=0;i<len;i++)
        {
            for(int j=0;j<len/2;j++)
            {
                int temp=arr[i][j];
                arr[i][j]=arr[i][len-1-j];
                arr[i][len-1-j]=temp;
            }
        }
    }
}
*/
//20.sprial matrix 
/* 
import java.util.ArrayList;
import java.util.List;

public class MainJava {
    public static void main(String[] args) {
        int arr[][]=
        {
            {1,2,3,4,5},
            {6,7,8,9,10},
            {11,12,13,14,15},
            {16,17,18,19,20},
            {21,22,23,24,25}
        };
        List<Integer> temp = new ArrayList<Integer>();
        int row_s=0,row_e=arr.length-1,col_s=0,col_e=arr[0].length-1;
        while(row_s<=row_e&&col_s<=col_e)
        {
            for(int i=col_s;i<=col_e;i++)
            {
                temp.add(arr[row_s][i]);
            }
            row_s++;
            for(int i=row_s;i<=row_e;i++)
            {
                temp.add(arr[i][col_e]);
            }
            col_e--;
            if(row_s>row_e||col_s>col_e)
            {
                break;
            }
            for(int i=col_e;i>=col_s;i--)
            {
                temp.add(arr[row_e][i]);
            }
            row_e--;
            for(int i=row_e;i>=row_s;i--)
            {
                temp.add(arr[i][col_s]);
            }
            col_s++;
        }
        for(int i=0;i<temp.size();i++)
        {
            System.out.print(temp.get(i)+" ");
        }
    }
}
*/
//21.pascal triangle
/* 
class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> col = new ArrayList<>();
        for(int i=0;i<numRows;i++)
        {
            List<Integer> row =new ArrayList<>();
            for(int j=0;j<=i;j++)
            {
                if(j==0||j==i)
                {
                    row.add(1);
                }
                else
                {
                    List<Integer> pre = col.get(i-1);
                    row.add(pre.get(j)+pre.get(j-1));
                }
            }
            col.add(row);
        }
        return col;
        
    }
}
*/
//-------------------------------------------------------------------------------------------------------
//binary search:

//1.binary search in recursion
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={3,4,6,7,9,12,16,17},target=17;
        System.out.println(fun(arr, 0, arr.length-1, target));
    }
    static int fun(int arr[],int start,int end,int target)
    {
        if(start>end)
        {
            return -1;
        }
        int mid=start+(end-start)/2;
        if(target>arr[mid])
        {
            start=mid+1;
            return fun(arr, start, end, target);
        }
        else if(target<arr[mid])
        {
            end=mid-1;
            return fun(arr, start, end, target);
        }
        return mid;
    }
}
*/
//2.Search Insert Position
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={1,3,5,6},target=5;
        int start=0,end=arr.length-1,ans=arr.length;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(arr[mid]>=target)
            {
                ans=mid;
                end=mid-1;
            }
            else
            {
                start=mid+1;
            }
        }
        System.out.println(ans);
    }
}
*/

//3.Search Element in Rotated Sorted Array-I
/* 
public class MainJava {
    public static void main(String[] args)
    {
        int arr[]={7,8,9,1,2,3,4,5,6},target=1;
        int start=0,end=arr.length-1;
        while(start<=end)
        {
            int mid=start+(end-start);
            if(arr[mid]==target)
            {
                System.out.println(mid);
                return;
            }
            if(arr[start]<=arr[mid])
            {
                if(arr[start]<=target &&target<=arr[mid])
                {
                    end=mid-1;
                }
                else
                {
                    start=mid+1;
                }
            }
            else
            {
                if(arr[mid]<=target &&target<=arr[end])
                {
                    start=mid+1;
                }
                else
                {
                    end=mid-1;
                }
            }
        }
        System.out.println(-1);
    }
}
*/
//4.Minimum in Rotated Sorted Array
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={4,5,1,2,3};
        int start=0,end=arr.length-1;
        int ans=Integer.MAX_VALUE;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(arr[start]<arr[mid])
            {
                ans=Math.min(ans,arr[start]);
                start=mid+1;
            }
            else
            {
                ans=Math.min(ans,arr[mid]);
                end=mid-1;
            }
        }
        System.out.println(ans);
    }
}
*/

//-------------------------------------------------------------------------------------------------------------------------------------
//recursion
//1.Merge sort
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[] = {38, 27, 43, 3, 9, 82, 10};
        int left = 0, right = arr.length - 1;
        mergesort(arr, left, right);
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
    }
    static void mergesort(int arr[], int left, int right) {
        if (left < right) {
            int mid = left + (right - left) / 2;
            mergesort(arr, left, mid);
            mergesort(arr, mid + 1, right);
            merge(arr, left, mid, right);
        }
    }
    static void merge(int arr[], int left, int mid, int right) {
        int n1 = mid - left + 1;
        int n2 = right - mid;
        int L[] = new int[n1];
        int R[] = new int[n2];
        for (int i = 0; i < n1; i++) {
            L[i] = arr[left + i];
        }
        for (int j = 0; j < n2; j++) {
            R[j] = arr[mid + 1 + j];
        }
        int i = 0, j = 0, k = left;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }
}
*/
//2.pow function 
/* 
public class Main {
    public static void main(String[] args)
    {
        double x=2.00000;
        int n=10;
       System.out.println( myPow(x, n));
    }
    static double myPow(double x, int n)
    {
        double ans = 1.0;
        long nn = n;
        if (nn < 0) nn = -1 * nn;
        while (nn > 0) {
          if (nn % 2 == 1) {
            ans = ans * x;
            nn = nn - 1;
          } else {
            x = x * x;
            nn = nn / 2;
          }
        }
        if (n < 0) ans = (double)(1.0) / (double)(ans);
        return ans;
      }
}
*/
//3.sqrt
/* 
public class Main {
    public static void main(String[] args) {
        int x=4;
        int start=0,end=x;
        int ans=0;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(mid<=x/mid)
            {
                start=mid+1;
                ans=mid;
            }
            else
            {
                end=mid-1;
            }
        }
        System.out.println(ans);
    }
}
*/

//------------------------------------------------------------------------------------------------------------------------
//bit manipulation in java
//  int x=1 --->            ..000 0001  --->32 bit   
//  long x=1 --->            ..000 0001  --->64 bit           

//1.check if the ith bit is set or not:
/* 
public class Main {
    public static void main(String[] args) {
        int N=13;
        int i=2;
        //left shift
        if( ( N & (1<<2))!=0)
        {
            System.out.println("ith bit is set...." ); 
        }
        else
        {
            System.out.println("ith bit is not set....");
        }
        //right shift
        if( ((N>>2)&1) !=0)
        {
            System.out.println("ith bit is set...." ); 
        }
        else
        {
            System.out.println("ith bit is not set....");
        }
        System.out.println(N); //13
    }
}
*/
//2.get ith bit
/* 
public class Main {
    public static void main(String[] args) {
        int N=13;
        int i=2;
        System.out.println( ((N>>2)&1) );
    }
}
*/
//3.set the ith bit
/* 
public class Main {
    public static void main(String[] args) {
        int N=9;
        int i=2;
        System.out.println( (N|( 1<<i)) );//13
    }
}
*/
//4.clear ith bit 
/* 
public class Main {
    public static void main(String[] args) {
        int N=13;
        int i=2;
        System.out.println( ( N & ~(1<<iv )) );//9
    }
}
*/
//5.toggle the ith bit
/* 
public class Main {
    public static void main(String[] args) {
        int N=13;
        int i=2;
        System.out.println( (N ^ (1<<i)));//7
    }
}
*/
//6.remove the last set bit (right most)
/* 
public class Main {
    public static void main(String[] args) {
        int num=13;
        System.out.println( num&num-1);// 12
    }
}
*/
//7.check if the number is a power 2
/* 
public class Main {
    public static void main(String[] args) {
        int num=15;
        if((num&num-1)==0)
        {
            System.out.println("power 2");
        }
        else
        {
            System.out.println("Not power 2");
        }
    }
}
*/
//8.count set bit in given number
/* 
public class Main {
    public static void main(String[] args) {
        int num=12,ctr=0;
        while(num>0)
        {
            if(num%2==1)
            {
                ctr++;
            }
            num/=2;
        }
        System.out.println(ctr);
        num=12;
        ctr=0;
        while(num>0)
        {
            ctr+=num&1;
            num=num>>1;//num=num/2
        }
        System.out.println(ctr);
        num=12;
        ctr=0;
        while(num!=0)
        {
          num=num&(num-1);
          ctr++;
        }
        System.out.println(ctr);
    }
        //in binary search ---> use (low+high)>>1
}
*/
//9.mininum bit flips to covert the number a to b
/* 
public class Main {
    public static void main(String[] args) {
        int a=10,b=7;
        int ans=a^b;
        //10 --> 1 0 1 0
        //7  --> 0 1 1 1
        //^  --> 1 1 0 1
        int ctr=0;
        while(ans!=0)
        {
            ans=ans&ans-1;
            ctr++;
        } 
        System.out.println(ctr);//3
    }
}
*/
//10.power set (print all subsets)  
/* 
import java.util.*;
pubic class Main {
    public static void main(String[] args) {
        int num = 3;
        int arr[] = {1, 2, 3};
        int subset = 1 << num;
        List<List<Integer>> ans = new ArrayList<>();

        for (int i = 0; i < subset; i++) {
            List<Integer> temp = new ArrayList<>();
            for (int j = 0; j < num; j++) {
                if ((i & (1 << j)) != 0) {
                    temp.add(arr[j]);
                }
            }
            ans.add(temp);
        }

        for (int i = 0; i < ans.size(); i++) {
            System.out.println(ans.get(i));
        }
    }
}
*/ 
//11.single number I
/* 
public class Main {
    public static void main(String[] args) {
        int arr[]={4,1,2,1,2};
        int ans=0;
        for(int i=0;i<arr.length;i++)
        {
            ans=ans^arr[i];
        }
        System.out.println(ans);//4
    }
}
*/
//12.xor 1 to n
/* 
public class Main {
    public static void main(String[] args) {
        int num=7;
        // num=1    --->       1      ---> 1
        // num=2    --->      1^2     ---> 3   
        // num=3    --->     1^2^3    ---> 0
        // num=4    --->    1^2^3^4   ---> 4
        
        // num=5    --->              ---> 1
        // num=6    --->              ---> 7   
        // num=7    --->              ---> 0
        // num=8    --->              ---> 8
        System.out.println(fun(6));//7
    }
    static int fun(int num)
    {
        if(num%4==1)
        {
            return 1;
        }
        else if(num%4==2)
        {
            return num+1;
        }
        else if(num%4==3)
        {
            return 0;
        }
        else
        {
            return num;
        }
    }
}
*/
//13.xor a to b
/* 
public class Main {
    public static void main(String[] args) {
        int a=4,b=7;
        System.out.println(fun(a-1)^fun(b));//7
    }
    static int fun(int num)
    {
        if(num%4==1)
        {
            return 1;
        }
        else if(num%4==2)
        {
            return num+1;
        }
        else if(num%4==3)
        {
            return 0;
        }
        else
        {
            return num;
        }
    }
}
*/
//divide two integers without using 
/* 
public class Main {
    public static void main(String[] args) {
        int dividend=22,divisor=3;
        int sum=0,ctr=0;
        while(sum+divisor<=dividend)
        {
            ctr++;
            sum+=divisor;
        }
        System.out.println("Div: "+ctr); //7
        System.out.println("Mod: "+(dividend-sum));//1
    }
}
*/
//1.island
/* 
class Solution {
    public int numIslands(char[][] grid) {
        int ans=0;
        for(int i=0;i<grid.length;i++)
        {
            for(int j=0;j<grid[0].length;j++)
            {
                if(grid[i][j]=='1')
                {
                    ans+=1;
                    fn(grid,i,j);
                }
            }
        }
        return ans;
    }
    static void fn(char ch[][],int i,int j)
    {
        if(i<0 || i>=ch.length ||j<0||j>=ch[0].length||ch[i][j]=='0')
        {
            return;
        }
        ch[i][j]='0';
        fn(ch,i,j+1);
        fn(ch,i,j-1);
        fn(ch,i+1,j);
        fn(ch,i-1,j);
    }
}
*/
//2.time to buy and sell
/* 
class Solution {
    public int maxProfit(int[] prices) {
        int minsharebuy=prices[0],maxprofit=0;
        for(int i=1;i<prices.length;i++)
        {
            int cost = prices[i]-minsharebuy;
            if(cost>maxprofit)
            {
                maxprofit=cost;
            }
            if(minsharebuy>prices[i])
            {
                minsharebuy=prices[i];
            }
        }
        return maxprofit;
    }
}
*/
//3.jump game
/* 
public class Main {
    public static void main(String[] args) {
        int arr[]={2,3,1,1,4};
        int step=arr[i];
        for(int i=1;i<arr.length;i++)
        {
            step--;
            if(step<0)
            {
                System.out.println("TRUE");
                break;
            }
            if(i==arr.length-1)
            {
                System.out.println("FALSE");
                break;
            }
            if(step<arr[i])
            {
                step=arr[i];
            }
        }
        System.out.println(step);
    }
}
*/
//4.
/* 
class Solution {
    public int romanToInt(String s) {
        Map <Character,Integer> temp = new HashMap<>();
        temp.put('I',1);
        temp.put('V',5);
        temp.put('X',10);
        temp.put('L',50);
        temp.put('C',100);
        temp.put('D',500);
        temp.put('M',1000);
        int i,result=temp.get(s.charAt(s.length()-1));
        for(i=s.length()-2;i>=0;i--)
        {
            if(temp.get(s.charAt(i))<temp.get(s.charAt(i+1)))
            {
                result-=temp.get(s.charAt(i));
            }
            else 
            {
                result+=temp.get(s.charAt(i));
            }
        }
        return result;
     }
}
*/

//---------------------------------------------------------------------------------------------------------------------
//two pointer
//1.constant window
/* 
    longest sub sum in size of k 
    arr[]={-1,2,3,3,4,5,-1};
    k=4;
public class Main {
    public static void main(String[] args) {
        int arr[]={-1,2,3,3,4,5,-1};
        //          -1 2 3 3 => 7
        //             2 3 3 4 => 12
        //               3 3 4 5 => 15
        //                 3 4 5 -1 ==> 11
        int k=4,sum=0,j=0;
        k--;
        for(int i=0;i<arr.length;i++)
        {
            sum+=arr[i];
            if(i>=k)
            {
                System.out.println(sum);
                sum=sum-arr[j];
                j++;
            }
        }
    }
}
*/
//2.longest subarray/substring sum<=k retur size of max len
/* 
public class Main {
    public static void main(String[] args) {
        int arr[]={2,5,1,7,10},k=14,max=0;
        int sum=0;
        //  2                ==> 1 
        //  2+5=7            ==> 2 
        //  2+5+1=8          ==> 3 
        //  2+5+1+7=15       ==> 4 X
        //    5              ==> 1
        //    5+1            ==> 2
        //    5+1+7=13       ==> 3
        //    5+1+7+10=23    ==> 3 X
        //    1              ==> 1
        //    1+7            ==> 2
        //    1+7+10=18      ==> 3 X
        //    7              ==> 1
        //    7+10           ==> 2 X
        //    10             ==> 1  
        //1.brute
        //tc - o(n^2)
        //sp - o(1)
        for(int i=0;i<arr.length;i++)
        {
            sum=0;
            for(int j=i;j<arr.length;j++)
            {
                sum+=arr[j];
                if(sum<=k)
                {
                    max=Math.max(max, j-i+1);
                }
            }
        }
        System.out.println("Brute: "+max);
        //2.better
        // tc - o(2N)
        // sp - o(1)
        int arr1[]={2,5,1,10,10};
        int l=0,r=0;
        sum=0;
        max=0;
        while (r<arr1.length) 
        {
            sum+=arr[r];
            while(sum>k)
            {
                sum=sum-arr[r];
                l++;
            }
            if(sum<=k)
            {
                max=Math.max(max, r-l+1);
            }
            r++;    
        }
        System.out.println("Better: "+max);
        //3.optimal
        int arr2[]={2,5,1,10,10};
        l=0;
        r=0;
        sum=0;
        max=0;
        while(r<arr2.length)
        {
            sum+=arr[r];
            if(sum>k)
            {
                sum=sum-arr[r];
                l++;
            }
            if(sum<=k)
            {
                max=Math.max(max, r-l+1);
            }
            r++;   
        }
        System.out.println("optimal: "+max);
    }
}
*/
//3.maximum points you can obtain form the cards 
/*
public class Main {
    public static void main(String[] args) {
        // time complexity : o(2*k)
        // space complexity: o(1)
        int arr[]={6,2,3,4,7,2,1,7,1},k=4;
        int leftsum=0,rightsum=0;
        int i;
        for(i=0;i<k;i++)
        {
            leftsum+=arr[i];
        }
        int max=leftsum;
        int j=arr.length-1;
        for(i=k-1;i>=0;i--)
        {
            leftsum=leftsum-arr[i];
            // 6+2+3 ==> 11
            // 6+2   ==> 8 
            // 6     ==> 6
            // 0     ==> 0
            rightsum=rightsum+arr[j];
            // 1       ==> 1
            // 1+7     ==> 8
            // 1+7+1   ==> 9
            // 1+7+1+2 ==> 11 
            j=j-1;
            System.out.println(leftsum+rightsum);
            max=Math.max(max,leftsum+rightsum);// 11+1,8+8,6+9,0+11 ==> 12,16,15,11
        }
       System.out.println("Maximum is :"+max);
    }
}
*/
//4.longest substring without repeating characters
/*  
public class Main {
    public static void main(String[] args) {
        String str="cadbzabcd"; 
        //          cadbz
        //           adbz
        //            dbza
        //             bza
        //               zabcd
        //                abcd
        //1.brute
        //time complexity:o(n^2)
        //space complexity:o(256)
        int max=0;
        for(int i=0;i<str.length();i++)
        {
            boolean arr[]=new boolean[256];
            for(int j=i;j<str.length();j++)
            {
                if(arr[str.charAt(j)])
                {
                    break;
                }
                max=Math.max(max,j-i+1);
                arr[str.charAt(j)]=true;
            }
        }
        System.out.println("1.brute: "+max);
        int l=0,r=0;
        max=0;
        int arr[]=new int[256];
        while(r<str.length())
        {
            if(arr[str.charAt(r)]!=0)
            {
                if(arr[str.charAt(r)]>=l)
                {
                    l=arr[str.charAt(r)]+1;
                }

            }
            max=Math.max(max,r-l+1);
            arr[str.charAt(r)]=r;
            r++; 
        }
        System.out.println("1.optimal: "+max);
        
    }
}
*/
//4.Max consecutive ones (longest subarray with at most k zero)
/* 
public class Main {
    public static void main(String[] args) {
        int arr[]={1,1,1,0,0,0,1,1,1,1,0};
        int k=2,max=0;
        //1.brute
        //tc:o(n^2)
        //sc:o(1)
         for(int i=0;i<arr.length;i++)
        {
            int K=k,ctr=0;
            for(int j=i;j<arr.length;j++)
            {
                if(arr[j]==1)
                {
                    ctr++;
                    System.out.print(arr[j]+" ");
                }
                else if(arr[j]==0&&K!=0) 
                {
                    ctr++;
                    K=K-1;
                    System.out.print(arr[j]+" ");
                }
                else
                {
                    if(max<ctr){max=ctr;}
                    break;
                }
            }
            System.out.println();
            // 0 0
            // 0 0 1 1 1 1
            // 0 1 1 1 1 0
            // 1 1 1 1 0
            // 1 1 1 0
            // 1 1 0
            // 1 0
            // 0
            //2.optimal
            
        }
        System.out.println("1.brute:"+max);
        int left=0,right=0,zero=0;
        max=0;
        while(right<arr.length)
        {
            if(arr[right]==0)
            {
                zero++;
            }
            if(zero>k)
            {
                if(arr[left++]==0)
                {
                    zero--;
                }
            }
            if(zero<=k)
            {
                max=Math.max(max,right-left+1);
            }
            right++;
        }
        System.out.println("2.Optimal: "+max);
        
    }
}
*/

//5.Sum of Square Numbers
/* 
Given a non-negative integer c, decide whether there're two integers a and b such that a2 + b2 = c.
Example 1:
    Input: c = 5
    Output: true
    Explanation: 1 * 1 + 2 * 2 = 5
Example 2:
    Input: c = 3
    Output: false

public class Main {
    public static void main(String[] args) {
        int num=2;
        System.out.println(judgeSquareSum(num));
    }
    static boolean judgeSquareSum(int c) {
        long right=(int)(Math.sqrt(c)),left=0;
        while(left<=right)
        {
            long sum = (left*left)+(right*right);
            if( sum > c)
            {
                right--;
            }
            else if ( sum < c )
            {
                left++;
            }
            else 
            {
                return true;
            }
        }
        return false;
    }
}
*/

//6.Fruit Into Baskets (leetcode:904)
// two basket contains only unique fruits
/* 
import java.util.*;
public class Main {
    public static void main(String[] args) {
        int arr[]={3,3,3,1,2,1,1,2,3,3,4};
        int max=0;
        //1.brute 
        //tc:o(n^2)
        //sc:o(3)
        for(int i=0;i<arr.length;i++)
        {
            Set<Integer>temp=new HashSet<>();
            for(int j=i;j<arr.length;j++)
            {
                temp.add(arr[j]);
                if(temp.size()<=2)
                {
                    max=Math.max(max,j-i+1);
                }
                else
                {
                    break;
                }
            }
        }
        System.out.println(max);
        //2.
    }
}
*/
//7.longest substring with at most k distinct character
/* 
import java.util.*;
public class Main {
    public static void main(String[] args) {
        String str="aabbccd";
        int k=2,max=0;
        //1.brute
        //tc:o(n^2)
        //sc:o(3)
        for(int i=0;i<str.length();i++)
        {
            Set<Character>temp=new HashSet<>();
            for(int j=i;j<str.length();j++)
            {
                temp.add(str.charAt(j));
                if(temp.size()<=k)
                {
                    max=Math.max(max, j-i+1);
                }
                else
                {
                    break;
                }
            }
        }
        System.out.println("1.brute: "+max); 
        int i = 0;
        // aabbccd 
        Map<Character, Integer> map = new HashMap<>();
        for (int j = 0; j < str.length(); j++) 
        {
            char ch = str.charAt(j);
            map.put(ch, map.getOrDefault(ch, 0) + 1);
            while (map.size() > k)
            {
                char leftChar = str.charAt(i);
                map.put(leftChar, map.get(leftChar) - 1);
                if (map.get(leftChar) == 0) {
                    map.remove(leftChar);
                }
                i++;
            }
            max = Math.max(max, j - i + 1);
        }
        System.out.println(max);
    }
}
*/
//number of substring containing all three character
/* 
import java.util.*;
public class Main {
    public static void main(String[] args) {
        String str="bbacba";
        int k=3,max=0;
        //1.brute
        for(int i=0;i<str.length();i++)
        {
            Set<Character> temp = new HashSet<>();
            for(int j=i;j<str.length();j++)
            {
                temp.add(str.charAt(j));
                if(temp.size()<=k)
                {
                    max=Math.max(max, j-i+1);
                }
                else
                {
                    break;
                }
            }
        }
        System.out.println(max);
        //2.two pointers
        int i = 0;
        // bba 
        Map<Character, Integer> map = new HashMap<>();
        for (int j = 0; j < str.length(); j++) 
        {
            char ch = str.charAt(j);
            map.put(ch, map.getOrDefault(ch, 0) + 1);
            while (map.size() > k)
            {
                char leftChar = str.charAt(i);
                map.put(leftChar, map.get(leftChar) - 1);
                if (map.get(leftChar) == 0) {
                    map.remove(leftChar);
                }
                i++;
            }
            max = Math.max(max, j - i + 1);
        }
        System.out.println(max);
    }
}
*/
//binary subarray with sum is equal to goal count it
/* 
public class Main {
    public static void main(String[] args) {
        int arr[]={1,0,0,1,1,0};
        int goal=2;
        int l=0,r=0,sum=0,ctr=0;
        while(r<arr.length)
        {
            sum+=arr[r];
            while(sum>goal)
            {
                sum=sum-arr[l];
                l++;
            }
            ctr=ctr+(r-l+1);
            r++;
        }
        System.out.println(ctr);
    }
}
*/
//count the number of nice subarray 
// mean that k the subarraya contains only k odd number
/* 
public class Main {
    public static void main(String[] args) {
        int arr[]={1,1,2,1,1},k=3;
        for(int i=0;i<arr.length;i++)
        {
            arr[i]=arr[i]%2==1?1:0;
        }
        int l=0,r=0,sum=0,ctr=0;
        while(r<arr.length)
        {    
            sum+=arr[r];
            while(sum>r)
            {
                sum=sum-arr[l];
                l++;
            }
            ctr++;
            r++;
        }
        System.out.println(ctr);
    }
}
*/
//----------------------------------------------------------------------------------------------------------------------------
//greedy algorithm:

//1.assign cookies:
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args) 
    {
        int greed[]={1,5,3,3,4};//children
        int s[]={4,2,1,2,1,3};//cookies
        //assign cookies by the children<=cookies
        Arrays.sort(greed);
        Arrays.sort(s);
        int children=0,cookies=0;
        while(cookies<s.length&&children<greed.length)
        {
            if(s[cookies]>=greed[children])
            {
                children++;
                cookies++;
            }
            else
            {
                cookies++;
            }
        }
        System.out.println(children);
    }
}
*/
//2. 860.Lemonade Change lemon cost ($5)
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr[]={5,5,5,10,20};
        int five=0,ten=0;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]==5)
            {
                five++;
            }
            else if(arr[i]==10)
            {
                ten++;
                if(five>=1)
                {
                    five--;
                }
                else
                {
                    System.out.println("False");
                    return;
                }
            }
            else 
            {
                if(five>=3)
                {
                    five=five-3;
                }
                else if(five>=1&&ten>=1)
                {
                    five--;
                    ten--;
                }
                else
                {
                    System.out.println("False");
                    return;
                }
            }
        }
        System.out.println("True");
    }
}
*/
//3.shortest job first:
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args)
    {
        int arr[]={4,3,7,1,2};
        Arrays.sort(arr);
        int waiting_time=0,sum_of_wating_time=0;
        for(int i=0;i<arr.length-1;i++)
        {
            System.out.print(waiting_time+" ");
            waiting_time=waiting_time+arr[i];
            sum_of_wating_time+=waiting_time;
        } 
        System.out.println();
        System.out.println(waiting_time+" "+sum_of_wating_time);
        System.out.println(sum_of_wating_time/arr.length);
    }
}
*/
//1.Reverse Paris leetcode:492

import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int arr[]={40,25,19,12,9,6,2},ctr=0;
        //  2 6 9 12 19 25 40
        brute(arr);
    } 
    static int brute(int arr[])
    {
        int ctr=0;
        for(int i=0;i<arr.length;i++)
        {
            for(int j=i+1;j<arr.length;j++)
            {
                if(arr[i]>(arr[j]*2))
                {
                    System.out.println(arr[i]+" "+arr[j]);
                    ctr++;
                }
            }
        }
        return ctr;
    }
}




















//-------------------------------------------------------------------------------------------------------
//5.String:

//1.
//1021.remove outer most element:
// Input: s = "(()())(())"
// Output: "()()()"
/* 
public class MainJava {
    public static void main(String[] args) {
        System.out.println(removeOuterParentheses("(()())(())"));//()()()
    }
    static String removeOuterParentheses(String s) {
        String str="";
        boolean temp=false;
        for(int i=0,ctr=0;i<s.length();i++)
        {
            if(s.charAt(i)=='(')
            {
                ctr++;
            }
            else
            {
                ctr--;
            }
            if(ctr==2&&s.charAt(i)=='(')
            {
                temp=true;
            }
            else if(ctr==0&&s.charAt(i)==')')
            {
                temp=false;
            }
            if(temp)
            {
                str+=s.charAt(i);
            }
        }
        return str;
    }
}
*/
//2.reverse word in recursion:
/* 
public class MainJava {
    public static void main(String[] args) {
        String str[]={"the","End","Of","Year"};
        function(str, 0);
        for(int i=0;i<str.length;i++)
        {
            System.out.print(str[i]+" ");//Year Of End the 
        }
    }
    static void function(String str[],int i)
    {
        if(i>=str.length/2)
        {
            return;
        }
        String temp=str[i];
        str[i]=str[str.length-1-i];
        str[str.length-1-i]=temp;
        function(str, i+1);
    }
}
*/
//3.1903. Largest Odd Number in String
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=1231242322;
        while(num>0)
        {
            if((num&1)==1)
            {
                System.out.print(num);//12312423
                return;
            }
            num/=10;
        }
    }
}
*/
//4.Longest Common Prefix
/* 
public class MainJava {
    public static void main(String[] args) {
        String str[]={"flower","flow","flight"};
        int min=0;
        for(int i=0;i<str.length;i++)
        {
            if(min>str[i].length())
            {
                min=str[i].length();
            }
        }
        String temp1="";
        for(int i=0;i<min;i++)
        {
            String temp2="";
            for(int j=0;j<str.length;j++)
            {
                if(str[i].charAt(0)==str[j].charAt(j))
                {
                    temp2+=str[j].charAt(i);
                }
                else
                {
                    break;
                }
            }
            if(temp2.length()>temp1.length())
            {
                temp1=temp2;
            }
        }
        System.out.println(temp1);;
    }
}
*/



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------





/*
 * c-produral langage
 * java-advances oops langage
 * if i written hello world program c not required for class and object but java required for class and object
 * method should be a with in class
 * oak is developed on 1995 and it's own by sun microsystem creater as james gosling
 * now rename oak to java it's currently own by oracle
 * current version of java is 21(LTS)  Long time support
 * every six months java will update new version
 * java is platform independent
 * java deals only class and object not support pointers and operator overloading
 * Architectural neutral means int byte 4 in every system are constant
 * java is 99.99% object oriented program
 * java supports multithreading one procces split in multiple process to use utiles full power of cpu
 * java portable because of byte code run any operating system
 * java excution starting with main method 
*/

//------------------------------------------------------------------------------------------------------------------------------------------------//
/*
1. JDK (Java Development Kit): It's a software development kit that provides tools for developing Java applications. It includes the JRE, compiler, debugger, and other tools needed for Java development.

2. JRE (Java Runtime Environment): This is the environment in which Java programs run. It includes the JVM (Java Virtual Machine), libraries, and other components necessary for running Java applications.

3. JVM (Java Virtual Machine): It's a virtual machine that enables a computer to run Java programs. It interprets compiled Java bytecode and executes it on the underlying hardware.
*/
//------------------------------------------------------------------------------------------------------------------------------------------------//

//2.Keywords in java
//--> keywords are special words which are used to recognize structure of program
//--> each keyword will be having some specific task

//------------------------------------------------------------------------------------------------------------------------------------------------//

//3.Data Type: A classification that specifies the type of data a variable can hold, such as integers, floating-point numbers, characters, or booleans.
//1.primitive datatype
/* 
------------------------------------------------------------------------------------------------------
| Data Type | Size (bits) | Range                                                  | Format Specifier |
|-----------|-------------|--------------------------------------------------------|------------------|
| byte      | 8           | -128 to 127                                            | %d               |
| short     | 16          | -32,768 to 32,767                                      | %d               |
| int       | 32          | -2,147,483,648 to 2,147,483,647                        | %d               |
| long      | 64          | -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807| %d or %l         |
| float     | 32          | ±3.40282347E+38F (6-7 digits of precision)             | %f               |
| double    | 64          | ±1.79769313486231570E+308 (15 digits of precision)     | %f or %e         |
| char      | 16          | 0 to 65,535 (Unicode characters)                       | %c               |
| boolean   | 1           | true or false                                          | %b               |
-------------------------------------------------------------------------------------------------------
*/
//------------------------------------------------------------------------------------------------------------------------------------------------//
//4.Identifier:

/* 
In Java, an **identifier** is a name given to a variable, class, method, or other entities. 
It must start with a letter, dollar sign (`$`), or underscore (`_`), followed by letters, digits, dollar signs, or underscores.
Identifiers are case-sensitive and cannot be a Java reserved keyword.
*/
//------------------------------------------------------------------------------------------------------------------------------------------------//
//5.class and objects
/* 
class Student 
{
    String name;
    int rank;

    public Student() 
    {
        this.name="lokesh";
        this.rank=12;
    }
    
    void display()
    {
        System.out.println(name+" "+rank);
    }
}
public class java1
{
    public static void main(String[] args) 
    {

          // class is blueprint that contains a data members(variable) and method(function),constructors
          // object is physical entity that follows blueprint
          Student obj = new Student();
          //Student obj --> Object creation refernece
          //new         --> new use for create new object 
          //Student()   --> Constructor use allocate memory
          obj.display();//lokesh 12

          obj.name="Kurun";
          obj.display();//lokesh 12

          //Scanner scan = new Scanner(System.in);
          //Scanner class contians in a import java.util.Scanner package
          //System.in ->keyboard input form the user that input pass to the constructor
     }
}
*/

//------------------------------------------------------------------------------------------------------------------------------------------------//
//4.Enhanced for loop or for Each loop
/* 
public class java1
{
    public static void main(String[] args) 
    {
        int arr1[]={1,2,3,4};
        for(int i:arr1)
        {
            System.out.print(i+" "); //1 2 3 4
        }
        System.out.println();

        int arr2[][]=
        {
            {1,2,3},
            {2,3,4}
        };
        for(int i[]:arr2)
        {
            for(int j:i)
            {
                System.out.print(j+" ");
            }
            System.out.println();
        }
        //1 2 3
        // 2 3 4
    }
}
*/
//------------------------------------------------------------------------------------------------------------------------------------------------//
//5.jagged Array in java 
/* 
Definition:
          -Jagged Array is a two-dimensional array with varying column counts in each row
          -the size of each row is not fixed

public class java1
{
    public static void main(String[] args) 
    {
        int arr[][]=
        {
            {1,2},
            {2,3,4}
        };
        for(int i[]:arr)
        {
            for(int j:i)
            {
                System.out.print(j+" ");
            }
            System.out.println();
        }
        //1 2 
        // 2 3 4
    }
}
*/
//------------------------------------------------------------------------------------------------------------------------------------------------//
//6.oops
/* 
In Java:

- OOP (Object-Oriented Programming): It's a programming approach where code is organized around objects, which are instances of classes defining their properties and behaviors.
pillars of OOP in Java:
- Encapsulation: Bundling data and methods within a class to restrict access.
- Inheritance: Creating new classes based on existing ones to promote code reuse.
- Polymorphism: Allowing methods to do different things based on the object.
- Abstraction: Hiding complex details and showing only the necessary features.

- Use: OOP helps in creating modular, maintainable code by structuring programs around real-world objects, promoting code reuse and making software development more efficient.
- Class: Blueprint defining properties and behaviors Classes are used to create user-defined data types that bundle data members(variables) and operations (methods) into a single unit. 
- Object: Objects are used to instantiate (create instances of) classes. They allow you to create multiple instances of the same class, each with its own set of data and behavior
- Constructor: It's a special method in a class that gets called automatically when an object of that class is created. It initializes the object's state.
*/
//1.construcors
/* 
- Constructor: It's a special method in a class that gets called automatically when an object of that class is created. It initializes the object's state.
- Usage: Constructors are used to allocate memory and initialize object.Constructor use allocate memory
- Rules for Usage: 
  1. Constructor name must match the class name.
  2. Constructors don't have return types (not even `void`).
  3. You can have multiple constructors with different parameter lists (overloading).
  4. If no constructor is explicitly defined, Java provides a default constructor.

class STD 
{
    //data member
    int num1;
    int num2;
    //1.default constructors
    STD() 
    {
        num1=12;
        num2=14;
    }
    //2.paramatric constructors
    STD(int a,int b)
    {
        num1=a;
        num2=b;
    }
    //3.copy constructors
    STD(STD temp)
    {
        this.num1=temp.num1;
        this.num2=temp.num2;
    }
    //4.Constructor Overloading:Java allows defining multiple constructors within a class with different parameter lists.
    //5.Chained Constructors
    // STD() 
    // {
    //     this(0,0);// Calls parameterized constructor with default values
    // }
    //member function
    void display()
    {
        System.out.println(num1+num2);
    }
}
public class java1
{
    public static void main(String[] args) 
    {
        STD obj1=new STD();
          //STD obj1 --> Object creation refernece
          //new         --> new use for create new object 
          //STD()   --> Constructor use allocate memory
        obj1.display();//26

        STD obj2=new STD(1,1);
        obj2.display();//2

        STD obj3=new STD(obj2);
        obj3.display();//4
    }
}
*/

//2.Encapsulation
/* 
- Definition:Encapsulation is the bundling of data (attributes) and methods (functions that operate on the data) into a single unit called a class.
              It allows restricting access to some of the object's components, preventing direct modification from outside the class.
- Usage:It helps in hiding the internal state of an object and only exposing the necessary functionalities through methods. 
              This enhances security, promotes reusability, and reduces complexity by organizing code into manageable units.
- Data Members:These are variables declared within a class, which hold data (state) relevant to the objects instantiated from that class.
                Data members can be private, protected, public, or package-private (default visibility).

class Details
{
    //Encapsulation is bundling data (attributes) and methods (functions) into a single unit called a class.
    //Better to use get and set
    //Better to use variable sholud be private and method should be a public
    private int age=20;
    public int getAge()
    {
        return  age;
    }
    public void setAge(int age)
    {
        this.age=age;
    }
}
public class java1 
{
    public static void main(String[] args) {
        Details obj=new Details();
        obj.setAge(21);
        System.out.println(obj.getAge());//21
    }
}
*/

//3.Polymorphism
/* 
    - Definition: Polymorphism allows objects to be treated as instances of their parent class, enabling a single function to work in different ways based on the object.
    Types:
    1. Compile-time (Method Overloading): Same method name with different parameters.
    2. Runtime (Method Overriding): Subclass provides a specific implementation of a method from its superclass.
*/
//1.Method Overloading (Compile-time )
/* 
class Overloading
{
    void sum(int a,int b)
    {
        System.out.println(a+b);
    }
    void sum(int a,int b,int c)
    {
        System.out.println(a+b+c);
    }
    void sum(String a,char b)
    {
        System.out.println(a+b);
    }
}
public class java1
{
    public static void main(String[] args) 
    {
        Overloading obj1 = new Overloading();
        obj1.sum(1,2); //3
        obj1.sum(1,2,3); //6
        obj1.sum("LOKESH ",'J'); //LOKESH J
    }
}
*/
//2. Method Overriding (Runtime) 
/* 
class Animal 
{
    void sound() 
    {
        System.out.println("Animal makes a sound");
    }
}

class Dog extends Animal 
{
    @Override
    void sound()
    {
        System.out.println("Dog barks");
    }
}
public class java1 {
    public static void main(String[] args) {
        Animal myDog = new Dog();
        myDog.sound(); // Output: Dog barks
    }
}
*/
//-------------------
// for an understading purpose only

/* 
import java.util.Scanner;
public class java1
{
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int num=scan.nextInt();
        scan.close();
    }
}

import java.util.Scanner;
- import: Allows the use of the Scanner class from the `java.util` package.
- java.util: A library of utility classes in Java.
- Scanner: A class used for reading input, such as user input from the console.

public class java1 {
- public: The class is accessible from anywhere in the program.
- class: Defines a new class, which is a blueprint for creating objects.
- java1: The name of the class, which should match the filename.


public static void main(String[] args) {

- public: The method is accessible from outside the class.
- static: The method belongs to the class itself, not any instance.
- void: The method does not return any value.
- main: The starting point of any Java application.
- String[] args: An array for command-line arguments passed to the program.

Scanner scan = new Scanner(System.in);

- Scanner: Creates an instance of the Scanner class.
- scan: The variable name for this Scanner instance.
- new: Instantiates a new object in memory.
- System.in: Refers to the standard input stream (usually the keyboard).

int num = scan.nextInt();
- int: A primitive data type representing integers.
- num: A variable to store the integer input from the user.
- scan.nextInt(): Reads the next integer entered by the user.

scan.close();
- scan.close(): Closes the Scanner to free up resources and avoid memory leaks. It's good practice to close input streams when done.
*/
//3.varags(Variable length arguments)
/* 
class Addition 
{
    static int sum=0;
    public int add1(int ...arr)
    {
        for(int i:arr)
        {
            sum+=i;
        }
        return sum;
    }
    public int add2(int k,int ...arr)
    {
        sum=0;
        for(int i:arr)
        {
            sum+=i;
        }
        System.out.println(k);
        return sum;
    }
    //public int add2(int ...arr,int k) ---> error will be occur
}
public  class java1 
{
    public static void main(String[] args) 
    {
        Addition obj = new Addition();
        System.out.println(obj.add1(1,2,3,4,5,5));
        System.out.println(obj.add2(1,2,3,4,5,5));// 1  19 
    }
}
*/
//4.Inheritance
/* 
    Inheritance is a feature in object-oriented programming that allows a class (child) to inherit properties and behaviors (methods) from another class (parent).
    This promotes code reuse and establishes a relationship between classes.
    1. Single Inheritance 
    2. Multilevel Inheritance
    3. Hierarchical Inheritance
    4. Multiple Inheritance (not supported directly but support in interface)
    5. Hybrid Inheritance  (not supported directly but support in interface)
    SUPER CLASS is BASE CLASS OR PARENT CLASS
    SUB CLASS is DERIVAED CLASS OR CHILD CLASS
*/
//1.Single Inheritance 
//parent class --> child class
/* 
class parent
{
    int a;
    void display()
    {
        System.out.print("--Parent--");
    }
}
class child extends parent
{
    int b;
    void show()
    {
        System.out.println("--Child--");
    }
}
public class java1 
{
    public static void main(String[] args) 
    {  
        child obj = new child();
        obj.a=20;
        obj.b=40;
        System.out.println(obj.a+" "+obj.b);// 20 40
        obj.display(); // --Parent--
        obj.show();    // --Child--
    }
}
*/

//2. Multilevel Inheritance
//grandparent --> parent class --> child class
/* 
class grandparent
{
    int a;
    void display1()
    {
        System.out.println("--Grandparent--");
    }
}
class parent extends grandparent
{
    int b;
    void display2()
    {
        System.out.println("--Parent--");
    }
}
class child extends parent
{
    int c;
    void display3()
    {
        System.out.println("--Child--");
    }
}
public class java1 
{
    public static void main(String[] args) 
    {  
        child obj = new child();
        obj.display1();  // --Grandparent--
        obj.display2();  // --Parent--
        obj.display3();  // --Child--
    }
}
*/
//3.Hierarchical Inheritance
//parent --> child 1 && child 2 (child 1 and child 2 can't comunicate each other)
/* 
class Parent
{
    int a;
    void display1()
    {
        System.out.println("--Parent--");
    }
}
class child_1 extends Parent
{
    int b;
    void display2()
    {
        System.out.println("--child_1--");
    }
}
class child_2 extends Parent
{
    int c;
    void display3()
    {
        System.out.println("--child_2--");
    }
}
public class java1 
{
    public static void main(String[] args) 
    {  
        child_2 obj = new child_2();
        obj.display1();  // --Parent--
        obj.display3();  // --Child_2--
    }
}
*/
//3.this keyword in java
//--> The this keyword in Java refers to the current instance of a class.
//--> It's mainly used to avoid naming conflicts and to provide clarity in code.
/* 
class CAL 
{
    int a=1;
    int b=2;
    int sum(int a,int b)
    {
        this.a=a;
        this.b=b;
        return this.a+this.b;
    }
}
public class java1 
{
    public static void main(String[] args) 
    {
        CAL obj = new CAL();
        System.out.println(obj.sum(11,11));//22
    }
}
*/

//4.final keyword in java
// The final keyword in Java is used to define constants, prevent method overriding, and prevent inheritance of classes.
// final using in variables,method,class
// variable --> used to declare as a constant
// method   --> cannot be overridden
// class    --> cannot be inherited

//5.Super Keyword:
//--> used to access immediate parent class variable,methods and constructors form child class
//--> Name of Base class and derived class variable,methods should be same 

//1.constructors
/* 
class Parent  // class extends Object ---> it's default
{
    public Parent() 
    {
        //default act as super to immediate parent class super()
        System.out.println("---Parent---");
    }
}
class Child extends Parent 
{
    public Child() 
    {
        //default act as super to immediate parent class super()
        System.out.println("---Child---");
    }
}
public class java1
{
    public static void main(String args[])
    {
        Child obj1 = new Child();
    }
}
//output:-
//---Parent---
//---Child---
*/
/* 
class Parent  // class extends Object ---> it's default
{
    public Parent() 
    {
        //default act as super to immediate parent class super()
        //super() --> it's defalut
        System.out.println("---Parent---");
    }
    public Parent(int a) 
    {
        //default act as super to immediate parent class super()
        System.out.println("---Parent param constructor---"+a);
    }
}
class Child extends Parent 
{
    public Child() 
    {
        //default act as super to immediate parent class super()
        //super() --> it's defalut
        System.out.println("---Child---");
    }
    public Child(int a) 
    {
        //default act as super to immediate parent class super()
        super(10+1);
        System.out.println("---Child param constructor---"+a);
        //super(10+1); --> it's second or last should be first
    }
}
public class java1
{
    public static void main(String args[])
    {
        Child obj1 = new Child(10);
    }
}
//output:-
// ---Parent param constructor---11
// ---Child param constructor---10
*/
//2.Method
/* 
class Parent  // class extends Object ---> it's default
{
    public void display()
    {
        System.out.println("--In Parent Display--");
    }
}
class Child extends Parent 
{
    public  void display()
    {
        super.display();
        System.out.println("--In Child Display--");
    }
}
public class java1
{
    public static void main(String args[])
    {
        Child obj1 = new Child();
        obj1.display();
    }
}
//output:-
// - -In Parent Display--
// --In Child Display--
*/

//3.Variables
/* 
class Parent 
{
    int a=121;
    public void display()
    {
        
    }
}
class Child extends Parent 
{
    int a=212;
    public  void display()
    {
        System.out.println("--In Parent class Display "+super.a);// first and last ascces the parenet class posible but constructor ascess first
        System.out.println("--In Child class Display "+a);
        System.out.println("--In Parent class Display "+super.a);/// first and last ascces the parenet class posible
    }
}
public class java1
{
    public static void main(String args[])
    {
        Child obj1 = new Child();
        obj1.display();
    }
}
//output:
// --In Parent class Display 121
// --In Child class Display 212
// --In Parent class Display 121
*/
//6.static
/*
    The `static` keyword in Java is used to indicate that a particular member (variable, method, or nested class) belongs to the class itself, rather than to instances of the class. This means:
    the static keyword in Java allows you to access methods without creating an instance of the class. You can call a static method using the class name directly
    - Static variables: Shared among all instances of a class.
    - Static methods: Can be called without creating an instance of the class.
    - Static blocks: Used for static initialization of a class.
    - Static nested classes: Associated with the outer class.
    - Static members are accessed using the class name.

class std1
{
    String name;
    int age;
    static String CollegeName;
    void display()
    {
        System.out.println("Name: "+name);
        System.out.println("Age: "+age);
        System.out.println("CollegeName: "+CollegeName);
    }
    static 
    {
        CollegeName="NEC";
    }
}
public class java1 
{
    public static void main(String[] args) 
    {
        std1 obj1 = new std1();
        obj1.name="lokesh";
        obj1.age=20;
        System.out.println(obj1.name+" "+obj1.age+" "+obj1.CollegeName);   
        
        std1 obj2 = new std1();
        obj2.name="kuran";
        obj2.age=20;
        System.out.println(obj2.name+" "+obj2.age+" "+obj2.CollegeName);  

        System.out.println(ADD(1,2));  //--> 3
    }
    static int ADD(int a,int b)
    {
        return a+b;
    }
}
*/
//7.abstraction:
/* 
    Abstraction in Java is a concept that hides complex implementation details and shows only the essential features of an object. It can be achieved using:
    - Abstract classes: Cannot be instantiated and can have abstract methods (without a body) and concrete methods.
    - Interfaces: Define a contract with abstract methods that implementing classes must fulfill.
    Abstraction helps in reducing complexity and increasing code reusability.

    1.Abstract method (method having only  declaration)
    2.definition will be written in derived class
    3.abstract class (contains atleast one abstract method)
    4.concrete class (class which doesn't contain any abstract method)
    5.we cannot for abstract class

//Abstract class 
abstract class Employee
{
    //Abstract method 
   abstract  void display();
   void Show()
   {
    System.out.println("--Abstract Class--");
   }
}
//concrete class
class Servent extends Employee
{
    void display()
    {
        System.out.println("--Abstract method Derived Class--");
    }
}
public  class java1
{
    public static void main(String[] args) 
    {
        Servent obj = new Servent();
        obj.display();//--Abstract method Derived Class--
        obj.Show();   //--Abstract Class--
    }
}
*/
//8.inner class
/* 
- A class inside a class
- There are four type:
        1. Nested Inner Class
        2. Method Local Inner Class
        3. Static Nested Class
        4. Anoymous Inner Class

*/
//1. Nested Inner Class
/* 
class Outer 
{
    int age=121;
    public void show()
    {
        System.out.println(" ---In Show Method1---");
    }
    class Inner
    {
        int age=212;
        public void show()
        {
            System.out.println(" ---In Show Method2---");
        }
    }
}
public class java1 
{
    public static void main(String[] args) 
    {
        Outer obj1 = new Outer();
        obj1.show();//---In Show Method1---
        System.out.println(obj1.age); //121
    
        Outer.Inner obj2 = obj1.new Inner();
        obj2.show(); //---In Show Method2---
        System.out.println(obj2.age); //212
    }
}
*/
//2.Static Nested Class
/* 
class Outer 
{
    int age=121;
    public void show()
    {
        System.out.println(" ---In Show Method1---");
    }
    static class Inner
    {
        int age=212;
        public void show()
        {
            System.out.println(" ---In Show Method2---");
        }
    }
}
public class java1 
{
    public static void main(String[] args) 
    {
        Outer.Inner obj = new Outer.Inner();
        obj.show();// ---In Show Method2---
    }
}
*/
//3.Method Local Inner Class --> class should be public or final

/* 
class Outer 
{
    private class Inner
    {
        public void show()
        {
            System.out.println(" ---In Show Method2---");
        }
    }
    public void GetInner()
    {
        Inner obj = new Inner();
        obj.show();
    }
}
public class java1 
{
    public static void main(String[] args) 
    {
        Outer obj = new Outer();
        obj.GetInner(); //---In Show Method2---
    }
}
*/
/* 
class Outer 
{
    public void GetInner()
    {
        class Inner
        {
            public void show()
            {
                System.out.println(" ---In Show Method2---");
            }
        }
        Inner obj = new Inner();
        obj.show();
    }
}
public class java1 
{
    public static void main(String[] args) 
    {
        Outer obj = new Outer();
        obj.GetInner(); //---In Show Method2---
    }
}
*/
//4.Anoymous Inner Class: replace two class
/* 
class Test1 
{
    public void Display()
    {
        System.out.println("--DISPLAY1--");
    }
}
// class Test2 extends Test1
// {
//     @Override
//     public void Display()
//     {
//         System.out.println("--DISPLAY2--");
//     }
// }
public class java1
{
    public static void main(String[] args) 
    {
        // Test1 obj = new Test2();
        // obj.Display(); // --DISPLAY2--

        //above replacement is know as
        Test1 obj = new Test1()
        {
            @Override
            public void Display()
            {
                System.out.println("--DISPLAY2--"); //--DISPLAY2--
            }
        };
        obj.Display();
    }
}
*/
// also example for abstract class
/* 
abstract  class Test1 
{
    public abstract  void Display();
}
public class java1
{
    public static void main(String[] args) 
    {
        // Test1 obj = new Test2();
        // obj.Display(); // --DISPLAY2--

        //above replacement is know as
        Test1 obj = new Test1()
        {
            @Override
            public void Display()
            {
                System.out.println("--DISPLAY2--"); //--DISPLAY2--
            }
        };
        obj.Display();
    }
}
*/
//3. multiple inheritance 
    // Java doesn't support multiple inheritance to avoid complexity and ambiguity.
    // If a class inherited from multiple classes with the same method, it would be unclear 
    // which method to use. This is called the "diamond problem." Instead, Java uses interfaces 
    // to achieve similar functionality without the confusion.
//confusion mean -->parent1 parent2 with child extends with parent1,2 .child class ascess parent method confusion will be occur so using interface
/*
    Interface Basics
    Multiple Inheritance with Interface
    Types of Interface
         1.Normal Interface
         2.Functional Interface with lambda expression
         3.Marker Interface (Serializable)
*/
//basics interface 
/*         
interface A
{
    // variable - static and final
    // methods  - only abstract methods
    void show(); // defeualt as abstract
    void display();// only abstract methods allow in interface
    // interface can't any have constructor

    int age=12;// static and final
}
class B implements A 
{
    public void show()
    {
        System.out.println("--In show--");
    } 
    public void display()
    {
        System.out.println("--In Display--");
    }
}
public class java1 
{
    public static void main(String[] args) {
        A obj = new B();
        obj.show();   // --In show--
        obj.display(); // --In Display--

        System.out.println(A.age); // interface also static at default
    }
}
*/
//3.multiple inheritance 
//confusion mean -->parent1 parent2 with child extends with parent1,2 .child class ascess parent method confusion will be occur so using interface
/* 
interface parent1
{
    void Mobile();
}
interface parenet2
{
    void Tablet();
}
class child extends FireFree implements parent1,parenet2
{
    public void Mobile()
    {
        System.out.println("--I have a Mobile--");
    }
    public void Tablet()
    {
        System.out.println("--I have a Tablet--");
    }
}
class FireFree
{
    public void function()
    {
        System.out.println("--Games On!--");
    } 
}
public class java1
{
    public static void main(String[] args) 
    {
        child obj = new child();    
        obj.Mobile(); //--I have a Mobile--
        obj.Tablet();  //--I have a Tablet--
        obj.function(); //--Games On!--
    }
}
*/
// Types of Interface:
//1.Normal Interface more than one method
/* 
interface SUM
{
    void number(int a,int b);
    int add(int a,int b);
}
class calculation implements SUM 
{
    public void number(int a,int b)
    {
        System.out.println(a+" "+b);
    }
    public  int add(int a,int b)
    {
        return a+b;
    }
}
public class java1
{
    public static void main(String[] args)
    {
        SUM obj1 = new calculation();
        obj1.number(1, 1);                  //  1 1
        System.out.println( obj1.add(1, 1) );  // 2
    }
}
*/
// above class into Anoymous class
/* 
interface SUM
{
    void number(int a,int b);
    int add(int a,int b);
}
public class java1
{
    public static void main(String[] args)
    {
        SUM obj1 = new SUM()
        {
            public void number(int a,int b)
            {
                System.out.println(a+" "+b);
            }
            public int add(int a,int b)
            {
                return a+b;
            }
        };
        obj1.number(1, 1); // 1 1
        System.out.println(obj1.add(1, 1)); // 2
    }
}
*/
//2.Functional Interface with lambda expression --> it's should have only one method in a type
//normal
/* 
interface SUM 
{
    int add(int a,int b);
}
class calculation implements SUM
{
    public int add(int a,int b)
    {
        return a+b;
    }
}
public class java1 
{
    public static void main(String[] args) 
    {
        SUM obj = new calculation();
        System.out.println(obj.add(1, 21)); //22
    }
}
*/
//above class into Anoymous class
/* 
interface SUM 
{
    int add(int a,int b);
}
public class java1 
{
    public static void main(String[] args) 
    {
        SUM obj = new SUM()
        {
            public int add(int a,int b)
            {
                return a+b;
            }
        };
        System.out.println(obj.add(1, 21)); //22
    }
}
*/
//above class into lambda class
/* 
interface SUM 
{
    int add(int a,int b);
}
public class java1 
{
    public static void main(String[] args) 
    {
        SUM obj = (int a,int b) -> a+b; // by default return statement will excuted
        System.out.println(obj.add(1, 21)); //22
    }
}
*/

//3.Marker interface (serializable) it's hava 0 methods

//------------------------------------------------------------------------------------------------------------------------------------------------//


//7.Enum
/* 
    In Java, an `enum` is a special type that represents a group of constants.
    It's used to define variables that can have one of a predefined set of values, 
    making code more readable and less error-prone.
*/
//1.basics
/* 
enum names
{
    lokesh,Kuran,arun;
}
public class java1
{
    public static void main(String[] args) {

        System.out.println(names.arun); // arun

        names obj1 = names.arun;
        System.out.println(obj1); // arun

        System.out.println((names.arun).ordinal()); // 2

        names obj2 = names.arun;
        System.out.println(obj2.ordinal()); // 2

        names[] obj3 = names.values();
        for(names i:obj3)
        {
            System.out.print(i+" - "); // lokesh - Kuran - arun - 
        }
    }
}
*/
//2.
/* 
enum names
{
    lokesh,Kuran,arun;
}
public class java1
{
    public static void main(String[] args) 
    {
        names obj = names.arun; //--ARUN--
        switch (obj)
        {
            case arun:
                System.out.println("--ARUN--");
                break;
            case lokesh:
                System.out.println("--lokesh--");
                break;
            case Kuran:
                System.out.println("--Kuran--");
                break;
            default:
                System.out.println("--ERROR--");
        }
        System.out.println(obj.getClass()); // class names
        System.out.println(obj.getClass().getSuperclass()); // class java.lang.Enum
    }
}
*/
//3.
/* 
enum Names {
    LOKESH(1), KURAN(2), ARUN(3);

    public int size;

    private Names(int a) {
        size = a;
    }

    public int getSize() {
        return size;
    }
}

public class java1 
{
    public static void main(String[] args) {
        Names obj = Names.ARUN;
        System.out.println(obj.getSize()); // 3
    }
}
*/

//------------------------------------------------------------------------------------------------------------------------------------------------//

//8.exception
/* 
public class java1 {
    public static void main(String[] args) 
    {
        try 
        {
            int a=10/0;
        }
        catch (ArithmeticException e)
        {
            System.out.println("OOPS --> "+e);
        }
    }
}
*/
//OOPS --> java.lang.ArithmeticException: / by zero
/* 
public class java1 
{
    public static void main(String[] args) 
    {
        try 
        {
            int a=10/1;
            try 
            {
                int arr[]={1};
                arr[100]=1;
            }
            catch(ArrayIndexOutOfBoundsException e)
            {
                System.out.println("OOPS --> "+e);
            }
        }
        catch (ArithmeticException e)
        {
            System.out.println("OOPS --> "+e);
        }
        finally
        {
            System.out.println("--ALL WAYS I AM PRINTED--");
        }
    }
}
*/
// OOPS --> java.lang.ArrayIndexOutOfBoundsException: Index 100 out of bounds for length 1
// --ALL WAYS I AM PRINTED--

/* 
public class java1 
{
    public static void main(String[] args) 
    {
        try 
        {
            throw new ArithmeticException();
        }
        catch(Exception e)
        {
            System.out.println("OOPS "+e);
        }
    }
}
//OOPS java.lang.ArithmeticException
*/
/* 
public class java
{
    public  void throw1() throws NullPointerException
    {
        String temp = null;
        System.out.println(temp.length());
    }
    public  void throw2()
    {
        try
        {
            throw1();
        }
        catch (NullPointerException e)
        {
            System.out.println(e);
        }
    }

    public static void main(String[] args) 
    {
        java obj = new java();
        obj.throw2();
    }
}
// java.lang.NullPointerException: Cannot invoke "String.length()" because "<local1>" is null
*/

//------------------------------------------------------------------------------------------------------------------------------------------------//
//9.Buffered Reader
//it's another option  for Scanner class input for the user
/* 
import java.io.*;

public class java {
    public static void main(String[] args) throws IOException 
    {
        InputStreamReader obj1 = new InputStreamReader(System.in);
        BufferedReader obj2 = new BufferedReader(obj1);

        System.out.println("Enter a number:");
        int number = Integer.parseInt(obj2.readLine());

        System.out.println("Enter a string:");
        String str = obj2.readLine();

        System.out.println("Number: " + number);
        System.out.println("String: " + str);
    }
}
*/
//------------------------------------------------------------------------------------------------------------------------------------------------//
//9.MultiThreading:
/* 
    Multithreading is a programming technique where multiple threads run concurrently within a single program, allowing for parallel execution and improved performance.
    Multithreading Individual unit of a process
    Thread is the smallest unit of a process that can be scheduled to run. Each thread in a program can execute independently and simultaneously.
    Use of Multithreading:
    - Improved Performance: Executes multiple operations at once, like handling user interactions while processing data.
    - Efficient Resource Use: Utilizes CPU resources more effectively by overlapping tasks.
    - Responsive Applications: Keeps applications responsive by performing background tasks without freezing the main program.
    - Multitasking -- running mutliple tasks at a same time likes in mobile use whatsapp at same time useing youtube is multitasking
    - Multithreading -- single process with multiple threading is exampl if using whatsapp typing text that one thread and another is spiling misstake show in red colour that is on thread
    
*/
//Implementing multithreading in java there are tow type:
//1.using Thread Class
//2.Using Runnable Interface

//1.using Thread Class
// 1000 ms is equal to 1s
/* 
class hii extends Thread
{
    public void run()
    {
        for(int i=0;i<5;i++)
        {
            System.out.println("--hii--");
            try 
            {
                Thread.sleep(1000);
            } catch (InterruptedException e)
            {
                e.printStackTrace();
            }
        }
    }
} 
class hello extends Thread
{
    public void run()
    {
        for(int i=0;i<5;i++)
        {
            System.out.println("--hello--");
            try 
            {
                Thread.sleep(1000);
            } catch (InterruptedException e)
            {
                e.printStackTrace();
            }
        }
    }
} 
public class java
{
    public static void main(String[] args)
    {
        hii obj1 = new hii();
        hello obj2 = new hello();
        obj1.start();

        try 
        {
          Thread.sleep(500);
        } catch (InterruptedException e)
        {
            e.printStackTrace();
        }

        obj2.start();
    }
}
*/
//2.Using Runnable Interface with lamda function 
/* 
public class java 
{
    public static void main(String[] args)
    {
        Thread obj1 = new Thread( () ->
            {
                for(int i=0;i<5;i++)
                {
                    System.out.println("--hi--");
                    try 
                    {
                        Thread.sleep(1000);
                    } catch (InterruptedException e)
                    {
                        e.printStackTrace();
                    }
                }
            }
        );
        obj1.start();
        try {Thread.sleep(500);} catch (Exception e){}

        Thread obj2 = new Thread( () ->
            {
                for(int i=0;i<5;i++)
                {
                    System.out.println("--hello--");
                    try 
                    {
                        Thread.sleep(1000);
                    } catch (InterruptedException e)
                    {
                        e.printStackTrace();
                    }
                }
            }
        );
        obj2.start();
        try {Thread.sleep(500);} catch (Exception e){}
    }
}
*/
//------------------------------------------------------------------------------------------------------------------------------------------------//
//10.Wrapper Class
//Wrapper classes in Java convert primitives into objects
//java 99.9% object oriented programming language beacuse of it's supports primitive data type like int ,float, double
/* 
    public class java
    {
        public static void main(String[] args) 
        {
    
            int i = 10;
            Integer obj1 = Integer.valueOf(i); // Boxing (primitive to wrapper class)
            Integer obj2 = i; // Auto-boxing (primitive to wrapper class automatically)
        
            int A = obj1.intValue(); // Unboxing (wrapper class to primitive)
            int B = obj1; // Auto-unboxing (wrapper class to primitive automatically)
    
        }
    }
*/ 
//------------------------------------------------------------------------------------------------------------------------------------------------//

/* 
1. **What is Java?**
   - A high-level, object-oriented programming language.

2. **What is the JVM?**
   - Java Virtual Machine, it runs Java bytecode.

3. **What is JDK?**
   - Java Development Kit, includes tools for developing Java apps.

4. **What is JRE?**
   - Java Runtime Environment, provides libraries and JVM for running Java apps.

5. **What is a class?**
   - A blueprint for creating objects.

6. **What is an object?**
   - An instance of a class.

7. **What are methods?**
   - Functions defined inside a class.

8. **What is inheritance?**
   - Mechanism where one class inherits the properties of another.

9. **What is polymorphism?**
   - Ability of an object to take many forms.

10. **What is encapsulation?**
    - Wrapping data and code together as a single unit.

11. **What is abstraction?**
    - Hiding implementation details from the user.

12. **What is an interface?**
    - A reference type in Java, similar to a class, that can contain abstract methods.

13. **What is a package?**
    - A namespace for organizing classes and interfaces.

14. **What is the difference between JDK and JRE?**
    - JDK includes JRE plus development tools; JRE is only for running Java apps.

15. **What is a constructor?**
    - A block of code used to initialize an object.

16. **What is method overloading?**
    - Multiple methods with the same name but different parameters.

17. **What is method overriding?**
    - A subclass provides a specific implementation of a method declared in its superclass.

18. **What is the `this` keyword?**
    - Refers to the current object in a method or constructor.

19. **What is the `super` keyword?**
    - Refers to the superclass of the current object.

20. **What is a static variable?**
    - A variable that belongs to the class, not instances.

### Data Types and Variables

21. **What are the primitive data types in Java?**
    - `int`, `byte`, `short`, `long`, `float`, `double`, `char`, `boolean`.

22. **What is the default value of an int variable?**
    - `0`.

23. **What is a non-primitive data type?**
    - Objects, arrays, strings, etc.

24. **What is a String in Java?**
    - A sequence of characters, objects of the `String` class.

25. **What is the difference between `==` and `equals()`?**
    - `==` checks reference equality; `equals()` checks value equality.

26. **What is a final variable?**
    - A variable that cannot be changed once initialized.

27. **What is type casting?**
    - Converting one data type into another.

28. **What is autoboxing?**
    - Automatic conversion of primitives to their corresponding object wrappers.

29. **What is unboxing?**
    - Converting wrapper classes back to primitives.

30. **What is a literal?**
    - A fixed value represented directly in code.

### Control Statements

31. **What are the types of control statements?**
    - Conditional (`if`, `switch`), loop (`for`, `while`, `do-while`), jump (`break`, `continue`, `return`).

32. **What is a switch statement?**
    - A multi-way branch statement.

33. **What is the difference between `break` and `continue`?**
    - `break` exits the loop; `continue` skips to the next iteration.

34. **What is an enhanced for loop?**
    - A simplified loop for iterating over arrays or collections.

35. **What is a nested loop?**
    - A loop inside another loop.

### OOP Concepts

36. **What is an abstract class?**
    - A class that cannot be instantiated, can have abstract methods.

37. **What is a concrete class?**
    - A class with no abstract methods, can be instantiated.

38. **What is a constructor overloading?**
    - Having multiple constructors with different parameters in a class.

39. **What is multiple inheritance?**
    - Java doesn't support it directly; interfaces provide a way to achieve it.

40. **What is a nested class?**
    - A class within another class.

41. **What is an anonymous class?**
    - A class without a name, defined and instantiated in a single expression.

42. **What is a singleton class?**
    - A class with only one instance.

43. **What is the use of the `final` keyword in a class?**
    - Prevents the class from being subclassed.

44. **What is the use of the `final` keyword in a method?**
    - Prevents the method from being overridden.

45. **What is the `instanceof` keyword?**
    - Tests whether an object is an instance of a specific class or subclass.

### Exception Handling

46. **What is an exception?**
    - An unexpected event disrupting normal program flow.

47. **What is exception handling?**
    - Mechanism to handle runtime errors, maintaining normal flow.

48. **What is a try-catch block?**
    - Code structure to handle exceptions.

49. **What is a finally block?**
    - Executes code after try-catch, regardless of exception occurrence.

50. **What is a checked exception?**
    - Exceptions that must be handled at compile time.

51. **What is an unchecked exception?**
    - Exceptions that occur at runtime, not checked at compile time.

52. **What is a custom exception?**
    - User-defined exception class.

53. **What is the difference between `throw` and `throws`?**
    - `throw` is used to explicitly throw an exception; `throws` declares exceptions.

54. **What is a throwable?**
    - The superclass of all exceptions and errors.

55. **What is the `Error` class?**
    - Indicates serious problems that a reasonable application should not try to catch.

### Collections Framework

56. **What is the Collections Framework?**
    - A set of classes and interfaces for handling collections of objects.

57. **What is a List in Java?**
    - An ordered collection allowing duplicate elements.

58. **What is a Set in Java?**
    - A collection that does not allow duplicate elements.

59. **What is a Map in Java?**
    - An object that maps keys to values.

60. **What is an ArrayList?**
    - A resizable array implementation of the List interface.

61. **What is a HashSet?**
    - A set backed by a hash table, no duplicates.

62. **What is a LinkedHashSet?**
    - A HashSet with predictable iteration order.

63. **What is a HashMap?**
    - A Map based on a hash table.

64. **What is a LinkedHashMap?**
    - A HashMap with predictable iteration order.

65. **What is a TreeSet?**
    - A NavigableSet implementation based on a TreeMap.

66. **What is a TreeMap?**
    - A Map that is sorted according to natural ordering or a comparator.

67. **What is the difference between ArrayList and LinkedList?**
    - ArrayList is backed by a dynamic array, faster access; LinkedList is backed by a doubly-linked list, faster inserts/deletes.

68. **What is a priority queue?**
    - A queue that processes elements based on priority.

69. **What is a stack?**
    - A LIFO (Last In First Out) data structure.

70. **What is a queue?**
    - A FIFO (First In First Out) data structure.

### Threads

71. **What is a thread?**
    - A lightweight process for concurrent execution.

72. **What is multithreading?**
    - Running multiple threads simultaneously.

73. **How to create a thread in Java?**
    - Extend `Thread` class or implement `Runnable` interface.

74. **What is thread safety?**
    - Ensures shared data is accessed by only one thread at a time.

75. **What is synchronization?**
    - A mechanism to control access to shared resources.

76. **What is a deadlock?**
    - A situation where two or more threads are blocked forever.

77. **What is a race condition?**
    - A situation where two threads compete for the same resource.

78. **What is a daemon thread?**
    - A low-priority thread running in the background.

79. **What is the `synchronized` keyword?**
    - Used to lock a method or block for thread safety.

80. **What is the `volatile` keyword?**
    - Indicates a variable may be changed unexpectedly.

### Java 8 Features

81. **What are Lambda Expressions?**
    - Concise way to represent anonymous functions.

82. **What is the Stream API?**
    - A sequence of elements supporting aggregate operations.

83. **What is a Functional Interface?**
    - An interface with exactly one abstract method.

84. **What are default methods?**
    - Methods with an implementation in interfaces.

85. **What are method references?**
    - Referencing methods without invoking them.

86. **What is Optional?**
    - A container object to avoid null checks.

*/



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


//1. Maximum Subarray (Leetcode:53)
//Note:using Kadane's Algorithm
/*  
public class java {
    public static void main(String[] args)
    {
        int arr[]={-2,-5,6,-2,-3,1,5,-6};
        //          0  0 6  4  1 2 7 -6
        System.out.println(Maximum_Subarray(arr));//7
    }
    static int Maximum_Subarray(int arr[])
    {
        int i,sum=0,max=arr[0];
        for(i=0;i<arr.length;i++)
        {
            if(sum<0)
            {
                sum=0;
            }
            sum+=arr[i];
            if(max<sum)
            {
                max=sum;
            }
        }
        return max;
    }
}
*/

//2.Single Number in a array (Leetcode:136):
/* 
public class java {
    public static void main(String[] args) {
        int arr[]={2,2,11,0,0};//11
        System.out.println(SingleNumber(arr, 0,0));
    }
    static int SingleNumber(int arr[],int i,int xor)
    {
        if(i==arr.length)
        {
            return xor;
        }
        xor=xor^arr[i++];
        return SingleNumber(arr, i, xor);
    }
}
*/

//3.Number of islands (leecode:200)
//Note:island only veritical and horizontail
/* 
public class java 
{
    public static void main(String[] args) {
        int arr[][]=
        {
            {1,1,1,1,0},
            {1,1,0,1,0},
            {1,1,0,0,0},
            {0,0,0,0,0}
        };
        int ctr=0;
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr[0].length;j++)
            {
                if(arr[i][j]==1)
                {
                    ctr++;
                    NumberOfIsland(arr, i, j);
                }
            }
        }
        System.out.println(ctr);//1
    }
    static void NumberOfIsland(int arr[][],int i,int j)
    {
        if(i<0 || i>=arr.length || j<0 || j>=arr[0].length || arr[i][j]==0)
        {
            return;
        }
        arr[i][j]=0;
        NumberOfIsland(arr,i-1,j);//up
        NumberOfIsland(arr,i+1,j);//down
        NumberOfIsland(arr,i,j-1);//left
        NumberOfIsland(arr,i,j+1);//right
    }
}
*/
//4.pascal's triangle:
/* 
import java.util.*;
public class java
{
    public static void main(String[] args) 
    {
        int num=5;
        //1.with in Arraylist
        ArrayList<ArrayList<Integer>> temp1= pascals_triangle1(num);
        for(int i=0;i<temp1.size();i++)
        {
            ArrayList<Integer> temp = temp1.get(i); 
            for(int j=0;j<temp.size();j++)
            {
                System.out.print(temp.get(j)+" ");
            }
            System.out.println();
        }
        //2.without ArrayList
        num=5;
        for(int i=0;i<num;i++)
        {
            int temp=1;
            for(int j=0;j<=i;j++)
            {
                System.out.print(temp+" ");
                temp=temp*(i-j)/(j+1);
            }
            System.out.println();
        }
    }
    static ArrayList<ArrayList<Integer>> pascals_triangle1(int num)
    {
        ArrayList<ArrayList<Integer>>  ans = new ArrayList<>();
        for(int i=0;i<num;i++)
        {
            ArrayList<Integer> temp = new ArrayList<>();
            for(int j=0;j<=i;j++)
            {
                if(j==0||j==i)
                {
                    temp.add(1);
                }
                else 
                {
                    ArrayList<Integer> previews = ans.get(i-1);
                    temp.add(previews.get(j-1)+previews.get(j));
                }
            }
            ans.add(temp);
        }   
        return ans;
    }
}
*/
//4.contains duplicate (leetcode:217)
/* 
import java.util.*;
public class java 
{
    public static void main(String[] args) 
    {
        int arr[]={1,2,3,1};
        Arrays.sort(arr);
        System.out.println( (contains_duplicate1(arr)) );
        System.out.println( (contains_duplicate2(arr)) );
    }
    static boolean contains_duplicate1(int arr[])
    {
        for(int i=0;i<arr.length-1;i++)
        {
            if(arr[i]==arr[i+1]){return true;}
        }
        return false;
    }
    static boolean contains_duplicate2(int arr[])
    {
        Set<Integer> temp = new HashSet<>();
        for(int i=0;i<arr.length;i++)
        {
            if(temp.contains(arr[i]))
            {
                return true;
            }
            temp.add(arr[i]);
        }
        return false;
    }
}
*/
//5.two sum (Leetcode:1)
/* 
import java.util.*;
public class java {
    public static void main(String[] args) 
    {
        int arr[]={2,7,11,15},target = 9;   
        int temp1[]=TwoSum1(arr, target);
        System.out.println(temp1[0]+" "+temp1[1]);

        int temp2[]=TwoSum2(arr, target);
        System.out.println(temp2[0]+" "+temp2[1]);
        
        int temp3[]=TwoSum3(arr, target);
        System.out.println(temp3[0]+" "+temp3[1]);
    }
    static int[] TwoSum1(int arr[],int target)
    {
        for(int i=0;i<arr.length-1;i++)
        {
            for(int j=i+1;j<arr.length;j++)
            {
                if(arr[i]+arr[j]==target)
                {
                    return new int[]{i,j};
                }
            }
        } 
        return new int[]{};
    }
    static int[] TwoSum2(int arr[],int target)
    {
        ArrayList<Integer>temp=new ArrayList<>();
        for(int i=0;i<arr.length;i++)
        {
            temp.add(arr[i]);
        }
        for(int i=0;i<arr.length;i++)
        {
            int num=target-arr[i];
            if(temp.contains(num))
            {
                return new int[]{i,temp.indexOf(num)};
            }
        }
        return new int[]{-1,-1};
    }
    static int[] TwoSum3(int arr[],int target)
    {
        int start=0,end=arr.length-1;
        while(start<=end)
        {
            if(arr[start]+arr[end]>target)
            {
                end--;
            }
            else if(arr[start]+arr[end]<target)
            {
                start++;
            }
            else
            {
                return new int[]{start,end};
            }
        }
        return new int[]{-1,-1};
    }
}
*/
//6.Palindrome number (Leetcode:9)
/* 
public class java {
    public static void main(String[] args) {
        int num=121;
        if(num<0||num%10==0)
        {
            System.out.println("Not a Palindrome Number");
            return;
        }
        if(num==0)
        {
            System.out.println("Number is Palindrome Number");
            return;
        }
        int N=num,reverse=0;
        while (N>0) 
        {
            reverse=reverse*10+N%10;
            N/=10;    
        }
        System.out.println(reverse==num?"Number is Palindrome Number":"Number is Not a Palindrome");
    }
}
*/
//7.Reverse Integer (Leetcode:7)
/* 
public class java {
    public static void main(String[] args) {
        int num=-123,reverse=0;
        while(num!=0)
        {
            reverse=reverse*10+num%10;
            num/=10;
        }
        System.out.println(reverse);//-321
    }
}
*/
//8.Binary Search
/* 
public class java {
    public static void main(String[] args) {
        int arr[]={-1,0,3,5,9,12},target=9;
        int s=0,e=arr.length-1;
        while(s<=e)
        {
            int mid=s+(e-s)/2;
            if(arr[mid]>target)
            {
                e=mid-1;
            }
            else if(arr[mid]<target)
            {
                s=mid+1;
            }
            else
            {
                System.out.println(mid+1);
                return;
            }
        }
    }
}
*/
//9.ToLowerCase (Leetcode:709)
/* 
public class java {
    public static void main(String[] args) {
        String str="Hello",temp="";
        for(int i=0;i<str.length();i++)
        {
            temp+=(str.charAt(i)>='A'&&str.charAt(i)<='Z')?(char)(str.charAt(i)+32):str.charAt(i);
        }
        System.out.println(temp);
    }
}
*/
//10.length without using built-in function
/* 
public class java {
    public static void main(String[] args) {
        int arr[]={1,2,3,4,5,1};
        int len1=getArrayLength(arr,0);
        System.out.println(len1);

        String str="lokesh ";
        int len2=getArrayLength(str,0);
        System.out.println(len2);

    }
    static int getArrayLength(int arr[],int index)
    {
        try
        {
            while (true) 
            {
               int temp=arr[index]; 
               index++;   
            }
        }
        catch(Exception e)
        {

        }
        return index;
    }
    static int getArrayLength(String str,int index)
    {
        try
        {
            while (true) 
            {
               char temp=str.charAt(index); 
               index++;   
            }
        }
        catch(Exception e)
        {

        }
        return index;
    }
}
*/
//11.Robot Return to Origin (657)
/* 
public class java {
    public static void main(String[] args) {
        String str="UDRL";
        int x_axis=0,y_axis=0;
        for(int i=0;i<str.length();i++)
        {
            if(str.charAt(i)=='U')
            {
                x_axis++;
            }
            else if(str.charAt(i)=='D')
            {
                x_axis--;
            }
            else if(str.charAt(i)=='R')
            {
                y_axis++;
            }
            else
            {
                y_axis--;
            }
        }
        System.out.println(x_axis==0&&y_axis==0);
    }
}
*/
//12.trapping water:
/* 
public class java {
    public static void main(String[] args) {
        int arr[]={0,1,0,2,1,0,1,3,2,1,2,1};

        System.out.println(brute(arr)); //6

        System.out.println(optimal(arr));
    }
    static int brute(int arr[])
    {
        int ctr=0;
        for(int i=0;i<arr.length;i++)
        {
            int leftmax=0,rightmax=0;
            for(int j=0;j<=i;j++)
            {
                if(leftmax<arr[j])
                {
                    leftmax=arr[j];
                }
            }
            for(int j=i;j<arr.length;j++)
            {
                if(rightmax<arr[j])
                {
                    rightmax=arr[j];
                }
            }
            ctr=ctr+Math.min(leftmax,rightmax)-arr[i];
        }
        return ctr;
    }
    static int optimal(int arr[])
    {
        int left=0,right=arr.length-1;
        int left_max=0,right_max=0;
        int ctr=0;
        while(left<=right)
        {
            if(arr[left]<=arr[right])
            {
                if(arr[left]>=left_max)
                {
                    left_max=arr[left];
                }
                else
                {
                    ctr=ctr+left_max-arr[left];
                }
                left++;
            }
            else
            {
                if(arr[right]>=right_max)
                {
                    right_max=arr[right];
                }
                else
                {
                    ctr=ctr+right_max-arr[right];
                }
                right--;   
            }
        }
        return ctr;
    }
}
*/
//13.jewels and stones

//1.isomorphic string
    //Example 1:
    // Input: s = "egg", t = "add"
    // Output: true

    // Example 2:
    // Input: s = "foo", t = "bar"
    // Output: false
/* 
public class java {
    public static void main(String[] args) {
        String str1="egg",str2="add";
        //e-e it posible
        if(str1.length()!=str2.length()){System.out.println("False");return;}
        int arr[]=new int[26];
        for(int i=0;i<str1.length();i++)
        {
            if(arr[str1.charAt(i)-'a']==0)
            {
                arr[str1.charAt(i)-'a']=str2.charAt(i);
            }
            else if(arr[str1.charAt(i)-'a']!=str2.charAt(i) && str1.charAt(i)!=str2.charAt(i))
            {
                System.out.println("False");
                return;
            }
        }
        System.out.println("True");

    }
}
*/

//2.Check If a Word Occurs As a Prefix of Any Word in a Sentence
/* 
public class java {
    public static void main(String[] args) {
        String str1="this problem is an easy problem",str2="pro";
        int ctr1=1,s=0,ctr2=0,flag=1;
        for(int i=0;i<str1.length();i++)
        {
            if(str1.charAt(i)==' ')
            {
                ctr1++;
            }
            if(s>=str2.length())
            {
                s=0;
            }
            if(str1.charAt(i)==str2.charAt(s++))
            {
                ctr2++;
                System.out.println("h ");
            }
            else 
            {
                if(ctr2==str2.length())
                {
                    System.out.println(ctr1);
                    return;
                }
                s=0;
                ctr2=0;
            }
        }
        System.out.println("-1");
    }
}
*/
//3.plus one
/* 
public class java {
    public static void main(String[] args) {
        int arr[]={1,9,9,1};
        for(int i=arr.length-1;i>=0;i--)
        {
            if(arr[i]<9)
            {
                arr[i]++;
                display(arr);
                return;
            }
            arr[i]=0;
        }
        int newarray[]=new int[arr.length+1];
        newarray[0]=1;
        display(newarray);
    }
    static void display(int arr[])
    {
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
}
*/
//4.Remove elements
/* 
public class java {
    public static void main(String[] args) {
        int arr[]={0,1,2,2,3,0,4,2},val=2,ctr=0;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]!=val)
            {
                arr[ctr++]=arr[i];
            }
        }
        for(int i=0;i<ctr;i++)
        {
            System.out.print(arr[i]+" ");//0 1 3 0 4 
        }
    }
}
*/
//5.Find the Index of the First Occurrence in a String
//tc:o(n^2)
/* 
public class java {
    public static void main(String[] args) {
        // String str1="mississippi",str2="issip";
        String str1="sadbutsad",str2="sad";
        int s=0,ctr=0,ctr1=1;
        for(int i=0;i<str1.length();i++)
        {
            if(str1.charAt(i)==str2.charAt(s))
            {
                ctr++;
                s++;
            }
            else
            {
                ctr=0;
                s=0;
                i=ctr1;
                ctr1++;
            }
            if(ctr==str2.length())
            {
                System.out.println(i-(str2.length()-1));
                return;
            }
        }
        System.out.println("-1");
    }
}
*/
//6.First Unique Character in a String
/* 
public class java {
    public static void main(String[] args) {
        String str="leetcode";
        int arr[]=new int[26];
        for(int i=0;i<str.length();i++)
        {
            arr[str.charAt(i)-'a']++;
        }
        for(int i=0;i<str.length();i++)
        {
            if(arr[str.charAt(i)-'a']==1)
            {
                System.out.println(i);
                return;
            }
        }
        System.out.println(-1);
    }
}
*/
//7.Reverse Vowels of a String
/* 
public class java {
    public static void main(String[] args) {
        char[] str=("leetcode").toCharArray();
        int s=0,e=str.length-1;
        while(s<e)
        {
            if(isVowel(str[s])==0)
            {
                s++;
            }
            else if(isVowel(str[e])==0)
            {
                e--;
            }   
            else
            {
                char temp=str[s];
                str[s++]=str[e];
                str[e--]=temp;
            }
        }
        for(int i=0;i<str.length;i++)
        {
            System.out.print(str[i]+" ");
        }
    }
    static int isVowel(char ch)
    {
        return (ch=='a'||ch=='e'||ch=='i'||ch=='o'||ch=='u'?1:0);
    }
}
*/
//8.climbing stairs:
/* 
import java.util.*;
public class java {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int num=scan.nextInt();
        int arr[]=new int[num+1];
        arr[0]=1;arr[1]=1;
        for(int i=2;i<num+1;i++)
        {
            arr[i]=arr[i-2]+arr[i-1];
        }
        System.out.println(arr[num]);
    }
}
*/
//9.single number
/* 
public class java {
    public static void main(String[] args) {
        int arr[]={2,2,1},ans=0;
        for(int i=0;i<arr.length;i++)
        {
            ans=ans^arr[i];
        }
        System.out.println(ans);
    }
}
*/
//10.word pattern
/* 
public class java {
    public static void main(String[] args) {
        String str1="abba",str2[]={"dog","cat","cat","dog"};
        String temp[]=new String[26];
        for(int i=0;i<temp.length;i++)
        {
            temp[i]="0";
        }
        for(int i=0;i<str1.length();i++)
        {
            if(temp[str1.charAt(i)-'a']=="0")
            {
                temp[str1.charAt(i)-'a']=str2[i];
            }
            else if(temp[str1.charAt(i)-'a']!=str2[i])
            {
                System.out.println("False");
                return;
            }
        }
        System.out.println("True");
    }
}
*/
//11.valid palindrone:
/*
public class java 
{
       public static void main(String[] args) {
        String str1="A man, a plan, a canal: Panama",str2="";
        for(int i=0;i<str1.length();i++)
        {
            if(str1.charAt(i)>='a'&&str1.charAt(i)<='z')
            {
                str2=str2+(char)(str1.charAt(i));
            }
            else if(str1.charAt(i)>='A'&&str1.charAt(i)<='Z')
            {
                str2=str2+(char)(str1.charAt(i)+32);
            }
        }
        int s=0,e=str2.length()-1;
        while(s<=e)
        {
            if(str2.charAt(s++)!=str2.charAt(e--))
            {
                System.out.println("Not a Palindrome");
                return;
            }
        }
        System.out.println("Palindrome");
    }
}
*/
//12.contains duplicate:
/* 
import java.util.*;
public class java {
    public static void main(String[] args) {
        int arr[]={1,2,3,1};
        Map<Integer,Integer> temp =new HashMap<>();
        for(int i=0;i<arr.length;i++)
        {
            if(temp.containsKey(arr[i]))
            {
                System.out.println("Yes array Contains Duplicate..");
                return;
            }
            else
            {
                temp.put(arr[i],i);
            }
        }
        System.out.println("No array Contains Duplicate..");
    }
}
*/
//13. Find the Difference
/* 
public class java {
    public static void main(String[] args) {
        //method1
        String str1="abcd",str2="abcde";
        int arr[]=new int[26];
        for(int i=0;i<str1.length();i++)
        {
            arr[str1.charAt(i)-'a']++;
        }
        for(int i=0;i<str2.length();i++)
        {
            if(arr[str2.charAt(i)-'a']==0)
            {
                System.out.println(str2.charAt(i));//e
                break;
            }
            else
            {
                arr[str2.charAt(i)-'a']--;
            }
        }
        //method2
        char ch=0;
        for(char i:str1.toCharArray()){ch^=i;}
        for(char i:str2.toCharArray()){ch^=i;}
        System.out.println(ch);//e
    }
}
*/
//14.anagram
/* 
public class java 
{
    public static void main(String[] args) 
    {
        String str1="anagram",str2="nagaram";//true
        // String str1="ab",str2="a";//false
        if(str1.length()!=str2.length())
        {
            System.out.println("It's Not a Anagram");
            return;
        }
        int arr[]=new int[26];
        for(int i=0;i<str1.length();i++)
        {
            arr[str1.charAt(i)-'a']++;
        }
        for(int i=0;i<str2.length();i++)
        {
            if(arr[str2.charAt(i)-'a']==0)
            {
                System.out.println("It's Not a Anagram");
                break;
            }
            else
            {
                arr[str2.charAt(i)-'a']--;
            }
        }
        System.out.println("It's Anagram...");

    }
}
*/
//15.Check Whether Two Strings are Almost Equivalent
     //Two strings word1 and word2 are considered almost 
     //equivalent if the differences between the frequencies of each letter from 'a' to 'z' between word1 and word2 is at most 3.
/* 
public class java {
    public static void main(String[] args) {
        String str1="aaaa",str2="bccb";
        int arr[]=new int[26];
        for(char i:str1.toCharArray())
        {
            arr[i-'a']++;
        }
        for(char i:str2.toCharArray())
        {
            arr[i-'a']--;
            if(arr[i-'a']<-3)
            {
                System.out.println("False");
                return;
            }
        }
        for(int i=0;i<26;i++)
        {
            if(arr[i]>3)
            {
                System.out.println("False");
                return;
            }
        }
        System.out.println("True");
        // tc:o(3*n)
        // to reused by using two empty arr to become a o(2*n)
    }
}
*/
//16.if the number is power two
/* 
public class java {
    public static void main(String[] args) {
       // int num=-2;  //Number is not a Power Of 2
        int num=2;     //Number is Power Of 2
        if(num>0 && (num&(num-1))==0)
        {
            System.out.println("Number is Power Of 2");
            return;
        }
        else
        {
            System.out.println("Number is Not Power Of 2");
        }
    }
}
*/
/* 
//17.add digit until Given an integer num, repeatedly add all its digits until the result has only one digit, and return it.
// 38==>11==>2
public class java {
    public static void main(String[] args) {
        //mehtod 1
        int num=38;// 2
        // while(num>=10)
        // {
        //     int n=num,sum=0;
        //     while(n>0)
        //     {
        //         sum+=n%10;
        //         n/=10;
        //     }
        //     num=sum;
        // }
        // return num;
        if(num==0)
        {
            System.out.println(0);
        }
        else if(num%9==0)
        {
            System.out.println(9);
        }
        else
        {
            System.out.println(num%9);
        }
    }
}
*/

//18.mising number
/* 
public class java {
    public static void main(String[] args) {
        int arr[]={3,0,1};//2
        for(int i=0;i<arr.length;)
        {
            int index=arr[i];
            if(index<arr.length && arr[i]!=arr[index])
            {
                arr[i]=arr[i]^arr[index];
                arr[index]=arr[i]^arr[index];
                arr[i]=arr[i]^arr[index];
            }
            else
            {
                i++;
            }
        }
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]!=i)
            {
                System.out.println(i);
                return;
            }
        }
        System.out.println(arr.length+1);
    }
}
*/
//19.Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.
/*  
Example 1:
Input: nums = [1,2,3,1], k = 3
Output: true

Example 2:
Input: nums = [1,0,1,1], k = 1
Output: true

Example 3:
Input: nums = [1,2,3,1,2,3], k = 2
Output: false

import java.util.*;
public class java
{
    public static void main(String[] args)
    {
        int arr[]={1,2,3,1},k=3;
        System.out.println(containsNearbyDuplicate(arr, k));// true
    }
    static boolean containsNearbyDuplicate(int[] nums, int k)
    {
        Map<Integer,Integer> arr=new HashMap<>();
        for(int i=0;i<nums.length;i++)
        {
            if(!arr.containsKey(nums[i]))
            {
                arr.put(nums[i],i);// key,value
            }
            else
            {
                int temp=arr.get(nums[i]);//value
                if(Math.abs(temp-i)<=k)
                {
                    return true;
                }
                else
                {
                    arr.put(nums[i],i);
                }
            }
        }
        return false;
    }
}
*/
//20. Search in Rotated Sorted Array
/* 
public class java 
{
    public static void main(String[] args) {
        int arr[]={4,5,6,7,0,1,2},target=0;    
    }
    static public int search(int[] arr, int target) {
        int start=0,end=arr.length-1;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(arr[mid]==target){return mid;}
            if(arr[start]<=arr[mid])
            {
                if(arr[start]<=target && target<=arr[mid])
                {
                    end=mid-1;
                }
                else
                {
                    start=mid+1;
                }
            }
            else
            {
                if(arr[mid]<=target && target<=arr[end])
                {
                    start=mid+1;
                }
                else
                {
                    end=mid-1;
                }
            }
        }
        return -1;
    }
}
*/
//21.move zeroes to the end
/* 
public class java 
{
    public static void main(String[] args) 
    {
        int arr[]={0,1,0,3,12};
        int i=0,ctr=0;
        while(i<arr.length)
        {
            if(arr[i]!=0)
            {
                arr[ctr++]=arr[i];
            }
            i++;
        }
        while(ctr<arr.length)
        {
            arr[ctr++]=0;
        }
        for(i=0;i<ctr;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
}
*/
//22.is subseqence Leetcode:392
/* 
public class java 
{
    public static void main(String[] args) {
        String str1="abc",str2="ahbgdc";
        int i=0,j=0;
        while( i<str1.length() && j<str2.length() )
        {
            if(str1.charAt(i)==str2.charAt(j))
            {
                i++;
                j++;
            }
            else
            {
                j++;
            }
        }
        System.out.println(i==str1.length()?"YES":"NO");
    }
}
*/
//23.swap aplhabet only
/* 
public class java 
{
    public static void main(String[] args) {
        String str="a-bC-dEf-ghIj-";
        char str1[]=str.toCharArray();
        int s=0,e=str.length()-1;
        while(s<e)
        {
            if(!isaplha(str1[s]))
            {
                s++;   
            }
            else if(!isaplha(str1[e]))
            {
                e--;
            }
            else
            {
                char temp=str1[s];
                str1[s]=str1[e];
                str1[e]=temp;
                s++;
                e--;
            }
        }
        for(int i=0;i<str1.length;i++)
        {
            System.out.print(str1[i]+" ");
        }
    }
    static boolean isaplha(char ch)
    {
        return (ch>='a'&&ch<='z'||ch>='A'&&ch<='Z'?true:false);
    }
}
*/
//24.swap only vowel
/* 
public class java {
    public static void main(String[] args) {
        char[] str= ("abseoeediyyy").toCharArray();
        int s=0,e=str.length-1;
        while(s<e)
        {
            if(!isVowel(str[s]))
            {
                s++;
            }
            else if(!isVowel(str[e]))
            {
                e--;
            }
            else
            {
                char temp=str[s];
                str[s]=str[e];
                str[e]=temp;
                s++;
                e--;
            }
        }
        for(int i=0;i<str.length;i++)
        {
            System.out.print(str[i]+" ");
        }
    }
    static boolean isVowel(char ch)
    {
        return ((ch=='a'||ch=='e'||ch=='i'||ch=='o'||ch=='u'||ch=='A'||ch=='E'||ch=='I'||ch=='O'||ch=='U')?true:false);
    }
}
*/
//24.Search Insert Position
/* 
public class java 
{
    public static void main(String[] args) {
        int arr[]={1,3,6,7},target=5;
        int s=0,e=arr.length-1;
        while (s<=e)
        {
            int mid=s+(e-s)/2;
            if(arr[mid]==target)
            {
                return;
            }   
            else if(arr[mid]>target)
            {
                e=mid-1;
            }
            else
            {
                s=mid+1;
            }
        }
        System.out.println("Floor: "+arr[s]+" "+"Ceil: "+arr[e]);//Floor: 6 Ceil: 3
    }
}
*/
//25.maximum subarray (kadane's Algorithm)
/* 
public class java 
{
    public static void main(String[] args) 
    {
       // int arr[] = {-2,1,-3,4,-1,2,1,-5,4};// 4 -1 2 1
       int arr[]={5,4,-1,7,8}; // 5 4 -1 7 8
        int sum = 0, max = Integer.MIN_VALUE;
        int tempStart = 0, startIndex = 0, endIndex = 0;
        
        for (int i = 0; i < arr.length; i++) 
        {
            sum += arr[i];
            
            if (sum > max) 
            {
                max = sum;
                startIndex = tempStart;
                endIndex = i;
            }
            
            if (sum < 0) 
            {
                sum = 0;
                tempStart = i + 1;
            }
        }
        
        System.out.println("Start Index: " + startIndex);
        System.out.println("End Index: " + endIndex);
        System.out.println("Maximum Sum: " + max);
    }
}
*/
//26.Seconds to h:m:s
/* 
public class java {
    public static void main(String[] args) {
        int total_seconds=3666;
        int hours, minutes, seconds;
        hours = total_seconds / 3600; // 3600
        minutes = total_seconds % 3600 / 60;// 66/60  
        seconds = total_seconds % 60;
        System.out.printf("%d seconds is equivalent to %02d:%02d:%02d\n", total_seconds, hours, minutes, seconds);
    }
}
*/
//27.Find Lucky Integer in an Array
// num is equal to the same frquency of that num than return long of number
/* 
import java.util.*;
public class java 
{
    public static void main(String[] args) 
    {
        int arr[]={2,2,2,1,1,0};
        Map<Integer,Integer> tempValue = new HashMap<>();
        Set<Integer>tempKey = new HashSet<>();
        for(int i=0;i<arr.length;i++)
        {
            if(tempValue.containsKey(arr[i]))
            {
                tempValue.put(arr[i],tempValue.get(arr[i])+1);
            }
            else
            {
                tempValue.put(arr[i],1);
            }
        }
        tempKey=tempValue.keySet();
        for(int i=0;i<tempValue.size();i++)
        {
            System.out.println(tempValue.get(i)+" "+tempValue.get(i));
        }
    }
}
*/
//28.Ugly Number(Leetcode:263)
// An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.
// Given an integer n, return true if n is an ugly number.
/* 
public class java 
{
    public static void main(String[] args)
    {
        int num=6;
        if(num<=0){System.out.println("False");return;}
        while(num!=0)
        {
            if(num%2==0)
            {
                num/=2;
            }
            else if(num%3==0)
            {
                num/=3;
            }
            else if(num%5==0)
            {
                num/=5;
            }
            else
            {
                break;
            }
        }
        if(num==1)
        {
            System.out.println("True");
        }
        else
        {
            System.out.println("False");
        }
    }
}
*/
//29.max consective ones
/* 
public class java 
{
    public static void main(String[] args) 
    {
        int arr[]={1,1,0,1,1,1,0,0};
        int max=0,ctr=0;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]==1)
            {
                ctr++;
            }
            else
            {
                if(max<ctr)
                {
                    max=ctr;
                }
                ctr=0;
            }
            if(i==arr.length-1&&max<ctr)
            {
                max=ctr;
            }
        }    
        System.out.println(max);
    }
}
*/
//1.sort array by odd and even parity
/* 
public class java {
    public static void main(String[] args) {
        int arrayOfNumber[]={3,1,2,4},i=0,j=arrayOfNumber.length-1;
        while(i<j)
        {
            if(arrayOfNumber[i]%2>arrayOfNumber[j]%2)
            {
                int temp=arrayOfNumber[i];
                arrayOfNumber[i]=arrayOfNumber[j];
                arrayOfNumber[j]=temp;
            }
            if(arrayOfNumber[i]%2==0){i++;}
            if(arrayOfNumber[j]%2==1){j--;}
        }
        for(i=0;i<arrayOfNumber.length;i++)
        {
            System.out.print(arrayOfNumber[i]+" ");
        }
    }
}
*/



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



import java.util.*;
public class TicketBooker
{
    //63 berths(upper ,lower , middle)  + ( 18 RAC passengers) 
    //10 waiting list tickets ->21 L, 21 M, 21U , 18RAC, 10WL
    static int availableLowerBerths = 1;//normally 21
    static int availableMiddleBerths = 1;//normally 21
    static int availableUpperBerths = 1;//normally 21
    static int availableRacTickets = 1;//normally 18
    static int availableWaitingList = 1;//normally 10

    static Queue<Integer> waitingList = new LinkedList<>();//queue of WL passengers
    static Queue<Integer> racList =  new LinkedList<>();//queu of RAC passengers
    static List<Integer> bookedTicketList =  new ArrayList<>();//list of bookedticket passengers

    static List<Integer> lowerBerthsPositions = new ArrayList<>(Arrays.asList(1));//normally 1,2,...21
    static List<Integer> middleBerthsPositions = new ArrayList<>(Arrays.asList(1));//normally 1,2,...21
    static List<Integer> upperBerthsPositions = new ArrayList<>(Arrays.asList(1));//normally 1,2,...21
    static List<Integer> racPositions = new ArrayList<>(Arrays.asList(1));//normally 1,2,...18
    static List<Integer> waitingListPositions = new ArrayList<>(Arrays.asList(1));//normally 1,2,...10

    static Map<Integer, Passenger> passengers = new HashMap<>();//map of passenger ids to passengers

    //book ticket
    public void bookTicket(Passenger p, int berthInfo,String allotedBerth)
    {
        //assign the seat number and type of berth(L,U,M)
        p.number = berthInfo;
        p.alloted = allotedBerth;
        // add passenger to the map
        passengers.put(p.passengerId,p);
        //add passenger id to the list of booked tickets
        bookedTicketList.add(p.passengerId);        
        System.out.println("--------------------------Booked Successfully");
    }

    //adding to RAC
    public void addToRAC(Passenger p,int racInfo,String allotedRAC)
    {
        //assign seat number and type(RAC)
        p.number = racInfo;
        p.alloted = allotedRAC;
        // add passenger to the map
        passengers.put(p.passengerId,p);
        //add passenger id to the queue of RAC tickets
        racList.add(p.passengerId);
        //decrease available RAC tickets by 1    
        availableRacTickets--;
        //remove the position that was alloted to the passenger
        racPositions.remove(0);

        System.out.println("--------------------------added to RAC Successfully");
    }

    //adding to WL
    public void addToWaitingList(Passenger p,int waitingListInfo,String allotedWL)
    {
        //assign seat number and type(WL)
        p.number = waitingListInfo; 
        p.alloted = allotedWL;
        // add passenger to the map
        passengers.put(p.passengerId,p);
        //add passenger id to the queue of WL tickets
        waitingList.add(p.passengerId);
        //decrease available WL tickets by 1    
        availableWaitingList--;
        //remove the position that was alloted to the passenger
        waitingListPositions.remove(0);

        System.out.println("-------------------------- added to Waiting List Successfully");
    }

    //cancel ticket
    public void cancelTicket(int passengerId)
    {
        //remove the passenger from the map
        Passenger p = passengers.get(passengerId);
        passengers.remove(Integer.valueOf(passengerId));
        //remove the booked ticket from the list
        bookedTicketList.remove(Integer.valueOf(passengerId));

        //take the booked position which is now free
        int positionBooked = p.number;

        System.out.println("---------------cancelled Successfully");

        //add the free position to the correspoding type of list (either L,M,U)
        if(p.alloted.equals("L")) 
        { 
          availableLowerBerths++;
          lowerBerthsPositions.add(positionBooked);
        }
        else if(p.alloted.equals("M"))
        { 
          availableMiddleBerths++;
          middleBerthsPositions.add(positionBooked);
        }
        else if(p.alloted.equals("U"))
        { 
          availableUpperBerths++;
          upperBerthsPositions.add(positionBooked);
        }

        //check if any RAC is there
        if(racList.size() > 0)
        {
            //take passenger from RAC and increase the free space in RAC list and increase available RAC tickets
            Passenger passengerFromRAC = passengers.get(racList.poll());
            int positionRac = passengerFromRAC.number;
            racPositions.add(positionRac);
            racList.remove(Integer.valueOf(passengerFromRAC.passengerId));
            availableRacTickets++;

            //check if any WL is there
            if(waitingList.size()>0)
            {
                //take the passenger from WL and add them to RAC , increase the free space in waiting list and 
                //increase available WL and decrease available RAC by 1
                Passenger passengerFromWaitingList = passengers.get(waitingList.poll());
                int positionWL = passengerFromWaitingList.number;
                waitingListPositions.add(positionWL);
                waitingList.remove(Integer.valueOf(passengerFromWaitingList.passengerId));

                passengerFromWaitingList.number = racPositions.get(0);
                passengerFromWaitingList.alloted = "RAC";
                racPositions.remove(0);
                racList.add(passengerFromWaitingList.passengerId);
                
                availableWaitingList++;
                availableRacTickets--;
            }
            // now we have a passenger from RAc to whom we can book a ticket, 
            //so book the cancelled ticket to the RAC passenger
            Main.bookTicket(passengerFromRAC);
        }
    
    }

    //print all available seats
    public void printAvailable()
    {
        System.out.println("Available Lower Berths "  + availableLowerBerths);
        System.out.println("Available Middle Berths "  + availableMiddleBerths);
        System.out.println("Available Upper Berths "  + availableUpperBerths);
        System.out.println("Availabel RACs " + availableRacTickets);
        System.out.println("Available Waiting List " + availableWaitingList);
        System.out.println("--------------------------");
    }

    //print all occupied passengers from all types including WL
    public void printPassengers()
    {
        if(passengers.size() == 0)
        {
            System.out.println("No details of passengers");
            return;
        }
        for(Passenger p : passengers.values())
        {
            System.out.println("PASSENGER ID " + p.passengerId );
            System.out.println(" Name " + p.name );
            System.out.println(" Age " + p.age );
            System.out.println(" Status " + p.number + p.alloted);
            System.out.println("--------------------------");
        }
    }
}

public class Passenger
{
    static int id = 1;//static variable to give id for every new passenger
    String name;
    int age;
    String berthPreference;// U or L or M
    int passengerId;// id of passenger created automatically
    String alloted;//alloted type (L,U,M,RAC,WL)
    int number;//seat number
    public Passenger(String name,int age,String berthPreference)
    {
        this.name = name;
        this.age = age;
        this.berthPreference = berthPreference;
        this.passengerId = id++;
        alloted = "";
        number = -1;
    }
}

import java.util.*;

public class Main
{
    //function for bokoing ticket
    public static void bookTicket(Passenger p)
    {
        TicketBooker booker = new TicketBooker();
        //if no WL is available , means all tickets are filled.. so no tickets available
        if(TicketBooker.availableWaitingList == 0)
        {
            System.out.println("No Tickets Available");
            return;
        }
        //check if preferred berth is available
        if((p.berthPreference.equals("L") && TicketBooker.availableLowerBerths > 0 )||
           (p.berthPreference.equals("M") && TicketBooker.availableMiddleBerths > 0) ||
           (p.berthPreference.equals("U") && TicketBooker.availableUpperBerths > 0))
        {
            System.out.println("Preferred Berth Available");
            if(p.berthPreference.equals("L"))
            {
                System.out.println("Lower Berth Given");
                //call booking function in the TicketBooker class
                booker.bookTicket(p,(TicketBooker.lowerBerthsPositions.get(0)),"L");
                //remove the booked position from available positions and also decrease available seats of that
                // particular type
                TicketBooker.lowerBerthsPositions.remove(0);
                TicketBooker.availableLowerBerths--;
                
                

            }
            else if(p.berthPreference.equals("M"))
            {
                System.out.println("Middle Berth Given");
                //call booking function in the TicketBooker class
                booker.bookTicket(p,(TicketBooker.middleBerthsPositions.get(0)),"M");
                //remove the booked position from available positions and also decrease available seats of that
                // particular type
                TicketBooker.middleBerthsPositions.remove(0);
                TicketBooker.availableMiddleBerths--;

            }
            else if(p.berthPreference.equals("U"))
            {
                System.out.println("Upper Berth Given");
                //call booking function in the TicketBooker class
                booker.bookTicket(p,(TicketBooker.upperBerthsPositions.get(0)),"U");
                //remove the booked position from available positions and also decrease available seats of that
                // particular type
                TicketBooker.upperBerthsPositions.remove(0);
                TicketBooker.availableUpperBerths--;
            }

        }
        //preference not available -> book the available berth
       
        else if(TicketBooker.availableLowerBerths > 0)
        {
            System.out.println("Lower Berth Given");
            //call booking function in the TicketBooker class
            booker.bookTicket(p,(TicketBooker.lowerBerthsPositions.get(0)),"L");
            //remove the booked position from available positions and also decrease available seats of that
            // particular type
            TicketBooker.lowerBerthsPositions.remove(0);
            TicketBooker.availableLowerBerths--;
            

        }
        else if(TicketBooker.availableMiddleBerths > 0)
        {
            System.out.println("Middle Berth Given");
            //call booking function in the TicketBooker class
            booker.bookTicket(p,(TicketBooker.middleBerthsPositions.get(0)),"M");
            //remove the booked position from available positions and also decrease available seats of that
            // particular type
            TicketBooker.middleBerthsPositions.remove(0);
            TicketBooker.availableMiddleBerths--;

        }
        else if(TicketBooker.availableUpperBerths > 0)
        {
            System.out.println("Upper Berth Given");
            //call booking function in the TicketBooker class
            booker.bookTicket(p,(TicketBooker.upperBerthsPositions.get(0)),"U");
            //remove the booked position from available positions and also decrease available seats of that
            // particular type
            TicketBooker.upperBerthsPositions.remove(0);
            TicketBooker.availableUpperBerths--;
            
        }
        // if no berth available go to RAC
        else if(TicketBooker.availableRacTickets > 0)
        {
            System.out.println("RAC available");
            booker.addToRAC(p,(TicketBooker.racPositions.get(0)),"RAC" );
        }
        // if no RAC available go to WL
        else if(TicketBooker.availableWaitingList > 0)
        {
            System.out.println("Added to Waiting List");
            booker.addToWaitingList(p,(TicketBooker.waitingListPositions.get(0)),"WL");
            
        }
        
    }
    //cancel ticket function
    public static void cancelTicket(int id)
    {
        TicketBooker booker = new TicketBooker();
        //check if passenger id is valid
        if(!booker.passengers.containsKey(id))
        {
            System.out.println("Passenger detail Unknown");
        }
        else
            booker.cancelTicket(id);
    }
    public static void main(String[] args)
    {
        Scanner s = new Scanner(System.in);
        boolean loop = true;
        //loop to get choices from user until he stops
        while(loop)
        {
            System.out.println(" 1. Book Ticket \n 2. Cancel Ticket \n 3. Available Tickets \n 4. Booked Tickets \n 5. Exit");
            int choice = s.nextInt();
            switch(choice)
            {
                // book ticket
                case 1:
                {
                    //get details from Passenger
                    System.out.println("Enter Passenger name,age and berth preference (L,M or U)");
                    String name = s.next();
                    int age = s.nextInt();
                    //get berth preference (L,U,M)
                    String berthPreference = s.next();
                    //create a passenger object
                    Passenger p = new Passenger(name,age,berthPreference);
                    //booking
                    bookTicket(p);
                }
                break;
                //cancel ticket
                case 2:
                {
                    //get passenger id to cancel
                    System.out.println("Enter passenger Id to cancel");
                    int id = s.nextInt();
                    cancelTicket(id);
                }
                break;
                //available tickets print
                case 3:
                {
                    TicketBooker booker = new TicketBooker();
                    booker.printAvailable();
                }
                break;
                //occupied tickets print
                case 4:
                {
                    TicketBooker booker = new TicketBooker();
                    booker.printPassengers();
                }
                break;
                //exit
                case 5:
                {
                    loop = false;
                }
                break;
                default:
                break;
            }
        }
    }
}


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


//Brute, Better and Optimal Approaches
//----------(1.ARRAY)------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//1.largest element in an array
/* 
import java.util.*;
public class Main
{
    public static void main(String[] args)
    {
        //1.brute
        //   time complexity : o(n^2)
        //   space complexity: o(1)
        int arr1[]={3,2,1,5,2};
        System.out.println(Brute(arr1, 0)); // 5
        System.out.println(Arrays.toString(arr1));// 1 2 2 3 5

        //2.better
        //   time complexity : o(n)
        //   space complexity: o(1)
        int arr2[]={3,2,1,5,2};
        System.out.println(Better(arr2, 0)); // 5
        System.out.println(Arrays.toString(arr2));// 3 2 1 5 2

        //3.Optimal
        //   time complexity : o(n) becuse of factor (1/2) is dropped in Big-O notation.
        //   space complexity: o(1)
        int arr3[]={3,2,1,5,2};
        System.out.println(Better(arr3, 0)); // 5
        System.out.println(Arrays.toString(arr3));// 3 2 1 5 2
    }
    static int Brute(int arr[],int largest)
    {
        for(int i=0;i<arr.length-1;i++)
        {
            for(int j=0;j<arr.length-i-1;j++)
            {
                if(arr[j]>arr[j+1])
                {
                    int temp=arr[j];
                    arr[j]=arr[j+1];
                    arr[j+1]=temp;
                }
            }
        }
        return arr[arr.length-1];
    }
    static int Better(int arr[],int largest)
    {
        for(int i=0;i<arr.length;i++)
        {
            if(largest<arr[i])
            {
                largest=arr[i];
            }
        }
        return largest;
    }
    static int Optimal(int arr[],int largest)
    {
        // 1 2 3 4 5 6
        for(int i=0;i<arr.length/2;i++)
        {
            if(largest<arr[i])
            {
                largest=arr[i];
            }
            if(largest<arr[arr.length-1-i])
            {
                largest=arr[arr.length-i-1];
            }
        }
        if(arr.length%2==1&&largest<arr[arr.length/2])
        {
            largest=arr[largest/2];
        }
        return largest;
    }
}
*/



//2.second largest in array
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args) {

        //1.Brute
        //   time complexity : o(n^2+n)
        //   space complexity: o(1)
        int arr1[]={2,3,4,5,51,23,51,15};
        System.out.println(Brute(arr1, 0));//23
        //2.Better
        //   time complexity : o(n) In Big-O notation, constant factors are ignored,so o(2n) simplifies to o(n)
        //   space complexity: o(1)
        int arr2[]={2,3,4,5,51,23,51,15};
        System.out.println(Better(arr2, 0));//23

        //3.Optimal
        //   time complexity : o(n) 
        //   space complexity: o(1)
        int arr3[]={2,3,4,5,51,23,51,15};
        System.out.println(Optimal(arr3, 0));//23
    }
    static int Brute(int arr1[],int largest)
    {
        Arrays.sort(arr1);
        for(int i=arr1.length-1;i>=0;i--)
        {
            if(arr1[arr1.length-1]!=arr1[i])
            {
                return arr1[i];
            }
        }
        return -1;
    }
    static int Better(int arr2[],int largest)
    {
        for(int i=0;i<arr2.length;i++)
        {
            if(arr2[i]>largest)
            {
                largest=arr2[i];
            }
        }
        int temp=largest;
        largest=0;
        for(int i=0;i<arr2.length;i++)
        {
            if(arr2[i]>largest&&temp!=arr2[i])
            {
                largest=arr2[i];
            }
        }
        return largest;
    }
    static int Optimal(int arr3[],int slargest)
    {
        int largest=Integer.MIN_VALUE; 
        slargest=Integer.MIN_VALUE;
        for(int i=0;i<arr3.length;i++)
        {
            if(arr3[i]>largest)
            {
                slargest=largest;
                largest=arr3[i];
            }
            else if(arr3[i]<largest&&arr3[i]>slargest)
            {
                slargest=arr3[i];
            }
        }
        return slargest;
    }
}
*/


//3.array is sorted are not
/* 
public class Main 
{
   public static void main(String[] args) 
    {
        //3.optimal
        int arr1[]={1,2,1,3,4};
        for(int i=1;i<arr1.length;i++)
        {
            if(arr1[i-1]>arr1[i])
            {
                System.out.println("---Array Unsorted---");
                return;
            }
        }
        System.out.println("---Array Sorted---");    
    }
}
*/
//4.remove duplicates in-phase from sorted array
/*
import java.util.*;
public class Main 
{
    public static void main(String[] args) 
    {
        //1.better using set
        //  time complexity:o(n)
        //  space complexity:o(n)
        int arr1[]={1,1,2,2,2,4,5,5,6,6};
        System.out.println(better(arr1));//1 2 4 5 6    5

        //2.optimal 
        //  time complexity:o(n)
        //  space complexity:o(1)
        int arr2[]={1,1,2,2,2,4,5,5,6,6};
        System.out.println(Optimal(arr1,0));// 1 2 4 5 6    5
    }
    static int better(int arr1[])
    {
        Set<Integer> arr = new HashSet<>();
        for(int i=0;i<arr1.length;i++)
        {
            arr.add(arr1[i]);
        }
        for(Integer temp:arr)
        {
            System.out.print(temp+" ");
        }
        System.out.println();
        return arr.size();
    }
    static int Optimal(int arr[],int j)
    {
        for(int i=0;i<arr.length;i++)
        {
            if(i==arr.length-1)
            {
                arr[j++]=arr[i];
            }
            else if(arr[i]!=arr[i+1])
            {
                arr[j++]=arr[i];
            }
        }
        for(int i=0;i<j;i++)
        {
            System.out.print(arr[i]+" ");
        }
        System.out.println();
        return j;
    }
}
*/


//5.Left Rotate an array by one place
/* 
public class Main 
{
    public static void main(String[] args) {

        //1.better (with using third variable)
        int arr1[]={1,2,3,4,5};
        Better(arr1);
        for(int i=0;i<arr1.length;i++)
        {
            System.out.print(arr1[i]+" ");
        }
        System.out.println();
        //2.Optimal (without using third variable)
        int arr2[]={1,2,3,4,5};
        Optimal(arr2);
        for(int i=0;i<arr2.length;i++)
        {
            System.out.print(arr2[i]+" ");
        }
    }
    static void Better(int arr[])
    {
        int temp=arr[0];
        for(int i=1;i<arr.length;i++)
        {
            arr[i-1]=arr[i];
        }
        arr[arr.length-1]=temp;
    }
    static void Optimal(int arr[])
    {

        // 2 1 3 4 5
        // 2 3 1 4 5
        // 2 3 4 1 5
        // 2 3 4 5 1
        for(int i=0;i<arr.length-1;i++)
        {
            arr[i]=arr[i]^arr[i+1];
            arr[i+1]=arr[i]^arr[i+1];
            arr[i]=arr[i]^arr[i+1];
        }
    }
}
*/


//6.Left Rotate the array By D places
/* 
public class Main 
{
    public static void main(String[] args) {
        //1.Brute:
        //  Time complexity : o(d1)+o(len-d1)+o()
        //  Space Complexity: o(d1)
        System.out.println("Brute");
        int arr1[]={1,2,3,4,5,6,7},d1=3;
        Brute(arr1, d1);
        for(int temp:arr1)
        {
            System.out.print(temp+" ");
        }

        System.out.println("\nOptimal:");
        
        //2.Optimal:
        int arr2[]={1,2,3,4,5,6,7},d2=3;
        //       1 2 3|4 5 6 7
        //       3 2 1|7 6 5 4  reverse(0 to d2-1) and revese(d2 to len)
        //       4 5 6|7 1 2 3  reverse(o to d2-1)    
        if(d2>=arr2.length)
        {
            d2=d2%arr2.length;
        }
        int len=arr2.length;              
        Optimal(arr2, 0, d2-1);
        Optimal(arr2, d2, len-1);
        Optimal(arr2, 0, len-1);
        for(int i=0;i<len;i++)
        {
            System.out.print(arr2[i]+" ");
        }
    }
    static void Brute(int arr1[],int d1)
    {
        int temp[]=new int[d1];
        for(int i=0;i<d1;i++)
        {
            temp[i]=arr1[i];
        }
        for(int i=d1;i<arr1.length;i++)
        {
            arr1[i-d1]=arr1[i];
        }
        //int j=0;
        for(int i=arr1.length-d1;i<arr1.length;i++)
        {
            arr1[i]=temp[i-d1-1];
            //arr1[i]=temp[j++];
        }
    }
    static void Optimal(int arr[],int start,int end)
    {
        while(start<=end)
        {
            int temp=arr[start];
            arr[start]=arr[end];
            arr[end]=temp;
            start++;
            end--;
        }
    }
}
*/


//7.Move all Zero to the end of the array
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr1[]={1,0,2,3,2,0,0,4,5,1};
        //1.Brute:
        // Time Complexity:o(n)
        // Space Complexity:o(n)
        int temp1[]=Brute(arr1);
        for(int i=0;i<arr1.length;i++)
        {
            System.out.print(temp1[i]+" ");
        }
        System.out.println();
        //2.Optimal:
        // Time Complexity:o(n)
        // Space Complexity:o(1)
        int arr2[]={1,0,2,3,2,0,0,4,5,1};
        Optimal(arr2);
        for(int i=0;i<arr2.length;i++)
        {
            System.out.print(arr2[i]+" ");
        }

    }
    static int[] Brute(int arr1[])
    {
        int temp[]=new int[arr1.length],j=0;
        for(int i=0;i<arr1.length;i++)
        {
            if(arr1[i]!=0)
            {
                temp[j++]=arr1[i];
            }
        }
        for(int i=j;i<arr1.length;i++)
        {
            temp[i]=0;
        }
        return temp;
    }
    static void Optimal(int arr2[])
    {
        int j=0;
        for(int i=0;i<arr2.length;i++)
        {
            if(arr2[i]!=0)
            {
                arr2[j++]=arr2[i];
            }
        }
        for(int i=j;i<arr2.length;i++)
        {
            arr2[i]=0;
        }
    }
} 
*/



//8.Sorted Array Search
/* 
public class Main 
{
    public static void main(String[] args) {
        //1.Brute
        //  Time Complexity : o(n)
        //  Space Complexity: o(1)
        int arr1[]={1,2,3,4,6};
        int target1=6;
        System.out.println(Brute(arr1, target1));

        //2.Brute
        //  Time Complexity : o(n)
        //  Space Complexity: o(1)
        int arr2[]={1,2,3,4,6};
        int target2=6;
        System.out.println(Optimal(arr2, target2));
    }
    static int Brute(int arr1[],int target)
    {
        for(int i=0;i<arr1.length;i++)
        {
            if(arr1[i]==target)
            {
                return i;
            }
        }
        return -1;
    }
    static int Optimal(int arr2[],int target)
    {
        int start=0,end=arr2.length-1;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(arr2[mid]>target)
            {
                end=mid-1;
            }
            else if(arr2[mid]<target)
            {
                start=mid+1;
            }
            else
            {
                return mid;
            }
        }
        return -1;
    }
}
*/


//9.Union of Two Sorted Arrays
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args) 
    {
        //1.Brute:
        // Time Complexity: o(nlog)
        // Space Complexity:o(2n)
        int arr1[]={2,2,3,4,5},arr2[]={1,1,2,3,4};    
        ArrayList<Integer>temp1 = new ArrayList<>();
        ArrayList<Integer>temp2 = Brute(arr1, arr2, temp1);
        for(int i=0;i<temp2.size();i++)
        {
            System.out.print(temp2.get(i)+" ");  //2 3 4 5 1 
        }
        System.out.println();

        //2.Optimal
        // Time Complexity: O(n)+O(m)+O(n+m)=O(n+m)
        // Space Complexity:o(n+m)
        int arr3[]={2,2,3,4,5},arr4[]={1,1,2,3,4};    
        ArrayList<Integer>temp3 = Optimal(arr3, arr4);
        for(int i=0;i<temp3.size();i++)
        {
            System.out.print(temp3.get(i)+" ");//1 2 3 4 5
        }
    }
    static ArrayList<Integer> Brute(int arr1[],int arr2[],ArrayList<Integer>temp1)
    {
        for(int i:arr1)
        {
            if(!temp1.contains(i))
            {
                temp1.add(i);
            }
        }
        for(int i:arr2)
        {
            if(!temp1.contains(i))
            {
                temp1.add(i);
            }
        }
        return temp1;
    }

    static ArrayList<Integer> Optimal(int arr1[],int arr2[])
    {
        ArrayList<Integer>temp=new ArrayList<>();
        int start=RemoveDulicate(arr1);
        int end=RemoveDulicate(arr2);
        int i=0,j=0;
        while (i<start&&j<end) 
        {
            if(arr1[i]<arr2[j])
            {
                temp.add(arr1[i]);
                i++;
            }
            else if(arr1[i]>arr2[j])
            {
                temp.add(arr2[j]);
                j++;
            }
            else
            {
                temp.add(arr1[i]);
                i++;
                j++;
            }
        }
        while(i<start)
        {
            temp.add(arr1[i++]);
        }
        while (j<end) 
        {
            temp.add(arr2[j--]);    
        }
        return temp;
    }
    static int RemoveDulicate(int arr[])
    {
        int j=0;
        for(int i=0;i<arr.length;i++)
        {
            if(arr.length-1==i)
            {
                arr[j++]=arr[i];
            }
            else if(arr[i]!=arr[i+1])
            {
                arr[j++]=arr[i];
            }
        }
        return j;
    }
}
*/



//10.Missing Number 1 to N
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        //1.Brute:
        //  Time Complexity  : o(n^2)
        //  Space Complexity : o(1)
        int arr1[]={1,2,5,4},N1=5;   
        System.out.println(Brute(arr1, N1));

        //2.Optimal:
        //  Time Complexity  : o(n)
        //  Space Complexity : o(1)
        int arr2[]={1,2,5,4},N2=5;   
        Brute(arr2, N2);
        for(int i=0;i<arr2.length;i++)
        {
            if(i+1!=arr2[i])
            {
                System.out.println(i+1);
                return;
            }
        }
        System.out.println(N2);

    }
    static int Brute(int arr1[],int N)
    {
        for(int i=1;i<=N;i++)
        {
            int flag=-1;
            for(int j=0;j<arr1.length;j++)
            {
                if(i==arr1[j])
                {
                    flag=1;
                    break;
                }
            }
            if(flag==-1)
            {
                return i;
            }
        }
        return N;
    }
    static void Optimal(int arr2[])
    {
        for(int i=0;i<arr2.length;)
        {
            int index=arr2[i];
            if( arr2.length>arr2[index] && arr2[i]!=arr2[index] )
            {
                int temp = arr2[i];
                arr2[i]=arr2[index];
                arr2[index]=temp;
            }
            else
            {
                i++;
            }
        }
    }
}
*/



//11.Maximum consecutive Ones
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr1[]={1,1,0,1,1,1,0,1,1,1,1},max=0,ones=0;
        for(int i=0;i<arr1.length;i++)
        {
            if(arr1[i]==1)
            {
                ones++;
            }
            else if(arr1[i]==0)
            {
                if(max<ones)
                {
                    max=ones;
                }
                ones=0;
            }
            if(i==arr1.length-1)
            {
                if(max<ones)
                {
                    max=ones;
                }   
            }
        }   
        System.out.println(max); 
    }    
}
*/


//12.Find the Number that Appears Once,and the other twice
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        //1.Brute:
        //  Time Complexity  : O(n^2)
        //  Space Complexity : O(1)
        int arr1[]={1,1,2,3,3,4,4,5,5};   
        System.out.println(Brute(arr1)); //2

        //2.Optimal:
        //  Time Complexity  : O(n)
        //  Space Complexity : O(1)
        int arr2[]={1,1,2,3,3,4,4,5,5};   
        System.out.println(Optimal(arr2)); //2

    }   
    static int Brute(int arr1[])
    {
        for(int i=0;i<arr1.length;i++)
        {
            int ctr=0;
            for(int j=0;j<arr1.length;j++)
            {
                if(arr1[i]==arr1[j])
                {
                    ctr++;
                }
            }
            if(ctr==1)
            {
                return arr1[i];
            }
        }
        return -1;
    }
    static int Optimal(int arr[])
    {
        int ans=0;
        for(int i=0;i<arr.length;i++)
        {
            ans=ans^arr[i];
        }
        return ans;
    }
}
*/


//13.Longest Subarray with sum K
/* 
public class Main 
{
    public static void main(String[] args)
    {
        //1.Optimal
        //  Time Complextity: O(n)
        //  Space Complexity: O(1)
        int arr1[]={1,2,3,1,1,1,1,3,3},k=6;// 4
        // int arr1[]={10,5,2,7,1,9},k=15;// 4
        System.out.println(Optimal(arr1, k));
    }
    static int Optimal(int arr1[],int k)
    {
        int max=0,sum=arr1[0];
        int i=0,j=0;
        while(j<arr1.length)
        {
            while(i<=j && sum > k)
            {
                sum=sum-arr1[i];
                i++;
            }
            if(sum==k)
            {
                if(max<j-i+1)
                {
                    max=j-i+1;
                }
            }
            j++;
            if(j<arr1.length)
            {
                sum=sum+=arr1[j];
            }
        }
        return max;
    }
}
*/


//14.two sum
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args) 
    {
        //1.Brute
        //  Time Complexity : O(n^2)
        //  Space Complexity: O(1)
        int arr1[]={2,6,5,8,11},target1=14;
        int temp1[]=Brute(arr1, target1);
        System.out.println(temp1[0]+" "+temp1[1]);

        //2.Better
        //  Time Complexity : O(n^2)
        //  Space Complexity: O(n)
        int arr2[]={2,6,5,8,11},target2=14;
        int temp2[]=Better(arr2, target2);
        System.out.println(temp2[0]+" "+temp2[1]);

        //3.optimal
        // Time Complexity  : O(2logn)
        // Space Complexitu : O(1)
        int arr3[]={2,6,5,8,11},target3=14;
        //          2 5 6 8 11
        int temp3[]=Optimal(arr3, target3);
        System.out.println(temp3[0]+" "+temp3[1]);

    }
    static int[] Brute(int arr[],int target)
    {
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr.length;j++)
            {
                if( i!=j && arr[i]+arr[j]==target)
                {
                    return new int[]{i,j}; 
                }
            }
        }
        return new int[]{-1,-1};
    }
    static int[] Better(int arr[],int target)
    {
        ArrayList<Integer>temp=new ArrayList<>();
        for(int i=0;i<arr.length;i++)
        {
            temp.add(arr[i]);
        }
        for(int i=0;i<arr.length;i++)
        {
            if(temp.contains(target-arr[i]))
            {
                return new int[]{i,temp.indexOf(target-arr[i])};
            }
        }
        return new int[]{-1,-1};
    }
    static int[] Optimal(int arr[],int target)
    {
        Arrays.sort(arr);
        int start=0,end=arr.length-1;
        while(start<=end)
        {
            int sum=arr[start]+arr[end];
            if(sum<target)
            {
                start++;
            }
            else if(sum>target)
            {
                end--;
            }
            else
            {
                return new int[]{start,end};
            }
        }
        return new int[]{start,end};
    }
}
*/


//15.Sort an array of 0's 1's and 2's
/* 
public class Main 
{
    public static void main(String[] args)
    {
        //1.brute:
        // Time Complexity  : O(2n)
        // Space Complexitty: O(1)
        int arr1[]={0,1,2,0,1,2,1,0,0,0,1,2};
        //0-5,1-4,2-3
        Brute(arr1);
        for(int i=0;i<arr1.length;i++)
        {
            System.out.print(arr1[i]+" ");
        }
        System.out.println();
        
        //2.Optimal
        int arr2[]={0,1,2,0,1,2,1,0,0,0,1,2};
        Optimal(arr2);
        for(int i=0;i<arr2.length;i++)
        {
            System.out.print(arr2[i]+" ");
        }
    }
    static void Brute(int arr[])
    {
        int zero=0,one=0;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]==0)
            {
                arr[zero++]=0;
            }
            else if(arr[i]==1)
            {
                one++;
            }
        }
        for(int i=zero;i<zero+one;i++)
        {
            arr[i]=1;
        }
        for(int i=zero+one;i<arr.length;i++)
        {
            arr[i]=2;
        }
    }
    static void Optimal(int arr[])
    {
        int left=0,right=arr.length-1;
        int mid=0;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[mid]==0)
            {
                int temp=arr[left];
                arr[left]=arr[mid];
                arr[mid]=temp;
                left++;
                mid++;
            }
            else if(arr[mid]==1)
            {
                mid++;
            }
            else 
            {
                int temp=arr[right];
                arr[right]=arr[mid];
                arr[mid]=temp;
                right--;
            }
        }
    }
}
*/

//16.Majority Elements (N/2)
/* 
import java.util.*;
import java.util.Map.Entry;
public class Main
{
    public static void main(String[] args) 
    {
        //1.Brute
        // Time Complexity : O(n^2)
        // Space Complexity: O(1)
        int arr1[]={2,2,3,3,1,2,2};
        System.out.println(Brute(arr1));//2

        //2.Better
        int arr2[]={2,2,3,3,1,2,2};
        System.out.println(Better(arr2));//2

        //3.Optimal (Moore's Voting Algo)
        int arr3[]={2,2,3,3,1,2,2};
        System.out.println(Optimal(arr3));
    }
    static int Brute(int arr[])
    {
        for(int i=0;i<arr.length;i++)
        {
            int ctr=0;
            for(int j=i;j<arr.length;j++)
            {
                if(arr[i]==arr[j])
                {
                    ctr++;
                }
            }
            if(ctr>arr.length/2)
            {
                return arr[i];
            }
        }
        return -1;
    }
    static int Better(int arr2[])
    {
        Map<Integer,Integer> temp = new HashMap<>();
        for(int i=0;i<arr2.length;i++)
        {
            int value=temp.getOrDefault(arr2[i], 0);
            temp.put(arr2[i],value+1);
        }
        for( Map.Entry<Integer, Integer> i : temp.entrySet())
        {
           // System.out.println(i.getKey()+" "+i.getValue());
            if(i.getValue()>arr2.length/2)
            {
                return i.getKey();    
            }
        }
        return -1; 
    }
    static int Optimal(int arr3[])
    {
        int ctr=0,element=0;
        for(int i=0;i<arr3.length;i++)
        {
            if(ctr==0)
            {
                element=arr3[i];
            }
            else if(element==arr3[i])
            {
                ctr++;
            }
            else
            {
                ctr--;
            }
        }
        ctr=0;
        for(int i=0;i<arr3.length;i++)
        {
            if(element==arr3[i])
            {
                ctr++;
            }
        }
        if(ctr>arr3.length/2)
        {
            return element;
        }
        return -1;
    }
}
*/

//17.Kadane's Algorithm,maximum subarray sum
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr1[]={-2,1,-3,4,-1,2,1,-5,4};    
        System.out.println(Brute(arr1));

       // int arr2[]={-2,1,-3,4,-1,2,1,-5,4}; 
        int arr2[]={5,4,-1,7,8};   
        System.out.println(Optimal(arr2));
    }
    static int Brute(int arr1[])
    {
        int max=0;
        for(int i=0;i<arr1.length;i++)
        {
            int sum=0;
            for(int j=i;j<arr1.length;j++)
            {
                sum=sum+arr1[j];
                if(max<sum)
                {
                    max=sum;
                }
            }
        }
        return max;
    }
    static int Optimal(int arr2[])
    {
        int max=Integer.MIN_VALUE,sum=0;
        int startIndex=0,endIndex=0;
        for(int i=0;i<arr2.length;i++)
        {
            sum=sum+=arr2[i];
            if(max<sum)
            {
                max=sum;
                endIndex=i;
            }
            if(sum<0)
            {
                sum=0;
                startIndex=i+1;
            }
        }
        System.out.println(startIndex+" "+endIndex);
        return max;
    }
}
*/

//18.Max sum in sub-arrays two number
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr[]={4,3,1,5,6};
        long max=0;
        for(int i=0;i<arr.length-1;i++)
        {
            if(max<(arr[i]+arr[i+1]))
            {
                max=arr[i]+arr[i+1];
            }
        }
        System.out.println(max);    
    }
}
*/



//19.Rearrange Array Elements By Sign
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr1[]={3,1,-2,-5,2,-4};
        int arr2[]=Optimal(arr1);
        for(int i=0;i<arr2.length;i++)
        {
            System.out.print(arr2[i]+" ");//3 -2 1 -5 2 -4 
        }
    }
    static int[] Optimal(int arr[])
    {
        int positive=0,negative=1;
        int temp[]=new int[arr.length];
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]>=0)
            {
                temp[positive]=arr[i];
                positive=positive+2;
            }
            else
            {
                temp[negative]=arr[i];
                negative=negative+2;
            }
        }
        return temp;
    }
}
*/

//20.Leaders in an Array problem
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr[]={16,17,4,3,5,2},max=0; // 17 5 2
        for(int i=arr.length-1;i>=0;i--) 
        {
            if(max<arr[i])
            {
                max=arr[i];
                arr[i]=-1*arr[i];
            }
        }      
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]<0)
            {
                System.out.print(-1*arr[i]+" ");
            }
        }
    }
}
*/


//21.Longest Consecutive Sequence in an Array
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args) 
    {
        int arr1[]={102,4,100,1,101,3,2,1,1};
        System.out.println(Brute(arr1));//4

        int arr2[]={102,4,100,1,101,3,2,1,1};
        System.out.println(Better(arr2));//4

        int arr3[]={102,4,100,1,101,3,2,1,1};
        System.out.println(Optimal(arr3));//4

    }
    static int Brute(int arr[])
    {
        int max=0;
        for(int i=0;i<arr.length;i++)
        {
            int element=arr[i],ctr=0;
            for(int j=0;j<arr.length;j++)
            {
                if(element==arr[j])
                {
                    element++;
                    ctr++;
                    j=0;
                }
            }
            if(max<ctr){max=ctr;}
        }
        return max;
    }

    static int Better(int arr[])
    {
        Arrays.sort(arr); // use merge sort (n log n)
        int max=0,element=arr[0],ctr=0;
        for(int i=0;i<arr.length;i++)
        {
            if(element==arr[i])
            {
                ctr++;
                element++;
            }
            else
            {
                if(max<ctr){max=ctr;}
                ctr=0;
                element=arr[i];
            }
        }
        return max;
    }

    static int Optimal(int arr[])
    {
        ArrayList<Integer>temp=new ArrayList<>();
        for(int i=0;i<arr.length;i++)
        {
            if(!temp.contains(arr[i])){temp.add(arr[i]);}
        }
        int element=arr[0],ctr=0,max=0;
        for(int i=0;i<arr.length;)
        {
            if(temp.contains(element))
            {
                ctr++;
                element=element+1;
            }
            else
            {
                if(max<ctr){max=ctr;}
                ctr=0;
                element=arr[i++];
            }
        }
        return max;
    }
}
*/

//21.set matrix zero:
/* 
public class Main 
{
    public static void main(String[] args) {
        int arr[][]=
        {
           {0,1,2,0},
           {3,4,5,2},
           {1,3,1,5}
        };
        setZeroes(arr);
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr[0].length;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
    }
    static void setZeroes(int[][] arr) 
    {
            int col00=1;
            for(int i=0;i<arr.length;i++)
            {
                for(int j=0;j<arr[i].length;j++)
                {
                    if(arr[i][j]==0)
                    {
                        //row
                        arr[i][0]=0;
                        //col
                        if(j!=0)
                        {
                            arr[0][j]=0;
                        }
                        else
                        {
                            col00=0;
                        }
                    }
                }
            }
            //inside a arr without col1 and row1
            for(int i=1;i<arr.length;i++)
            {
                for(int j=1;j<arr[i].length;j++)
                {
                    if(arr[i][0]==0||arr[0][j]==0)
                    {
                        arr[i][j]=0;
                    }
                }
            }
            if(arr[0][0]==0)
            {
                for(int i=0;i<arr[0].length;i++)
                {
                    arr[0][i]=0;
                }
            }
            if(col00==0)
            {
                for(int i=0;i<arr.length;i++)
                {
                    arr[i][0]=0;
                }
            }
        }
}
*/

//22.Rotate Martix by by 90 degrees
/* 
public class Main
{
    public static void main(String[] args) 
    {
        int arr[][]=
        {
            {1,2,3},
            {4,5,6},
            {7,8,9}
        };    
        degree_90(arr);
        System.out.println("----degrees 90----");
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr[0].length;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }

        degree_90(arr);
        System.out.println("----degrees 180----");
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr[0].length;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }

        degree_90(arr);
        System.out.println("----degrees 270----");
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr[0].length;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
        degree_90(arr);
        System.out.println("----degrees 0----");
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr[0].length;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
    }
    static void degree_90(int arr[][])
    {
        //transpose
        for(int i=0;i<arr.length;i++)
        {
            for(int j=i;j<arr[0].length;j++)
            {
                int temp=arr[i][j];
                arr[i][j]=arr[j][i];
                arr[j][i]=temp;   
            }
        }
        //reverse
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr[0].length/2;j++)
            {
                arr[i][j]=arr[i][j]^arr[i][arr[0].length-j-1];
                arr[i][arr[0].length-j-1]=arr[i][j]^arr[i][arr[0].length-j-1];
                arr[i][j]=arr[i][j]^arr[i][arr[0].length-j-1];
            }
        }

    }
}
*/


//23.Sprial Matirx
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args) 
    {
        // int arr[][]=
        // {
        //     {1,2,3},
        //     {4,5,6},
        //     {7,8,9}
        // };
        int arr[][]=
        {
            {1,2,3,4},
            {5,6,7,8},
            {9,10,11,12}
        };
        List<Integer> temp = new ArrayList<Integer>();
        int row_s=0,row_e=arr.length-1,col_s=0,col_e=arr[0].length-1;
        while(row_s<=row_e&&col_s<=col_e)
        {
            for(int i=col_s;i<=col_e;i++)
            {
                temp.add(arr[row_s][i]);
            }
            row_s++;
            for(int i=row_s;i<=row_e;i++)
            {
                temp.add(arr[i][col_e]);
            }
            col_e--;
            if(row_s>row_e||col_s>col_e)
            {
                break;
            }
            for(int i=col_e;i>=col_s;i--)
            {
                temp.add(arr[row_e][i]);
            }
            row_e--;
            for(int i=row_e;i>=row_s;i--)
            {
                temp.add(arr[i][col_s]);
            }
            col_s++;
         }
         for(int i=0;i<temp.size();i++)
         {
            System.out.print(temp.get(i)+" ");
         }
    }
}
*/

//24.Number of sub arrays with sum k
/* 
public class Main 
{
    public static void main(String[] args) {
        int arr1[]={1,2,3,-3,1,1,1,4,2,-3},k1=3;
        System.out.println(brute(arr1, k1));//8

        int arr2[]={1,2,3,-3,1,1,1,4,2,-3},k2=3;
        System.out.println(Optimal(arr2, k2));//8
    }
    static int brute(int arr[],int k)
    {
        int ctr=0;
        for(int i=0;i<arr.length;i++)
        {
            int sum=0;
            for(int j=i;j<arr.length;j++)
            {
                sum+=arr[j];
                if(sum==k)
                {
                    ctr++;
                }
            }
        }
        return ctr;
    }
    static int Optimal(int arr[],int k)
    {
        int left=0,right=0,sum=0,ctr=0;
        while(left<arr.length)
        {
            sum=sum+arr[right];
            if(sum==k)
            {
                ctr++;
            }
            right++;
            if(right>=arr.length)
            {
                sum=0;
                left++;
                right=left;
            }
        }
        return ctr;
    }
}
*/

//25.Pascal's Triangleimport java.util.ArrayList;
/* 
import java.util.*;
public class Main
{
    public static void main(String[] args) 
    {
        int num1 = 5;     
        ArrayList<ArrayList<Integer>> arr1 = Pascal1(num1);
        for (int i = 0; i < num1; i++)
        {
            ArrayList<Integer> arr = arr1.get(i);
            for (int j = 0; j < arr.size(); j++) 
            {
                System.out.print(arr.get(j) + " ");
            }
            System.out.println();
        }
        Pascal2(num1);
    }

    static ArrayList<ArrayList<Integer>> Pascal1(int num) {
        ArrayList<ArrayList<Integer>> arr1 = new ArrayList<>();
        for (int i = 0; i < num; i++) {
            ArrayList<Integer> temp1 = new ArrayList<>();
            for (int j = 0; j <= i; j++) 
            { 
                if (j == 0 || j == i) {
                    temp1.add(1);
                } else {
                    ArrayList<Integer> temp2 = arr1.get(i - 1);
                    temp1.add(temp2.get(j - 1) + temp2.get(j));
                }
            }
            arr1.add(temp1);
        }
        return arr1;
    }
    static void Pascal2(int num)
    {
        for(int i=1;i<=num;i++)
        {
            int temp=1;
            for(int j=1;j<=i;j++)
            {
                System.out.print(temp+" ");
                temp = temp * (i-j)/j;
            }
            System.out.println();
        }
    }
}
*/

//26.Majority Elements II n/3 time
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args) {
        int arr1[]={1,1,1,3,3,2,2,2};
        System.out.println(Brute(arr1));//1

        int arr2[]={1,1,1,3,3,2,2,2};
        System.out.println(Brute(arr2));//1

    }
    static int Brute(int arr1[])
    {
        for(int i=0;i<arr1.length;i++)
        {
            int ctr=0;
            for(int j=0;j<arr1.length;j++)
            {
                if(arr1[i]==arr1[j])
                {
                    ctr++;
                }
            }
            if(ctr>arr1.length/3)
            {
                return arr1[i];
            }
        }
        return -1;
    }
    static int Better(int arr2[])
    {
        Map<Integer,Integer>temp=new HashMap<>();
        for(int i=0;i<arr2.length;i++)
        {
            int value=temp.getOrDefault(arr2[i],0);
            temp.put(arr2[i], value+1);
        }
        for( Map.Entry<Integer, Integer> i : temp.entrySet())
        {
           // System.out.println(i.getKey()+" "+i.getValue());
            if(i.getValue()>arr2.length/3)
            {
                return i.getKey();    
            }
        }
        return -1;
    }
}
*/
//27.3 sum
/*
import java.util.*;
public class Main 
{
    public static void main(String[] args) 
    {
        //1.Brute
        System.out.println("-----Brute-----");
        int arr1[]={-1,0,1,2,-1,-4};
        Brute(arr1);

        //2.Better
        //arr[i]+arr[j]+arr[k]=0
        //arr[i]+arr[j]=-arr[k];
        System.out.println("-----Better-----");
        int arr2[]={-1,0,1,2,-1,-4};
        Better(arr2);



    }
    static void Brute(int arr1[])
    {
        for(int i=0;i<arr1.length;i++)
        {
            for(int j=i+1;j<arr1.length;j++)
            {
                for(int k=j+1;k<arr1.length;k++)
                {
                    if((arr1[i]+arr1[j]+arr1[k])==0)
                    {
                        System.out.println(arr1[i]+" "+arr1[j]+" "+arr1[k]);
                    }
                }
            }
        }
        return;
    }
    //  res.add(Arrays.asList(nums[i], nums[j], nums[k]));
    static void Better(int arr2[])
    {
        ArrayList<Integer>temp1=new ArrayList<>();
        ArrayList<ArrayList<Integer>> temp2 = new ArrayList<>();

        for(int i=0;i<arr2.length;i++)
        {
            temp1.add(arr2[i]);
        }
        for(int i=0;i<arr2.length;i++)
        {
            for(int j=0;j<arr2.length;j++)
            {
                if(i!=j&&temp1.contains(-(arr2[i]+arr2[j])))
                {
                    System.out.println(arr2[i]+" "+arr2[j]+" "+ -(arr2[i]+arr2[j]));
                }
            }
        }
    }

}
*/
//28.Find the Duplicate Number  1 to n (287)
/* 
public class Main 
{
    public static void main(String[] args) {
        int arr[]={1,3,4,2,2};
        for(int i=0;i<arr.length;)
        {
            int index=arr[i]-1;
            if(arr[i]!=arr[index])
            {
                int temp=arr[i];
                arr[i]=arr[index];
                arr[index]=temp;
            }
            else
            {
                i++;
            }
        }
        for(int i=0;i<arr.length;i++)
        {
            if((i+1)!=arr[i])
            {
                System.out.println(arr[i]);//2
            }
        }
    }
}
*/

//30.2d binary search for target element
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr1[][]=
        {
            {1,3,5,7},
            {10,11,16,20},
            {23,30,34,60}
        };
        int temp1[]=Better(arr1, 3);
        System.out.println(temp1[0]+" "+temp1[1]); //0 1

        int temp2[]=Optimal(arr1, 3);
        System.out.println(temp2[0]+" "+temp2[1]); //0 1
    }
    static int[] Better(int arr1[][],int target1)
    {
        for(int i=0;i<arr1.length;i++)
        {
            int left=0,right=arr1[0].length-1;
            while (left<=right)
            {
                int mid=left+(right-left)/2;
                if(arr1[i][mid]>target1)
                {
                    right=mid-1;
                }   
                else if(arr1[i][mid]<target1)
                {
                    left=mid+1;
                }
                else
                {
                    return new int[]{i,mid};
                }
            }
        }
        return new int[]{-1,-1};
    }
    static int[] Optimal(int arr2[][],int target)
    {
        int n=arr2.length,m=arr2[0].length;
        int left=0,right=n*m-1;
        while (left<=right)
        {
            int mid=left+(right-left)/2;
            int row=mid/m,col=mid%m;
            if(arr2[row][col]>target)
            {
                right=mid-1;
            }
            else if(arr2[row][col]<target)   
            {
                left=mid+1;
            }
            else
            {
                return new int[]{row,col};
            }
        }
        return new int[]{-1,-1};
    }
}
*/

//31.pow(x,n)
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        double x=2.0;
        int n=10;    
        System.out.println(Optimal_Pow(x, n));//1024.0
    }
    static double Optimal_Pow(double x,int n)
    {
        double ans=1.0;
        long nn=n;
        if(nn<0){nn=-1*nn;}
        while(nn>0)
        {
            if(nn%2==1)
            {
                ans=ans*x;
                nn=nn-1;
            }
            else
            {
                x=x*x;
                nn=nn/2;
            }
        }
        if(n<0){ ans = (double)(1.0)/(double)(ans);}
        return ans;
    }

}
*/

//---------------------------------------------(2.Recursion)------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//1.Print Name N time
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        //--> Time Complexity :O(N)
        //--> Space Complextiy: O(N) becuse of stack space 
        int num1=5;
        Name(num1,0);
    }
    static void Name(int num,int i)
    {
        if(i>=num)
        {
            return;
        }
        System.out.println("Lokesh ");
        Name(num,i+1);// 4 3 2 1 0
    }
}
*/
//2.print 1 to n;
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int num1=4;    
        Print(num1, 1);
    }
    static void Print(int num,int i)
    {
        if(i>num)
        {
            return;
        }
        System.out.print(i+" ");
        Print(num, i+1);
    }
}
*/
//3.print n to 1;
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int num1=4;    
        Print(num1, 4); // 4 3 2 1
    }
    static void Print(int num,int i)
    {
        if(i==0)
        {
            return;
        }
        System.out.print(i+" ");
        Print(num, i-1);
    }
}
*/
//4.print for 1 to n in backtracking
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int num=5,i=5;    
        Print(num, i);//5 4 3 2 1 
    }
    static void Print(int num,int i)
    {
        if(i==0)
        {
            return;
        }
        System.out.print(i+" ");
        Print(num, i-1);
    }
}
*/

//5.print for n to 1 in backtracking
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int num=5,i=5;    
        Print(num, i);//1 2 3 4 5
    }
    static void Print(int num,int i)
    {
        if(i==0)
        {
            return;
        }
        Print(num, i-1);
        System.out.print(i+" ");
       // Print(num, i-1);
    }
}
*/

//6.sum of 1 to n
/* 
public class Main 
{
    public static void main(String[] args) {
        int num=5,i=1;
        System.out.println(SumOfN(num, i, 0));//15

        System.out.println(SumOfN(num));//15
    }
    static int SumOfN(int num,int i,int sum)
    {
        if(i>num)
        {
            return sum;
        }
        sum=sum+i;
        return SumOfN(num, i+1,sum);
    }
    static int SumOfN(int num)
    {
        if(num==0)
        {
            return num;
        }
        return num+SumOfN(num-1); 
    }
}
*/

//7.product of 1 to n
/* 
public class Main 
{
    public static void main(String[] args) {
        int num=5;
        System.out.println(SumOfN(num));//16
        System.out.println(ProductOfN(num));//120
    }
    static int SumOfN(int num)
    {
        if(num==0)
        {
            return 1;
        }
        return num+SumOfN(num-1); 
    }
    static int ProductOfN(int num)
    {
        if(num==0)
        {
            return 1;
        }
        return num*ProductOfN(num-1); 
    }
}
*/

//8.fibo series
/* 
public class Main 
{
    public static void main(String[] args) {
        int num=4;
        System.out.println(fib(num)); // 0 1 1 2 (4)
    }
    static int fib(int num)
    {
        if(num<=1)
        {
            return num;
        }
        return fib(num-1)+fib(num-2);
    }
}
*/

//9.reverse arr
/* 
public class Main 
{
    public static void main(String[] args) {
        int arr1[]={1,2,3,4,5};
        reverse(arr1, 0, arr1.length-1);
        for(int i=0;i<arr1.length;i++)
        {
            System.out.print(arr1[i]+" ");
        }
    }
    static void reverse(int arr[],int i,int j)
    {
        if(i>j)
        {
            return;
        }
        int temp=arr[i];
        arr[i]=arr[j];
        arr[j]=temp;
        reverse(arr, i+1, j-1);
    }
}
*/

//10.print all subsequences
//subsequences is a contigous/non-contigous sequenes,which follows the sum order
/*
     [3,1,2]
import java.util.*;
public class Main 
{
    public static void main(String[] args) {
        int nums[]={1,2,3};
        List<List<Integer>> temp=subsets(nums);
        for(int i=0;i<temp.size();i++)
        {
            List<Integer> temp2=temp.get(i);
            for(int j=0;j<temp2.size();j++)
            {
                System.out.print(temp2.get(j)+" ");
            }
            System.out.println();
        }
    }
    static List<List<Integer>> subsets(int[] nums) 
    {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(nums, 0, new ArrayList<>(), result);
        return result;
    }
    static void backtrack(int[] nums, int start, List<Integer> path, List<List<Integer>> result)
    {

        result.add(new ArrayList<>(path));
        for (int i = start; i < nums.length; i++)
        {
            path.add(nums[i]);
            backtrack(nums, i + 1, path, result);
            path.remove(path.size() - 1);
        }
    }
}
*/


//1.Binary Search
/* 
public class Main 
{
    public static void main(String[] args)
    {
        int arr[]={-1,0,3,5,9,12},target=9;
        System.out.println(BinarySearch1(arr, target));//4
        System.out.println(BinarySearch2(arr, target, 0, arr.length-1));//4
    }
    static int BinarySearch1(int arr[],int target)
    {
        int left=0,right=arr.length-1;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(arr[mid]>target)
            {
                right=mid-1;
            }
            else if(arr[mid]<target)
            {
                left=mid+1;
            }
            else
            {
                return mid;
            }
        }
        return -1;
    }
    static int BinarySearch2(int arr[],int target,int left,int right)
    {
        if(left>right)
        {
            return -1;
        }
        int mid=left+(right-left)/2;
        if(arr[mid]>target)
        {
            return BinarySearch2(arr, target,left, mid-1);
        }
        else if(arr[mid]<target)
        {
            return BinarySearch2(arr, target, mid+1, right);
        }
        else
        {
            return mid;
        }
    }
}
*/

//2. Find the target which is equal to target of number Floor and Ceil
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr[]={1,2,8,10,11,12,19},target=7;
        System.out.println(BinarySearchWithFloor(arr, target));//2
        System.out.println(BinarySearchWithCeil(arr, target));//8
    }
    static int BinarySearchWithFloor(int arr[],int target)
    {
        int left=0,right=arr.length-1,ans=-1;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(arr[mid]<=target)
            {
                ans=arr[mid];
                left=mid+1;
            }
            else if(arr[mid]>target)
            {
                right=mid-1;
            }
            else
            {
                return mid;
            }
        }
        return ans;
    }
    static int BinarySearchWithCeil(int arr[],int target)
    {
        int left=0,right=arr.length-1,ans=-1;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(arr[mid]>=target)
            {
                ans=arr[mid];
                right=mid-1;
                
            }
            else
            {
               left=mid+1;   
            }
        }
        return ans;
    }
}
*/
//3.Search Insert Position
/* 
public class java 
{
    public static void main(String[] args) 
    {
        int arr1[]={1,3,5,6},target=5;  
        System.out.println(FloorInsert(arr1, target));//2
    }
    static int FloorInsert(int arr1[],int target)
    {
        int left=0,right=arr1.length-1,ans=arr1.length;
        while (left<=right)
        {
            int mid=left+(right-left)/2;
            if(arr1[mid]<=target)
            {
                ans=mid;   
                  left=mid+1;
            }
            else 
            {
                right=mid-1;
            }
        }
        return left;
    }

}
*/
//4.Find First and Last Position of Element in Sorted Array
/* 
public class Main 
{
    public static void main(String[] args) {
        int arr1[]={5,7,7,8,8,10},target1=8;
        Brute(arr1, target1); // 3 4

        int arr2[]={5,7,7,8,8,10},target2=8;
        Better(arr2, target2); // 3 4

        int arr3[]={5,7,7,8,8,10},target3=8;
        Optimal(arr3, target3); // 3 4
    }
    static void Brute(int arr[],int target)
    {
        int firstIndex=-1,LastIndex=-1;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]==target && firstIndex==-1)
            {
                firstIndex=i;
            }
            if(arr[arr.length-i-1]==target && LastIndex==-1)
            {
                LastIndex=arr.length-i-1;
            }
        }
        System.out.println(firstIndex+" "+LastIndex);
        return;
    }
    static void Better(int arr[],int target)
    {
        int l=LowerBound(arr, target),u=UpperBound(arr, target);
        if(l==arr.length || arr[l]!=target)
        {
            System.out.println("Not Present target element in array");
            return;
        }
        System.out.println(LowerBound(arr, target)+" "+UpperBound(arr, target));
    }
    static int LowerBound(int arr[],int target)
    {
        int left=0,right=arr.length-1,ans=arr.length-1;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(arr[mid]>=target)
            {
                ans=mid;
                right=mid-1;
            }
            else
            {
                left=mid+1;
            }
        }
        return ans;
    }
    static int UpperBound(int arr[],int target)
    {
        int left=0,right=arr.length-1,ans=-1;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(arr[mid]>target)
            {
                ans=mid;
                right=mid-1;
            }
            else
            {
                
                left=mid+1;
            }
        }
        return ans;
    }
    static void Optimal(int arr[],int target)
    {
        //lower
        int l=Bound(arr, target, true);
        //upper
        int u=Bound(arr, target, false);
        if(l==arr.length || arr[l]!=target)
        {
            System.out.println("Not Present target element in array");
            return;
        }
        System.out.println(l+" "+u);

    }
    static int Bound(int arr[],int target,boolean Upper_Or_Lower)
    {
        int left=0,right=arr.length-1,ans=arr.length-1;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            //lower Bound
            if(Upper_Or_Lower)
            {
                if(arr[mid]>=target)
                {
                    ans=mid;
                    right=mid-1;
                }
                else
                {
                    left=mid+1;
                }
            }
            else
            {
                if(arr[mid]>target)
                {
                    right=mid-1;
                }
                else
                {
                    ans=mid;
                    left=mid+1;
                }
            }
        }
        return ans;
    }
}
*/

//5.Count occurrences of a number in a sorted array with duplicates
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr[]={1,1,2,2,2,2,3},target=2;   
        int l=Bound(arr, target, true);
        int r=Bound(arr, target, false);
        if(l==arr.length || arr[l]!=target)
        {
            System.out.println("0");
            return;
        }
        System.out.println(r-l+1); // 4
    }
    static int Bound(int arr[],int target,boolean L_or_U)
    {
        int left=0,right=arr.length-1,ans=arr.length-1;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(L_or_U)
            {
                //int temp=arr[i]>=target?right=mid-1:left=mid+1;(--ERROR---)
                if(arr[mid]>=target){ans=mid;right=mid-1;}
                else{left=mid+1;}
            }
            else
            {
                if(arr[mid]>target){right=mid-1;}
                else{ans=mid;left=mid+1;}   
            }
        }
        return ans;
    }
}
*/
//6.Search in Rotated Sorted Array (Unique element)
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr1[]={7,8,9,1,2,3,4,5,6},target1=1;
        System.out.println(Brute(arr1, target1)); // 3

        int arr2[]={7,8,9,1,2,3,4,5,6},target2=1;
        System.out.println(Better(arr2, target2)); //3

        int arr3[]={7,8,9,1,2,3,4,5,6},target3=1;
        System.out.println(Optimal(arr3, target3)); //3
    }
    static int Brute(int arr[],int target)
    {
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]==target)
            {
                return i;
            }
        }
        return-1;
    }
    static int Better(int arr[],int target)
    {
        for(int i=0;i<=arr.length/2;i++)
        {
            if(arr[i]==target)
            {
                return i;
            }
            if(arr[arr.length-i-1]==target)
            {
                return arr.length-i-1;
            }
        }
        return -1;
    }
    static int Optimal(int arr[],int target)
    {
        int left=0,right=arr.length-1;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(arr[mid]==target){return mid;}
            if(arr[left]<=arr[mid])
            {
                if(arr[left]<=target && target<=arr[mid])
                {
                    right=mid-1;
                }
                else
                {
                    left=mid+1;
                }
            }
            else
            {
                if(arr[mid]<=target && target<=arr[right])
                {
                    left=mid+1;
                }
                else
                {
                    right=mid-1;
                }
            }
        }
        return -1;
    }
}
*/

//7.Minimum in Rotated Sorted Array (Unique)
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr1[]={4,5,6,7,0,1,2};
        System.out.println(Brute(arr1, 999));

        int arr2[]={4,5,6,7,0,1,2};
        System.out.println(Optimal(arr2, 999));
    }
    static int Brute(int arr[],int min)
    {
        for(int i=0;i<=arr.length/2;i++)
        {
            if(arr[i]<min)
            {
                min=arr[i];
            }
            if(arr[arr.length-i-1]<min)
            {
                min=arr[arr.length-1-i];
            }
        }
        return min;
    }
    static int Optimal(int arr[],int min)
    {
        int left=0,right=arr.length-1;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(arr[left]<=arr[mid])
            {
                min=Math.min(min, arr[left]);
                left=mid+1;
            }
            else
            {
                right=mid-1;
                min=Math.min(min, arr[mid]);
            }
        }
        return min;
    }
}
*/
//8. Find out how many times array has been rotated
/* 
public class Main 
{
    public static void main(String[] args) {
        int arr1[]={3,4,5,1,2};
        System.out.println(Optimal(arr1, 9999));//3
    }
    static int Optimal(int arr1[],int min)
    {
        int left=0,right=arr1.length-1,index=-1;
        int ans=Integer.MAX_VALUE;
        while(left<=right)
        {
            int mid=left+(right-left)/2;//1+2
            if(arr1[left]<=arr1[right])
            {
                if(arr1[left]<ans)
                {
                    index=left;
                    ans=arr1[left];
                }
                break;
            }
            if(arr1[left]<=arr1[mid])
            {
                if(arr1[left]<=arr1[mid])
                {
                    index=left;
                    ans=arr1[left];
                }
                left=mid+1;
            }
            else
            {
                right=mid-1;
                if(arr1[mid]<ans)
                {
                    index=mid;
                    ans=arr1[mid];
                }
            }
        }
        return index;
    }
}
*/
//9.Single Element in a Sorted Array
/* 
public class Main 
{
    public static void main(String[] args) {
        int arr1[]={1,1,2,2,3,3,4,5,5,6,6};
        System.out.println(Brute(arr1, 0));//4

        int arr2[]={1,1,2,2,3,3,4,5,5,6,6};
        System.out.println(Better(arr2));//4


        
        int arr3[]={1,1,2,2,3,3,4,5,5,6,6};
        System.out.println(Better(arr3));//4/
    }
    static int Brute(int arr[],int ans)
    {
        for(int i=0;i<arr.length;i++)
        {
            ans=ans^arr[i];
        }
        return ans;
    }
    static int Better(int arr[])
    {
        for(int i=0;i<arr.length;i++)
        {
            if(i==0&&arr[i]!=arr[i+1])
            {
                return arr[i];
            }
            else if(i==arr.length-1 &&arr[i]!=arr[i-1])
            {
                return arr[i];
            }
            else if(i!=0&&i!=arr.length-1)
            {
                if(arr[i]!=arr[i-1] &&arr[i]!=arr[i+1])
                {
                    return arr[i];
                }
            }
        }
        return -1;
    }
    static int Optimal(int arr[])
    {
        //0 1 2 3 4 5 6 7 8 9 10
        //1,1,2,2,3,3,4,5,5,6,6;
        int len=arr.length;
        if(len==1){return arr[0];}
        if(arr[0]!=arr[1]){return arr[0];}
        if(arr[len-1]!=arr[len-2]){return arr[len-1];}
        int left=0,right=arr.length-1;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if( arr[mid]!=arr[mid+1] && arr[mid]!=arr[mid-1])
            {
                return arr[mid];
            }
            if(mid%2==1&&arr[mid]==arr[mid-1] || mid%2==0 && arr[mid]==arr[mid+1])
            {
                left=mid+1;
            }
            else
            {
                right=mid-1;
            }
        }
        return -1;
    }
}
*/
//10.find peek element
/* 
public class Main 
{
    public static void main(String[] args) {
        int arr1[]={1,2,3,4,5,6,7,8,5,1};
        System.out.println(Brute(arr1));//7

        int arr2[]={1,2,3,4,5,6,7,8,5,1};
        System.out.println(Brute(arr2));
    }
    static int Brute(int arr1[])
    {
        for(int i=1;i<arr1.length-1;i++)
        {
            if( arr1[i-1]<arr1[i] && arr1[i] > arr1[i+1])
            {
                return i;
            }
        }
        return -1;
    }
    static int Optimal(int arr1[])
    {
        int left=0,right=arr1.length-1;
        while (left<right)
        {    
            int mid=left+(right-left)/2;
            if(arr1[mid]>arr1[mid+1])
            {
                right=mid;
            }
            else
            {
                left=mid+1;
            }
        }
        return left;
    }
}
*/

//11.find SQRT of an integer return Floor(sqrt(number))
/* 
public class Main 
{
    public static void main(String[] args) {
        int number1=28;
        System.out.println(Brute1(number1));//5
        System.out.println(Brute2(number1));//5

        System.out.println(Optimal(number1));//5
    }
    static int Brute1(int num)
    {
        for(int i=1;i<=num;i++)
        {
            if(i*i>num)
            {
                return i-1;
            }
        }
        return -1;
    }
    static int Brute2(int num)
    {
        int ans=0;
        for(int i=1;i<=num;i++)
        {
            if((i*i)<=num)
            {
                ans=i;
            }
            else
            {
                break;
            }
        }
        return ans;
    }
    static int Optimal(int num)
    {
        int left=1,right=num,ans=0;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if((mid*mid)<=num)
            {
                ans=mid;
                left=mid+1;
            }
            else
            {
                right=mid-1;
            }
        }
        return ans;
    }
}
*/

//12.Koko eating Bananas
// Ceil
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args) 
    {
        int piles1[]={3,6,7,11},hours1=8;
        System.out.println(Better(piles1, hours1));// 4

        int piles2[]={3,6,7,11},hours2=8;
        System.out.println(Optimal(piles2, hours2));//4
    }
    static int Better(int piles[],int hours)
    {
        int max=0;
        for(int i=0;i<piles.length;i++)
        {
            if(piles[i]>max)
            {
                max=piles[i];
            }
        }
        for(int i=1;i<=max;i++)
        {
            int ctr=0;
            for(int j=0;j<piles.length;j++)
            {
                ctr+=(int)Math.ceil( (double)(piles[j])/(double)(i) );
            }
            if(ctr==hours)
            {
                return i;
            }
        }
        return -1;
    }
    static int Optimal(int piles[],int hours)
    {
        int left=0,right=max(piles,0);
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            int temp=calculate(piles, mid);
            if(temp<=hours)
            {
                right=mid-1;
            }
            else if(temp>hours)
            {
                left=mid+1;
            }
        }
        return left;
    }
    static int max(int arr[],int max)
    {
        for(int i=0;i<arr.length;i++)
        {
            if(max<arr[i])
            {
                max=arr[i];
            }
        }
        return max;
    }
    static int calculate(int arr[],int hours)
    {
        int ctr=0;
        for(int i=0;i<arr.length;i++)
        {
            ctr+=(int)Math.ceil( (double)(arr[i])/(double)(hours) );
        }
        return ctr;
    }
}
*/
//12. Minimum Number of Days to Make m Bouquets
// bloomdays,m-is no.of Bouquets required,k-adjacent flowers required
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int bloomdays1[]={7,7,7,7,13,11,12,7};    
    }
    static int Brute(int bloomdays2[])
    {
        int min=min(bloomdays2, 99999),max=max(bloomdays2, 0);
        while(min<=max)
        {
            int ctr=0;
        }
    }
    static int max(int arr[],int max)
    {
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]>max)
            {
                max=arr[i];
            }
        }
        return max;
    }
    static int min(int arr[],int min)
    {
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]<min)
            {
                min=arr[i];
            }
        }
        return min;
    }
}

class Solution {
    public int minDays(int[] bloomDay, int m, int k) 
    {   
        max_min(bloomDay);
        long temp=(long)(m*k);
        if(temp>=bloomDay.length)
        {
            return -1;
        }
        int left=min,right=max;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(FormBouqutes(bloomDay,mid,m,k))
            {
                right=mid-1;
            }
            else 
            {
                left=mid+1;
            }
        } 
        return left;
    }
    static int min=Integer.MAX_VALUE,max=Integer.MIN_VALUE;
    static void max_min(int arr[])
    {
        for(int i:arr)
        {
            if(max<i)
            {
                max=i;
            }
            if(min>i)
            {
                min=i;
            }
        }
        return;
    }
    static Boolean FormBouqutes(int arr[],int day,int m,int k)
    {
        int ctr=0,no_of_bouqutes=0;
        for(int i:arr)
        {
            if(i<=day)
            {
                ctr++;
            }
            else
            {
                no_of_bouqutes+=(ctr/k);
                ctr=0;   
            }
        }
        no_of_bouqutes+=(ctr/k);
        return no_of_bouqutes>=m;
    }
}
*/

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//----------------------------------1.Basic Maths Concept-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------



//1.Count Digits
/* 
public class Main 
{
    public static void main(String[] args) {
        int num=-123,ctr=0;
        while(num!=0)
        {
            ctr++;
            num/=10;
        }
        System.out.println(ctr);//3
    }
}
*/


//2.Reverse Number
/* 
public class Main 
{
    public static void main(String[] args) {
        int num=-123,result=0;
        while(num!=0)
        {
            result=result*10+num%10;
            num/=10;
        }
        System.out.println(result);//-321
    }
}
*/

//3.Check Palindrome
/*
public class Main 
{
    public static void main(String[] args) 
    {
        int number1=121,number2=number1;
        int reverseNumber=0;
        while (number1>0)
        {    
            reverseNumber=reverseNumber*10+number1%10;
            number1/=10;
        }    
        System.out.println(reverseNumber==number2); //true
        String str="121";
        int start=0,end=str.length()-1;
        while(start<=end)
        {
            if(str.charAt(start++)!=str.charAt(end--))
            {
                System.out.println(false);
                return;
            }
        }
        System.out.println(true);//true
        return;
    }
}
*/

//4.Armstrong Number
/*
public class Main 
{
    public static void main(String[] args) 
    {
        int number1=1634,number2=number1,lengthOfNumber=(int)(Math.log10(number1))+1;
        System.out.println(lengthOfNumber);//3
        int result=0;
        while(number1>0)
        {
            result+=(int)(Math.pow(number1%10,lengthOfNumber));
            number1=number1/10;
        }
        System.out.println(result);
        System.out.println(number2==result);
    }
}
*/

//5.print all divisors
/*
public class Main 
{
    public static void main(String[] args) 
    {
        int number=36;
        for(int i=1;i<=36;i++)
        {
            if(number%i==0)
            {
                System.out.print(i+" ");
            }
        }    
        System.out.println();
        // 1x36=36
        // 2x18=26
        // 3x12=36
        // 4x9=36
        // 6x6=36
        //--------
        // 9x4=36
        // 12x3=36
        // 18x2=36
        // 36x1=36
        for(int i=1;i<=Math.sqrt(number);i++)
        {
            if(number%i==0)
            {
                System.out.print(i+" ");
                if((number/i)!=i)// 36/6=6
                {
                    System.out.print(number/i+" ");
                }
            }
        }
    }
}
*/

//6.prime number check excatly 2 factors 1&itself
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int num=3;
        if(num<=1)
        {
            System.out.println("Not a Prime Number");
            return;
        }
        for(int i=2;i*i<=num;i++)
        {
            if(num%i==0)
            {
                System.out.println("Not a Prime Number");
                return;
            }
        }
        System.out.println("Prime Number");
    }
}
*/

//7.GCD/HCF--Greater Common division/Highest common factor
/* 
public class Main 
{
    public static void main(String[] args) 
    {  
        int num1=20,num2=40;
        for(int i=Math.min(num1, num2);i>=1;i--)
        {
            if(num1%i==0 &&num2%i==0)
            {
                System.out.println(i);
                break;
            }
        }  
        //------------------euclidean algorithm------------------
        //gcd(max(a,b),min(a,b))=gcd(max(a,b)-min(a,b),min(a,b))
        int num3=20,num4=40;
        while( num3>0 && num4>0)
        {
            if( num3>num4 )
            {
                num3=num3%num4;
            }
            else
            {
                num4=num4%num3;
            }
        }
        if(num3==0)
        {
            System.out.println(num4);
        }
        else
        {
            System.out.println(num3);
        }
    }
}
*/
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//----------------------------------2.Basic Pattern printing-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//1.
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int number=4;
        number=number*2;
        for(int i=0;i<=number;i++)
        {
            for(int j=0;j<=number;j++)
            {
                int temp=Math.min( Math.min(i,j),Math.min(number-i,number-j));
                System.out.print(temp+" ");
            }
            System.out.println();
        }    
    }   
}
*/
// 0 0 0 0 0 0 0 0 0 
// 0 1 1 1 1 1 1 1 0
// 0 1 2 2 2 2 2 1 0
// 0 1 2 3 3 3 2 1 0
// 0 1 2 3 4 3 2 1 0
// 0 1 2 3 3 3 2 1 0
// 0 1 2 2 2 2 2 1 0
// 0 1 1 1 1 1 1 1 0
// 0 0 0 0 0 0 0 0 0

//2.
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int number1=4;
        int number2=number1*2;
        for(int i=0;i<=number2;i++)
        {
            for(int j=0;j<=number2;j++)
            {
                int temp=number1-Math.min( Math.min(i,j),Math.min(number2-i,number2-j));
                System.out.print(temp+" ");
            }
            System.out.println();
        }    
    }   
}
4 3 3 3 3 3 3 3 4
4 3 2 2 2 2 2 3 4
4 3 2 1 1 1 2 3 4
4 3 2 1 0 1 2 3 4
4 3 2 1 1 1 2 3 4
4 3 2 2 2 2 2 3 4
4 3 3 3 3 3 3 3 4
4 4 4 4 4 4 4 4 4
*/

//3.
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int number1=4;
        int number2=number1*2;
        for(int i=0;i<=number2;i++)
        {
            for(int j=0;j<=number2;j++)
            {
                int temp=Math.min( Math.min(i,j),Math.min(number2-i,number2-j));
                System.out.print(temp%2==0?"X ":"0 ");
            }
            System.out.println();
        }    
    }   
}
X 0 0 0 0 0 0 0 X
X 0 X X X X X 0 X
X 0 X 0 0 0 X 0 X
X 0 X 0 X 0 X 0 X
X 0 X 0 0 0 X 0 X
X 0 X X X X X 0 X 
X 0 0 0 0 0 0 0 X
X X X X X X X X X
*/

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//----------------------------------3.Recursion----------------------------------------------------------------------------------------------------------------------------------------------------------------------------


//1.Print Name N Times
//Time Complexity:O(N)
//Space Complexity:O(N)
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        Name(5);   
    }
    static void Name(int num)
    {
        if(num==0)
        {
            return;
        }
        System.out.print("Lokesh-"+num+" ");
        Name(num-1);
    }
}
//    Lokesh-5 Lokesh-4 Lokesh-3 Lokesh-2 Lokesh-1 
*/

//2.print 1 to N
/* 
public class Main 
{
    public static void main(String[] args)
    {
        int num=5;
        function(num, 1);
    }
    static void function(int num,int i)
    {
        if(i>num)
        {
            return;
        }
        System.out.print(i+" ");
        function(num, i+1);
    }
}
//1 2 3 4 5  
*/

//3.print N to 1
/* 
public class Main 
{
    public static void main(String[] args) {
        int num=5;
        function(num);
    }
    static void function(int i)
    {
        if(i==0)
        {
            return;
        }
        System.out.print(i+" ");
        function(i-1);
    }
}
*/
//4.print 1 to N and N to 1 in recursion
/*
public class Main 
{
    public static void main(String[] args)
    {
        int num=5;
        function(num);
    }
    static void function(int num)
    {
        if(num==0)
        {
            return;
        }
        System.out.print(num+" "); // 5 4 3 2 1
        function(num-1);
        System.out.print(num+" ");//1 2 3 4 5
    }
}
*/

//5.String reverse
/* 
public class Main 
{
    public static void main(String[] args) {
        String str[]={"one","Two","Three"};
        function(str, 0);
    }
    static void function(String str[],int i)
    {
        if(i>=str.length)
        {
            return;
        }
        function(str, i+1);
        System.out.println(str[i]+" ");
    }
}
*/

//6.sum of first N number
/* 
public class Main 
{
    public static void main(String[] args) 
    { 
        int num=5;
        System.out.println(function1(num, 0));
        System.out.println(function2(num, 0));
    }

    static int function1(int num,int sum)
    {
        if(num==0)
        {
            return sum;
        }
        sum+=num;   // 1+2+3+4+5=15
        return function1(num-1,sum); 
    }
    static int function2(int num,int sum)
    {
        if(num==0)
        {
            return 0;
        }
        sum+=num;   // 1+2+3+4+5=15
        return num+function2(num-1,sum); 
    }
}
*/

//7.factorial of N
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int num=5;
        System.out.println(function1(num)); //120
    }
    static int  function1(int num)
    {
        if(num==0)
        {
            return 1;
        }
        return num*function1(num-1); 
    }
}
*/

//8.reverse given array
/* 
public class Main 
{
    public static void main(String[] args)
    {
        int arr[]={1,2,3,4,5};
        function(arr, 0, arr.length-1);
        for(int i:arr)
        {
            System.out.print(i+" ");
        }
    }
    static void function(int arr[],int left,int right)
    {
        if(left>=right)
        {
            return;
        }
        arr[left]=arr[left]^arr[right];
        arr[right]=arr[left]^arr[right];
        arr[left]=arr[left]^arr[right];
        function(arr, left+1, right-1);
    }
}
*/
//9. given string is parlindrome
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        char str[]={'m','a','D','a','m'};   
        System.out.println(fun(str, 0, str.length-1));//true
    }
    static boolean fun(char str[],int left,int right)
    {
        if(left>=right)
        {
            return true;
        }
        if(str[left]!=str[right])
        {
            return false;
        }
        return fun(str, left+1, right-1);
    }
}
*/

//10.fibonacci number 
/* 
public class Main 
{
    public static void main(String[] args) {
        int num=3;
        System.out.println(fun(num)); // 0 1 1 2 3 5 8
    }
    static int fun(int num)
    {
        if(num<=1)
        {
            return num;
        }
        return fun(num-1)+fun(num-2);
    }
}
*/


//11.print all subsequences
//subsequences a contigous /non-contigous sequencens,which follows the order

/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args)
    {
        int arr[]={3,1,2};
        List<List<Integer>> temp1=subsets(arr);

                             []
                        /    |    \
                    [3]     [1]   [2]
                    / \      |
                [3,1] [3,2] [1,2]
                /
            [3,1,2]

        for(int i=0;i<temp1.size();i++)
        {
            List<Integer> temp2=temp1.get(i);
            for(int j=0;j<temp2.size();j++)
            {
                System.out.print(temp2.get(j)+" ");
            }
            System.out.println();
        }

    }
    static List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(nums, 0, new ArrayList<>(), result);
        return result;
    }
    
    static void backtrack(int[] nums, int start, List<Integer> path, List<List<Integer>> result) 
    {
        result.add(new ArrayList<>(path));
        for (int i = start; i < nums.length; i++) {
            path.add(nums[i]);
            backtrack(nums, i + 1, path, result);
            path.remove(path.size() - 1);
        }
    }
}
*/

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//---------------------------------------4.sorting------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


//1.bubble sort
//  Time Complexity : O(N^2)
//  Space Complexit : O(1)
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr[]={12,23,4,12,123,1};
        BubbleSort(arr);
        for(int i:arr)
        {
            System.out.print(i+" ");
        }    
    }
    static void BubbleSort(int arr[])
    {
        for(int i=0;i<arr.length-1;i++)
        {
            for(int j=0;j<arr.length-1-i;j++)
            {
                if(arr[j]>arr[j+1])
                {
                    arr[j]=arr[j]^arr[j+1];
                    arr[j+1]=arr[j]^arr[j+1];
                    arr[j]=arr[j]^arr[j+1];
                }
            }
        }
    }
}
*/

//2.selection sort
//  Time Complexity  : O(N^2)
//  Space Complexity : O(1)
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr[]={1,2,34,121,1,11,234,1};
        SelectionSort(arr);
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
    static void SelectionSort(int arr[])
    {
        int len=arr.length;
        for(int i=0;i<len-1;i++)
        {
            int min=i;
            for(int j=i+1;j<len;j++)
            {
                if(arr[j]<arr[min])
                {
                    min=j;
                }
            }
            arr[i]=arr[i]^arr[min];
            arr[min]=arr[i]^arr[min];
            arr[i]=arr[i]^arr[min];
        }
        return;
    }
}
*/

//3.Insertion Sort
//  Time Complexity  : O(N^2)
//  Space Complexity : O(1)
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr[]={23,345,1,1,345,234,1};  
        Insertion_Sort(arr);
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");
        } 
    }
    static void Insertion_Sort(int arr[])
    {
        for(int i=0;i<arr.length-1;i++)
        {
            for(int j=i+1;j>0;j--)
            {
                if(arr[j]<arr[j-1])
                {
                    arr[j]=arr[j]^arr[j-1];
                    arr[j-1]=arr[j]^arr[j-1];
                    arr[j]=arr[j]^arr[j-1];
                }
                else
                {
                    break;
                }
            }
        }
    }
}
*/

//4.
/* 
import java.util.*;

public class Main {
    public static void main(String[] args) {
        int arr[] = {9, 4, 7, 6, 3, 1, 5, -1,-2,-2};
        int n = arr.length; // n should be equal to the length of the array
        mergeSort(arr, 0, n - 1);
        for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
    }

    static void merge(int[] arr, int low, int mid, int high) {
        ArrayList<Integer> temp = new ArrayList<>(); // temporary array
        int left = low; // starting index of left half of arr
        int right = mid + 1; // starting index of right half of arr

        // Storing elements in the temporary array in a sorted manner
        while (left <= mid && right <= high) {
            if (arr[left] <= arr[right]) {
                temp.add(arr[left]);
                left++;
            } else {
                temp.add(arr[right]);
                right++;
            }
        }

        // If elements on the left half are still left
        while (left <= mid) {
            temp.add(arr[left]);
            left++;
        }

        // If elements on the right half are still left
        while (right <= high) {
            temp.add(arr[right]);
            right++;
        }

        // Transferring all elements from temporary to arr
        for (int i = low; i <= high; i++) {
            arr[i] = temp.get(i - low);
        }
    }

    static void mergeSort(int[] arr, int low, int high) {
        if (low >= high) return;
        int mid = (low + high) / 2;
        mergeSort(arr, low, mid); // left half
        mergeSort(arr, mid + 1, high); // right half
        merge(arr, low, mid, high); // merging sorted halves
    }
}
*/


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//----------------------------------5.Array------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//1.Largest Element in an Array
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args) 
    {
        int arr1[]={3,2,1,5,2}; 
        System.out.println(Brute(arr1));//5
        System.out.println(Optimal(arr1, 0));//5
    }
    static int Brute(int arr1[])
    {
        Arrays.sort(arr1);
        return arr1[arr1.length-1];
    }
    static int Optimal(int arr1[],int max)
    {
        for(int i=0;i<arr1.length;i++)
        {
            if(max<arr1[i])
            {
                max=arr1[i];
            }
        }
        return max;
    }
}
*/

//2.Second Largest Element in an Array
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args) 
    {  
        //1.Brute
        int arr1[]={1,32,12,11,1123};
        System.out.println(Brute(arr1)); //32

        //2.Better
        int arr2[]={1,32,12,11,1123};
        System.out.println(Better(arr2)); //32

        //3.Optimal
        int arr3[]={1,32,12,11,1123};
        System.out.println(Optimal_max(arr3)); //32
        System.out.println(Optimal_min(arr3)); //11
    }
    static int Brute(int arr[])
    {
        Arrays.sort(arr); //merge sort
        int max=arr[arr.length-1];
        for(int i=arr.length-2;i>=0;i--)
        {
            if(max!=arr[i])
            {
                return arr[i];
            }
        }
        return -1;
    }
    static int Better(int arr[])
    {
        ArrayList<Integer>temp=new ArrayList<>();
        for(int i=0;i<arr.length;i++)
        {
            if(!temp.contains(arr[i]))
            {
                temp.add(arr[i]);
            }
        }
        Collections.sort(temp);
        return temp.get(temp.size()-2);
    }
    static int Optimal_max(int arr[])
    {
        int firstLongest=arr[0],secondLongest=Integer.MIN_VALUE;
        for(int i=0;i<arr.length;i++)
        {
            if(firstLongest<arr[i])
            {
                secondLongest=firstLongest;
                firstLongest=arr[i];
            }
            else if(arr[i]<firstLongest && arr[i]>secondLongest)
            {
                secondLongest = arr[i];
            }

        }
        return secondLongest;
    } 
    static int Optimal_min(int arr[])
    {
        int firstSmallest=arr[0],secondSmallest=Integer.MAX_VALUE;
        for(int i=0;i<arr.length;i++)
        {
            if(firstSmallest>arr[i])
            {
                secondSmallest=firstSmallest;
                firstSmallest=arr[i];
            }
            else if(arr[i]!=firstSmallest && arr[i]<secondSmallest)
            {
                secondSmallest = arr[i];
            }

        }
        return secondSmallest;
    } 
}
*/

//3.Check if Array is Sorted and Rotated
/* 
public class Main 
{
    public static void main(String[] args) {
        int arr[]={3,4,5,1,2},ctr=0;
        for(int i=0;i<arr.length-1;i++)
        {
            if(arr[i]>arr[i+1])
            {
                ctr++;
            }
        }
        if(arr[0]<arr[arr.length-1])
        {
            ctr++;
        }
        System.out.println( ctr<=1 ?" Array is Sorted ":"Array is Unsorted");  //Array is Sorted
    }
}
*/

//4.Array is Sorted or Not
/* 
public class Main 
{
    public static void main(String[] args) {
        int arr[]={1,2,3,1,2};
        for(int i=0;i<arr.length-1;i++)
        {
            if(arr[i]>arr[i+1])
            {
                System.out.println("Array is Unsorted");
                return;
            }
        }
        System.out.println("Array is Sorted");
        return;
    }
}
*/

//5.Remove duplicates from Sorted Array 
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args)
    {
        //1.Brute
        int arr1[]={1,1,2,2,2,3,3};
        ArrayList<Integer> temp1=Brute(arr1);
        for(Integer i:temp1)
        {
            System.out.print(i+" "); // 1 2 3
        }

        System.out.println();

        //2.optimal
        int arr2[]={1,1,2,2,2,3,3};
        int j=Optimal(arr2);
        for(int i=0;i<j;i++)
        {
            System.out.print(arr2[i]+" ");// 1 2 3
        }
    }
    static ArrayList<Integer> Brute(int arr1[])
    {
        ArrayList<Integer>temp=new ArrayList<>();
        for(int i:arr1)
        {
            if(!temp.contains(i))
            {
                temp.add(i);
            }
        }
        return temp;
    }
    static int Optimal(int arr2[])
    {
        int left=0;
        for(int i=0;i<arr2.length-1;i++)
        {
            if(arr2[i]!=arr2[i+1])
            {
                arr2[left++]=arr2[i];
            }
        }
        arr2[left++]=arr2[arr2.length-1];
        return left;
    }
}
*/

//6.Left Rotate an array by one place
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr1[]={1,2,3,4,5};
        int temp=arr1[0];
        int len=arr1.length;
        for(int i=1;i<len;i++)
        {
            arr1[i-1]=arr1[i];
        }   
        arr1[len-1]=temp;
        for(int i:arr1)
        {
            System.out.print(i+" "); // 2 3 4 5 1
        }
    }
}
*/

//7.Rotate Array By K places
/* 
public class Main 
{
    public static void main(String[] args) {
        int arr1[]={1,2,3,4,5,7,8,9},k1=3;
        System.out.println("----Brute-----");
        Brute(arr1, k1);
        for(int i:arr1)
        {
            System.out.print(i+" ");
        }
        System.out.println();
        System.out.println("----Optimal-----");
        int arr2[]={1,2,3,4,5,7,8,9},k2=3;
        Optimal(arr2, k2);
        for(int i:arr2)
        {
            System.out.print(i+" ");
        }
    }
    static void Brute(int arr1[],int k1)
    {
        int len=arr1.length;
        if(k1>=len)
        {k1=k1%len;}
        int temp[]=new int[k1];
        for(int i=0;i<k1;i++)
        {
            temp[i]=arr1[i];
        }
        for(int i=k1;i<len;i++)
        {
            arr1[i-k1]=arr1[i];
        }
        for(int i=len-k1;i<len;i++)
        {
            arr1[i]=temp[i-(len-k1)];
        }
        return;
    }
    static void Optimal(int arr[],int k)
    {
        int len=arr.length;
        if(k>=len)
        {
            k=k%len;
        }
        // 3 2 1 4 5 6 7 8 9
        reverse(arr, 0, k-1);
        //3 2 1 9 8 7 6 5 4
        reverse(arr, k, len-1);
        //4 5 6 7 8 9 1 2 3
        reverse(arr, 0, len-1);
    }
    static void reverse(int arr[],int left,int right)
    {
        while(left<=right)
        {
            int temp=arr[left];
            arr[left]=arr[right];
            arr[right]=temp;
            left++;
            right--;
        }
    }
}
*/

//8.Move Zeros to End
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args) 
    {
        int arr1[]={1,0,2,3,2,0,0,4,5,1};   
        Brute(arr1); 
        for(int i:arr1)
        {
            System.out.print(i+" "); //1 2 3 2 4 5 1 0 0 0 
        }

        System.out.println();

        int arr2[]={1,0,2,3,2,0,0,4,5,1};   
        Better(arr2);
        for(int i:arr2)
        {
            System.out.print(i+" "); //1 2 3 2 4 5 1 0 0 0 
        }

        System.out.println();

        int arr3[]={1,0,2,3,2,0,0,4,5,1};   
        Optimal(arr3);
        for(int i:arr3)
        {
            System.out.print(i+" "); //1 2 3 2 4 5 1 0 0 0 
        }

    }
    static void Brute(int arr1[])
    {
        ArrayList<Integer> temp=new ArrayList<>();
        int i;
        for(i=0;i<arr1.length;i++)
        {
            if(arr1[i]!=0)
            {
                temp.add(arr1[i]);
            }
        }
        for(i=0;i<temp.size();i++)
        {
            arr1[i]=temp.get(i);
        }
        for(i=temp.size();i<arr1.length;i++)
        {
            arr1[i]=0;
        }
        return;
    }
    static void Better(int arr[])
    {
        int i,j=0;
        for(i=0;i<arr.length;i++)
        {
            if(arr[i]!=0)
            {
                arr[j++]=arr[i];
            }
        }
        while(j<arr.length)
        {
            arr[j++]=0;
        }
        return;
    }
    static void Optimal(int arr[])
    {
        int i,j=0;
        for(i=0;i<arr.length;i++)
        {
            if(arr[i]==0)
            {
                j=i;
                break;
            }
        }
        //1,0,2,3,2,0,0,4,5,1
        //  j i
        //1,2,0,3,2,0,0,4,5,1
        //    j i
        //1,2,3,0,2,0,0,4,5,1
        //      j i
        //1,2,3,2,0,0,0,4,5,1
        //        j i
        //1,2,3,2,0,0,0,4,5,1
        //        j     i
        //1,2,3,2,4,0,0,0,5,1
        //          j     i
        //1,2,3,2,4,5,0,0,0,1
        //            j     i
        //1,2,3,2,4,5,1,0,0,0
        for(i=j+1;i<arr.length;i++)
        {
            if(arr[i]!=0)
            {
                int temp=arr[i];
                arr[i]=arr[j];
                arr[j]=temp;
                j++;
            }
        }
    }
}
*/

//9.Linear Search
/* 

public class Main 
{
    public static void main(String[] args) {
        int arr[]={1,2,3,2,3,1,5,3},target=3;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]==target)
            {
                System.out.println(i);
                return;
            }
        }
        System.out.println(-1);
        return;
    }
} // 2

*/

//10.Union of Sorted arrays
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args) {

        System.out.println("-------Brute-------");
        int arr1[]={1,1,2,3,4,5},arr2[]={2,3,4,4,5,6};
        ArrayList<Integer>temp1=Brute(arr1, arr2);
        for(Integer i:temp1)
        {
            System.out.print(i+" "); // 1 2 3 4 5 6
        }

        System.out.println();

        System.out.println("------Optimal------");
        int arr3[]={1,1,2,3,4,5},arr4[]={2,3,4,4,5,6};
        ArrayList<Integer>temp2=Optimal(arr3, arr4);
        for(Integer i:temp2)
        {
            System.out.print(i+" "); // 1 2 3 4 5 6
        }
        System.out.println();

    }
    static  ArrayList<Integer> Brute(int arr1[],int arr2[])
    {
        ArrayList<Integer>temp=new ArrayList<>();
        for(int i:arr1)
        {
            if(!temp.contains(i))
            {
                temp.add(i);
            }
        }
        for(int i:arr2)
        {
            if(!temp.contains(i))
            {
                temp.add(i);
            }
        }
        Collections.sort(temp);
        return temp;
    }
    static ArrayList<Integer> Optimal(int arr1[],int arr2[])
    {
        ArrayList<Integer>temp=new ArrayList<>();
        int left=RemoveDuplicate(arr1);
        int right=RemoveDuplicate(arr2);
        int i=0,j=0;
        while( i<left && j<right)
        {
            if(arr1[i]<arr2[j])
            {
                temp.add(arr1[i++]);
            }
            else if(arr1[i]>arr2[j])
            {
                temp.add(arr2[j++]);
            }
            else
            {
                temp.add(arr1[i]);
                i++;
                j++;
            }
        }
        while(i<left)
        {
            temp.add(arr1[i++]);
        }
        while(j<right)
        {
            temp.add(arr2[j++]);
        }
        return temp;
    }
    static int RemoveDuplicate(int arr[])
    {
        int i,j=0;
        for(i=0;i<arr.length-1;i++)
        {
            if(arr[i]!=arr[i+1])
            {
                arr[j++]=arr[i];
            }
        }
        arr[j++]=arr[arr.length-1];
        return j;
    }
}
*/

//11.intersection of two sorted array
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args) 
    {    
        System.out.println("----Brute-----");
        int arr1[]={1,2,2,3,3,4,5,6};
        int arr2[]={2,3,3,5,6,6,7};
        ArrayList<Integer>temp1=Brute(arr1, arr2);
        for(int i:temp1)
        {
            System.out.print(i+" "); // 2 3 5 6
        }


        System.out.println();


        System.out.println("-----Optimal-----");
        int arr3[]={1,2,2,3,3,4,5,6};
        int arr4[]={2,3,3,5,6,6,7};
        ArrayList<Integer>temp2=Optimal(arr3, arr4);
        for(int i:temp2)
        {
            System.out.print(i+" "); // 2 3 5 6
        }


    }
    static ArrayList<Integer> Brute(int arr1[],int arr2[])
    {
        ArrayList<Integer>temp1=new ArrayList<>();
        ArrayList<Integer>temp2=new ArrayList<>();
        for(int i:arr1)
        {
            temp1.add(i);
        }
        for(int i=0;i<arr2.length;i++)
        {
            if(temp1.contains(arr2[i]))
            {
                if(!temp2.contains(arr2[i]))
                {
                    temp2.add(arr2[i]);
                }
            }
        }
        return temp2;
    }
    static ArrayList<Integer> Optimal(int arr1[],int arr2[])
    {
        int i=0,j=0;
        ArrayList<Integer> temp=new ArrayList<>();
        while(i<arr1.length && j<arr2.length)
        {
            if(arr1[i]<arr2[j])
            {
                i++;
            }
            else if(arr1[i]<arr2[j])
            {
                j++;
            }
            else 
            {
                if(!temp.contains(arr1[i]))
                {
                    temp.add(arr1[i]);
                }
                i++;
                j++;
            }
        }
        return temp;
    }
}
*/

//12.find the missing Number
/* 
public class Main 
{
    public static void main(String[] args) {
        int arr1[]={3,0,1};     
        System.out.println(Brute(arr1)); //2

        int arr2[]={3,0,1};     
        System.out.println(Better(arr2)); //2

        int arr4[]={3,2,1};     
        System.out.println(Optimal(arr4)); //0
    }
    static int Brute(int arr[])
    {
        for(int i=0;i<arr.length;)
        {
            int index=arr[i];
            if(index<arr.length && arr[i]!=arr[index])
            {
                int temp=arr[i];
                arr[i]=arr[index];
                arr[index]=temp;
            }
            else
            {
                i++;
            }
        }
        for(int i=0;i<arr.length;i++)
        {
            if(i!=arr[i])
            {
                return i;
            }
        }
        return 1;
    }
    static int Better(int arr[])
    {
        int len=arr.length;
        int Tsum=(len*(len+1))/2,sum=0;
        for(int i=0;i<arr.length;i++)
        {
            sum=sum+arr[i];
        }
        return Tsum-sum;
    }
    static int Optimal(int arr[])
    {
        int ans=0;
        for(int i=1;i<=arr.length;i++)
        {
            ans=ans^i;
        }
        for(int i=0;i<arr.length;i++)
        {
            ans=ans^arr[i];
        }
        return ans;
    }
}
*/

//13.Maximum Consecutive Ones
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr[]={1,1,0,1,1,1,0,1,1};
        int max=0,ctr=0;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]==1)
            {
                ctr++;
                if(max<ctr)
                {
                    max=ctr;
                }
            }
            else
            {
                ctr=0;
            }
        } 
        System.out.println("Maximum Ones: "+max); //3
    }
}
*/

//14.Find the number that appears once, and the other numbers twice
/* 
public class Main 
{
    public static void main(String args[])
    {
        int arr1[]={1,1,3,3,4,4,2,6,6};
        System.out.println(Brute(arr1)); //2

        int arr2[]={1,1,3,3,4,4,2,6,6};
        System.out.println(Optimal(arr2)); //2

    }
    static int Brute(int arr1[])
    {
        int max=0;
        for(int i=0;i<arr1.length;i++)
        {
            if(max<arr1[i])
            {
                max=arr1[i];
            }
        }
        int temp[]=new int[max+1];
        for(int i=0;i<arr1.length;i++)
        {
            temp[arr1[i]]++;
        }
        for(int i=0;i<max+1;i++)
        {
            if(temp[i]==1)
            {
                return i;
            }
        }
        return -1;
    }
    static int Optimal(int arr[])
    {
        int ans=0;
        for(int i:arr)
        {
            ans=ans^i;
        }
        return ans;
    }
}
*/

//15.Longest subarray With Sum K
// subarray means continue
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr1[]={10,5,2,7,1,9},k1=15;    
        System.out.println(Brute(arr1, k1)); // 4 --> 5+2+7+1=>15

        //time complexity:O(2N)
        int arr2[]={10,5,2,7,1,9},k2=15;    
        System.out.println(Optimal(arr2, k2)); // 4 --> 5+2+7+1=>15
    }
    static int Brute(int arr[],int k)
    {
        int max=0;
        for(int i=0;i<arr.length;i++)
        {
            int sum=0;
            for(int j=i;j<arr.length;j++)
            {
                sum=sum+arr[j];
                if(sum==k)
                {
                    if(max<j-i+1)
                    {
                        max=j-i+1;
                    }
                }
            }

        }
        return max;
    }
    static int Optimal(int arr[],int k)
    {
        int left=0,right=0,sum=0,max=0;
        while(right<arr.length)
        {
            sum=sum+arr[right];
            while(left<=right &&sum>k)
            {
                sum=sum-arr[left];
                left++;
            }
            if(sum==k)
            {
                if(max<right-left+1)
                {
                    max=right-left+1;
                }
            }
            right++;
        }   
        return max;
    }
}
*/


//16.2Sum
/* 
import java.util.ArrayList;
import java.util.Arrays;

public class Main 
{
    public static void main(String[] args) 
    {
        int arr1[]={2,6,5,8,11},target1=14;
        int temp1[]=Brute(arr1, target1);
        System.out.println(temp1[0]+" "+temp1[1]); //1 3


        int arr2[]={2,6,5,8,11},target2=14;
        int temp2[]=Better(arr2, target2);
        System.out.println(temp2[0]+" "+temp2[1]);//1 3


        int arr3[]={2,6,5,8,11},target3=14;
        System.out.println(Optimal(arr3, target3));// YES



    }
    static int[] Brute(int arr[],int target)
    {
        for(int i=0;i<arr.length;i++)
        {
            for(int j=i+1;j<arr.length;j++)
            {
                if( i!=j &&arr[i]+arr[j]==target)
                {
                    return new int[]{i,j};
                }
            }
        }
        return new int[]{-1,-1};
    }
    static int[] Better(int arr[],int target)
    {
        ArrayList<Integer>temp=new ArrayList<>();
        for(int i=0;i<arr.length;i++)
        {
            temp.add(arr[i]);
        }
        for(int i=0;i<arr.length;i++)
        {
            if(temp.contains(target-arr[i]))
            {
                return new int[]{i,temp.indexOf(target-arr[i])};
            }
        }
        return new int[]{-1,-1};
    }
    static String Optimal(int arr[],int target)
    {
        Arrays.sort(arr);//use merge sort
        int left=0,right=arr.length-1;
        while(left<right)
        {
            if(arr[left]+arr[right]>target)
            {
                right--;
            }
            else if(arr[left]+arr[right]<target)
            {
                left++;
            }
            else
            {
                return "YES";
            }
        }
        return "NO";
    }
}
*/


//17.Sort an array of 0's 1's & 2's 
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args)
    {
        int arr1[]={0,1,2,0,1,2,1,2,0,0,0,1}; 
        Brute(arr1);
        for(int i:arr1)
        {
            System.out.print(i+" "); // 0 0 0 0 0 1 1 1 1 2 2 2 
        }

        System.out.println();

        int arr2[]={0,1,2,0,1,2,1,2,0,0,0,1}; 
        Better(arr2);
        for(int i:arr2)
        {
            System.out.print(i+" "); // 0 0 0 0 0 1 1 1 1 2 2 2 
        }

        System.out.println();

        int arr3[]={0,1,2,0,1,2,1,2,0,0,0,1}; 
        Optimal(arr3);
        for(int i:arr3)
        {
            System.out.print(i+" "); // 0 0 0 0 0 1 1 1 1 2 2 2 
        }
    }
    static void Brute(int arr[])
    {
        Arrays.sort(arr);// use merge sort
    }
    static void Better(int arr[])
    {
        int zero=0,one=0;
        for(int i:arr)
        {
            if(i==0){zero++;}
            else if(i==1){one++;}
        }
        for(int i=0;i<zero;i++)
        {
            arr[i]=0;
        }
        for(int i=zero;i<zero+one;i++)
        {
            arr[i]=1;   
        }
        for(int i=zero+one;i<arr.length;i++)
        {
            arr[i]=2;
        }
        return;
    }
    static void Optimal(int arr[])
    {

        //0,1,2,0,1,2,1,2,0,0,0,1
        //li                    r         

        int left=0,right=arr.length-1;
        int i=0;
        while(i<=right)
        {
            if(arr[i]==0)
            {
                int temp=arr[left];
                arr[left]=arr[i];
                arr[i]=temp;
                left++;
                i++;
            }
            else if(arr[i]==1)
            {
                i++;
            }
            else 
            {
                int temp=arr[i];
                arr[i]=arr[right];
                arr[right]=temp;
                right--;
            }
        }   
    }
}
*/

//18.Majority element (>N/2 times)
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args) 
    {
        int arr1[]={2,2,3,3,1,2,2};
        System.out.println(Brute(arr1)); //2

        int arr2[]={2,2,3,3,1,2,2};
        System.out.println(Better(arr2));//2

        //Moore's Voting Algorithm
        int arr3[]={7,7,5,7,5,1,5,7,5,5,7,7,5,5,5};
        System.out.println(Optimal(arr3)); //5
    }
    static int Brute(int arr[])
    {
        for(int i=0;i<arr.length;i++)
        {
            int ctr=0;
            for(int j=i+i;j<arr.length;j++)
            {
                if(arr[i]==arr[j])
                {
                    ctr++;
                }
            }
            if(ctr>arr.length/2)
            {
                return arr[i];
            }
        }
        return -1;
    }
    static int Better(int arr[])
    {
        int len=arr.length;
        HashMap<Integer,Integer>temp=new HashMap<>();
        for(int i=0;i<len;i++)
        {
            temp.put(arr[i],temp.getOrDefault(arr[i],0)+1);
        }
        for (Map.Entry<Integer, Integer> i : temp.entrySet()) 
        {
           // System.out.println(i.getKey()+" "+i.getValue());
           if(i.getValue()>len/2)
           {
              return i.getKey();
           }
        }
        return -1;
    }
    //Moore's Voting Algorithm
    static int Optimal(int arr[])
    {
        int element=0,ctr=0;
        for(int i=0;i<arr.length;i++)
        {
            if(ctr==0)
            {
                element=arr[i];
                ctr++;
            }
            else if(element==arr[i])
            {
                ctr++;
            }
            else
            {
                ctr--;
            }
        }
        return element;
    }
}
*/

//19.Kadane's Algorithm, maximum subarray sum
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr1[]={-2,1,-3,4,-1,2,1,-5,4};   
        System.out.println(Optimal(arr1));  //6
    }
    static int Optimal(int arr1[])
    {
        int sum=0,max=0;
        for(int i=0;i<arr1.length;i++)
        {
            sum=sum+arr1[i];
            if(sum<0)
            {
                sum=0;
            }
            if(max<sum)
            {
                max=sum;
            }
        }
        return max;
    }
}
*/

//20.Rearrange the array in alternating positive and negative items (equal +-)
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr1[]={3,1,-2,-5,2,-4};    
        int temp[]=Better(arr1);
        for(int i:temp)
        {
            System.out.print(i+" ");
        }
    }
    static int[] Better(int arr[])
    {
        int positive_index=0;
        int negative_index=1;
        int temp[]=new int[arr.length];
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]<0)
            {
                temp[negative_index]=arr[i];
                negative_index=negative_index+2;
            }
            else
            {
                temp[positive_index]=arr[i];
                positive_index=positive_index+2;
            }   
        }
        return temp;
    }
}
*/

//21.Rearrange the array in alternating positive and negative items (not equal +-)
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args) {
        int arr[]={-1,2,3,4,5,-7,1};
        Brute(arr);
        for(int i:arr)
        {
            System.out.print(i+" ");
        }
    }
    static void Brute(int arr[])
    {
        ArrayList<Integer>positive=new ArrayList<>();
        ArrayList<Integer>negative=new ArrayList<>();
        for(int i:arr)
        {
            if(i<0)
            {
                negative.add(i);
            }
            else
            {
                positive.add(i);
            }
        }
        int i=0,j=0,ctr=0;
        // 2 3 4 5 1 
        // -1 -7
        while( i<positive.size() && j<negative.size())
        {
            arr[ctr++]=positive.get(i);
            arr[ctr++]=negative.get(j);
            i++;j++;
        }
        while(i<positive.size())
        {
            arr[ctr++]=positive.get(i++);
        }
        while(j<negative.size())
        {
            arr[ctr++]=negative.get(j++);
        }
        return;
    }
}
*/

//22.Leaders in array
/* 
public class Main 
{
    public static void main(String[] args) {
        int arr[]={16,17,4,3,5,2},max=arr[arr.length-1];
        for(int i=arr.length-2;i>=0;i--)
        {
            if(max<arr[i])
            {
                max=arr[i];
            }
            else
            {
                arr[i]=-123;
            }
        }
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]!=-123)
            {
                System.out.print(arr[i]+" "); // 17 5 2
            }
        }
    }
}
*/

//23.longest Consecutive Sequences
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args) {
        int arr1[]={102,4,100,1,101,3,2,1,1};
        System.out.println(Brute(arr1)); //4

        int arr2[]={102,4,100,1,101,3,2,1,1};
        System.out.println(Better(arr2)); //4

        int arr3[]={102,4,100,1,101,3,2,1,1};
        System.out.println(Optimal(arr3)); //4
    }
    static int Brute(int arr[])
    {
        int max=0;
        for(int i=0;i<arr.length;i++)
        {
            int element=arr[i],ctr=0;
            for(int j=0;j<arr.length;j++)
            {
                if(element==arr[j])
                {
                    ctr++;
                    element=arr[j]+1;
                    j=0;
                }
            }
            if(max<ctr)
            {
                max=ctr;
            }
        }
        return max; 
    }
    static int Better(int arr[])
    {
        //1 1 1 2 3 4 100 101 102
        Arrays.sort(arr);
        int ctr=0,max=0,element=arr[0];
        for(int i=0;i<arr.length;i++)
        {
            if(element==arr[i])
            {
                ctr++;
                element++;
            }
            else if(element-1==arr[i])
            {
                continue;
            }
            else
            {
                if(max<ctr)
                {
                    max=ctr;
                }
                ctr=0;
            }
        }
        return max;
    }
    static int Optimal(int arr[])
    {
        ArrayList<Integer>temp=new ArrayList<>();
        for(int i=0;i<arr.length;i++)
        {
            if(!temp.contains(arr[i]))
            {
                temp.add(arr[i]);
            }
        }
        int element=temp.get(0);
        int ctr=0,max=0;
        for(int i=0;i<temp.size();)
        {
            if(temp.contains(element))
            {
                ctr++;
                element++;
            }
            else
            {
                if(max<ctr)
                {
                    max=ctr;
                }
                ctr=0;
                element=arr[i];
                i++;
            }
        } 
        return max;
    }
}
*/

//24.set Matrix zero
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr[][]=
        {
            {1,1,1},
            {1,0,1},
            {1,1,1}
        };
        function(arr);
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr[0].length;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
    }
    static void function(int arr[][])
    {
        int col00=1;
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr[0].length;j++)
            {
                if(arr[i][j]==0)
                {
                    arr[i][0]=0;
                    if(j!=0)
                    {
                        arr[0][j]=0;
                    }
                    else
                    {
                        col00=0;
                    }
                }
            }
        }
        //inside 
        for(int i=1;i<arr.length;i++)
        {
            for(int j=1;j<arr[0].length;j++)
            {
                if(arr[i][0]==0||arr[0][j]==0)
                {
                    arr[i][j]=0;
                }
            }
        }
        if(arr[0][0]==0)
        {
            for(int i=0;i<arr[0].length;i++)
            {
                arr[0][i]=0;
            }
        }
        if(col00==0)
        {
            for(int i=0;i<arr.length;i++)
            {
                arr[i][0]=0;
            }
        }
        return;
    }

}
*/

//25.Rotate Matrix by N degrees
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr[][]=
        {
            {1,2,3},
            {4,5,6},
            {7,8,9}
        };
        System.out.println("----90 Degree-----");
        NinetyDegree(arr);
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr[0].length;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }

        System.out.println("----180 Degree-----");
        NinetyDegree(arr);
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr[0].length;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }

        System.out.println("----270 Degree-----");
        NinetyDegree(arr);
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr[0].length;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }

        System.out.println("----180 Degree-----");
        NinetyDegree(arr);
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr[0].length;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
    }
    static void NinetyDegree(int arr[][])
    {
        SetTranspose(arr);
        SetReverse(arr);
        return;
    }
    static void SetTranspose(int arr[][])
    {
        for(int i=0;i<arr.length;i++)
        {
            for(int j=i;j<arr[0].length;j++)
            {
                int temp=arr[i][j];
                arr[i][j]=arr[j][i];
                arr[j][i]=temp;
            }
        }
    }
    static void SetReverse(int arr[][])
    {
        for(int i=0;i<arr.length;i++)
        {
            int left=0,right=arr[0].length-1;
            while(left<=right)
            {
                int temp=arr[i][left];
                arr[i][left]=arr[i][right];
                arr[i][right]=temp;
                left++;
                right--;
            }
        }
    }
}
*/

//26. Spiral Matrix
/* 
public class Main 
{
    public static void main(String[] args) {
        int arr[][]=
        {
            {1,2,3},
            {4,5,6},
            {7,8,9}
        };
        int r1=0,r2=arr.length-1,c1=0,c2=arr[0].length-1;
        while( r1<=r2 && c1<=c2)
        {
            for(int i=c1;i<=c2;i++)
            {
                System.out.print(arr[r1][i]+" ");
            }
            r1++;
            for(int i=r1;i<=r2;i++)
            {
                System.out.print(arr[i][c2]+" ");
            }
            c2--;
            if (r1>r2 ||c1>c2) 
            {
                break;   
            }

            for(int i=c2;i>=c1;i--)
            {
                System.out.print(arr[r2][i]+" ");
            }
            r2--;
            for(int i=r2;i>=r1;i--)
            {
                System.out.print(arr[i][c1]+" ");
            }
            System.out.println();
        }
    }
}

//1 2 3 6 9 8 7 4 
//4 5
*/

//27.count Subarray Sum Equals K
/* 
public class Main 
{
    public static void main(String[] args) {

        int arr1[]={1,2,3,-3,1,1,1,4,2,-3},k1=3;
        System.out.println(Brute(arr1, k1));// 8

        int arr2[]={1,2,3,-3,1,1,1,4,2,-3},k2=3;
        System.out.println(subarraySum(arr2, k2));// 8
    }
    static int Brute(int arr[],int k)
    {
        int ctr=0;
        for(int i=0;i<arr.length;i++)
        {
            int sum=0;
            for(int j=i;j<arr.length;j++)
            {
                sum=sum+arr[j];
                if(sum==k)
                {
                    ctr++;
                }
            }
        }
        return ctr;
    }
    static int subarraySum(int[] nums, int k)
    {
        int s=0,e=0,sum=0,ctr=0;
        while(s<nums.length)
        {
            sum+=nums[e];
            if(sum==k)
            {
                ctr++;
            }
            e++;
            if(e>=nums.length)
            {
                sum=0;
                s++;
                e=s;
            }
        }
        return ctr;
    }
}
*/

//28.pascal's triangel
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args) {
        int num1=5;
        ArrayList<ArrayList<Integer>>temp1=PascalTriangle1(num1);
        for(int i=0;i<temp1.size();i++)
        {
            ArrayList<Integer>temp2=temp1.get(i);
            for(int j=0;j<temp2.size();j++)
            {
                System.out.print(temp2.get(j)+" ");
            }
            System.out.println();
        }

        int num2=5;
        PascalTriangle2(num2);
    }
    static ArrayList<ArrayList<Integer>> PascalTriangle1(int num)
    {
        ArrayList<ArrayList<Integer>> temp1=new ArrayList<>(); 
        for(int i=0;i<num;i++)
        {
            ArrayList<Integer>temp2=new ArrayList<>();
            for(int j=0;j<=i;j++)
            {
                if(j==0||j==i)
                {
                    temp2.add(1);
                }
                else
                {
                    ArrayList<Integer>temp3=temp1.get(i-1);
                    temp2.add(temp3.get(j)+temp3.get(j-1));
                }
            }
            temp1.add(temp2);
        }
        return  temp1;     
    }
    static void PascalTriangle2(int num)
    {
        for(int i=1;i<=num;i++)
        {
            int temp=1;
            for(int j=1;j<=i;j++)
            {
                System.out.print(temp+" ");
                temp=temp*(i-j)/j;
            }
            System.out.println();
        }
    }
}
*/

//29.majority elements(n/3)
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args) {

        //1.Brute
        int arr1[]={1,1,1,3,3,2,2,2};
       ArrayList<Integer>temp1=Brute(arr1);
       for(Integer i:temp1)
       {
          System.out.print(i+" ");
       }

       System.out.println();

       //2.Better
       int arr2[]={1,1,1,3,3,2,2,2};
       ArrayList<Integer>temp2=Better(arr2);
       for(Integer i:temp2)
       {
          System.out.print(i+" ");
       }
       System.out.println();

       int arr3[]={1,1,1,3,3,2,2,2};
       ArrayList<Integer>temp3=Optimal(arr3);
       for(Integer i:temp3)
       {
          System.out.print(i+" ");
       }
       System.out.println();
    }
    static ArrayList<Integer> Brute(int arr1[])
    {
        ArrayList<Integer>temp=new ArrayList<>();
        for(int i=0;i<arr1.length;i++)
        {
            int ctr=0;
            for(int j=0;j<arr1.length;j++)
            {
                if(arr1[i]==arr1[j])
                {
                    ctr++;
                }
            }
            if(ctr>arr1.length/3)
            {
                if(!temp.contains(arr1[i]))
                {
                    temp.add(arr1[i]);
                }
            }
        }
        return temp;
    }
    static ArrayList<Integer> Better(int arr[])
    {
        Map<Integer,Integer>temp=new HashMap<>();
        ArrayList<Integer>result=new ArrayList<>();
        for(int i:arr)
        {
            temp.put(i, temp.getOrDefault(i, 0)+1);
        }
        for(Map.Entry<Integer,Integer>i:temp.entrySet())
        {
            if(i.getValue()>arr.length/3)
            {
                result.add(i.getKey());
            }
        }
        return result;
    }
    static ArrayList<Integer> Optimal(int arr[])
    {
        ArrayList<Integer>temp=new ArrayList<>();
        int ctr1=0,ctr2=0;
        int element1=0,element2=0;
        for(int i=0;i<arr.length;i++)
        {
            if(ctr1==0)
            {
                ctr1=1;
                element1=arr[i];
            }
            else if(ctr2==0)
            {
                ctr2=1;
                element2=arr[i];
            }
            else if(element1==arr[i])
            {
                ctr1++;
            }
            else if(element2==arr[i])
            {
                ctr2++;
            }
            else 
            {
                ctr1--;
                ctr2--;
            }
        }
        ctr1=0;ctr2=0;
        for(int i=0;i<arr.length;i++)
        {
            if(element1==arr[i])
            {
                ctr1++;
            }
            else if(element2==arr[i])
            {
                ctr2++;
            }
        }
        if(ctr1>arr.length/3)
        {
             temp.add(element1);
        }
        if(ctr2>arr.length/3)
        {
            temp.add(element2);
        }
        return temp;
    }
}
*/
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//----------------------------------6.Binary Search-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//1.Binary Search to find X in sorted array
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr[]={1,2,3,4,5,7},target=5;
        System.out.println(BinarySearch(arr,target));
    }
    static int BinarySearch(int arr[],int target)
    {
        int left=0,right=arr.length-1;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(arr[mid]<target)
            {
                left=mid+1;
            }
            else if(arr[mid]>target)
            {
                right=mid-1;
            }
            else
            {
                return mid;
            }
        }
        return -1;
    }
}
*/

//2.Implement Floor
/* 
public class Main 
{
    public static void main(String[] args) {
        int arr[]={1,2,3,4,6,7,9};
        int target=5;
        System.out.println(Floor(arr, target)); //3
    }
    static int Floor(int arr[],int target)
    {
        int left=0,right=arr.length-1,ans=-1;
        while (left<=right)
        {
            int mid=left+(right-left)/2;
            if(arr[mid]<=target)
            {
                ans=mid;
                left=mid+1;
            }   
            else if(arr[mid]>target)
            {
                right=mid-1;
            }
            else
            {
                return mid;
            }
        }
        return ans;
    }
}
*/

//3.Implement Ceils
/* 
public class Main 
{   
    public static void main(String[] args) 
    {
        int arr[]={1,2,3,4,6,7,9};
        int target=5;
        System.out.println(Ceil(arr, target)); //4
    }
    static int Ceil(int arr[],int target)
    {
        int left=0,right=arr.length-1,ans=-1;
        while (left<=right)
        {
            int mid=left+(right-left)/2;
            if(arr[mid]<target)
            {
                left=mid+1;
            }   
            else if(arr[mid]>=target)
            {
                ans=mid;
                right=mid-1;
            }
            else
            {
                return mid;
            }
        }
        return ans;
    }
}
*/

//4.Implement LowerBound (arr[0]>=target)
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr[]={3,5,8,15,19};
        int target=9;   
        System.out.println(LowerBound(arr, target)); //3
    }
    static int LowerBound(int arr[],int target)
    {
        int left=0,right=arr.length-1,ans=arr.length;
        while(left<=right)
        {
            int mid=left+(right-left);
            if(arr[mid]>=target)
            {
                ans=mid;
                right=mid-1;
            }
            else 
            {
                left=mid+1;
            }
        }
        return ans;
    }
}
*/

//5.Implement UpperBound (arr[0]>target)
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        //         0 1 2 3  4  5
        int arr[]={3,5,8,8,15,19};
        int target=8;   
        System.out.println(UpperBound(arr, target)); //4
    }
    static int UpperBound(int arr[],int target)
    {
        int left=0,right=arr.length-1,ans=arr.length;
        while(left<=right)
        {
            int mid=left+(right-left);
            if(arr[mid]>target)
            {
                ans=mid;
                right=mid-1;
            }
            else 
            {
                left=mid+1;
            }
        }
        return ans;
    }
}
*/


//6.Search Insert Position I
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        //         0 1 2 3
        int arr[]={1,2,4,7};
        int target=6;
        System.out.println(LowerBound(arr, target)); //3
    }
    static int LowerBound(int arr[],int target)
    {
        int left=0,right=arr.length-1,ans=arr.length;
        while(left<=right)
        {
            int mid=left+(right-left);
            if(arr[mid]>=target)
            {
                ans=mid;
                right=mid-1;
            }
            else 
            {
                left=mid+1;
            }
        }
        return ans;
    }
}
*/

//7.Search Insert Position II
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        //         0 1 2 3 4
        int arr[]={1,2,4,6,7};
        int target=6;
        System.out.println(UpperBound(arr, target)); //4
    }
    static int UpperBound(int arr[],int target)
    {
        int left=0,right=arr.length-1,ans=arr.length;
        while(left<=right)
        {
            int mid=left+(right-left);
            if(arr[mid]>target)
            {
                ans=mid;
                right=mid-1;
            }
            else 
            {
                left=mid+1;
            }
        }
        return ans;
    }
}
*/

//8.First and Last Occurrences in Array
/* 
public class Main 
{
    public static void main(String[] args) {
        //1.Brute
        int arr1[]={2,4,6,8,8,8,11,13};
        int target1=8;
        Brute(arr1, target1); // 3 5

        //2.Better
        int arr2[]={2,4,6,8,8,8,11,13};
        int target2=8;
        Better(arr1, target2);// 3 5



    }
    static void Brute(int arr[],int target)
    {
        int firstIndex=-1,lastIndex=-1;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]==target)
            {
                if(firstIndex==-1){firstIndex=i;}
                lastIndex=i;
            }
        }
        System.out.println(firstIndex+" "+lastIndex);
        return;
    }
    static void Better(int arr[],int target)
    {
        System.out.println(Bound(arr, target, true)+" "+(Bound(arr, target, false)-1));
    }
    static int Bound(int arr[],int target,boolean LowerOrUpper)
    {
        int left=0,right=arr.length-1,ans=-1;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(LowerOrUpper)
            {
                if(arr[mid]>=target)
                {
                    ans=mid;
                    right=mid-1;
                }
                else
                {
                    left=mid+1;
                }
            }
            else
            {
                if(arr[mid]>target)
                {
                    ans=mid;
                    right=mid-1;
                }
                else
                {
                    left=mid+1;
                }
            }
        }
        return ans;
    }
}
*/

//9. Search Element in Rotated Sorted Array -I
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr1[]={7,8,9,1,2,3,4,5,6};
        int target1=1;
        System.out.println(Brute(arr1, target1)); //3

        int arr2[]={7,8,9,1,2,3,4,5,6};
        int target2=1;
        System.out.println(Optimal(arr2, target2)); //3
    }
    static int Brute(int arr1[],int target)
    {
        for(int i=0;i<arr1.length;i++)
        {
            if(arr1[i]==target)
            {
                return i;
            }
        }
        return -1;
    }
    static int Optimal(int arr[],int target)
    {
        int left=0,right=arr.length-1;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(arr[mid]==target)
            {
                return mid;
            }
            if(arr[left]<=arr[mid])
            {
                if(arr[left]<=target && target<=arr[mid])
                {
                    right=mid-1;
                }
                else
                {
                    left=mid+1;
                }
            }
            else
            {
                if(arr[mid]<=target && target<=arr[right])
                {
                    left=mid+1;
                }
                else
                {
                    right=mid-1;
                }
            }
        }
        return -1;
    }
}
*/

//10.Minimum in Rotated Sorted Array
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr1[]={5,4,6,7,0,1,2};   
        System.out.println(Brute(arr1)); //4

        int arr2[]={5,4,6,7,0,1,2};   
        System.out.println(Optimal(arr2)); //0
    }
    static int Brute(int arr[])
    {
        int min=9999,index=0;
        for(int i=0;i<arr.length;i++)
        {
            if(min>arr[i])
            {
                min=arr[i];
                index=i;
            }
        }
        return index;
    }
    static int Optimal(int arr[])
    {
        int left=0,right=arr.length-1;
        int ans=99999;
        while (left<=right) 
        {
            int mid=left+(right-left)/2;
            if(arr[left]<=arr[mid])
            {
                ans=Math.min(ans,arr[left]);
                left=mid+1;
            }
            else
            {
                ans=Math.min(ans,arr[mid]);
                right=mid-1;
            }
        }
        return ans;
    }
}
*/

//11.Single Element in Sorted Array
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args) 
    {
        int arr1[]={1,1,2,2,3,3,4,5,5,6,6};
        System.out.println(Brute(arr1)); //4

        int arr2[]={1,1,2,2,3,3,4,5,5,6,6};
        System.out.println(Better(arr2)); //4

        
        int arr3[]={1,1,2,2,3,3,4,5,5,6,6};
        System.out.println(Better(arr3)); //4
    }
    static int Brute(int arr[])
    {
        for(int i=0;i<arr.length;i++)
        {
            int ctr=0;
            for(int j=0;j<arr.length;j++)
            {
                if(arr[i]==arr[j])
                {
                    ctr++;
                }
            }
            if(ctr==1)
            {
                return arr[i];
            }
        }
        return -1;
    } 

    static int Better(int arr[])
    {
        Map<Integer,Integer>temp=new HashMap<>();
        for(int i:arr)
        {
            temp.put(i, temp.getOrDefault(i, 0)+1);
        }
        for (Map.Entry<Integer, Integer> it : temp.entrySet()) 
        {
            if (it.getValue()==1)
            {
                return it.getKey();
            }
        }
        return -1;
    }
    static int Optimal(int arr[])
    {
        //0 1 2 3 4 5 6 7 8 9 10
        //1 1 2 2 3 3 4 5 5 6 6
        //elimination for mid-1,mid
        //(even,odd) ===> element is on right half, x left
        //(odd,even) ===> element is on left half, x right
        int len=arr.length;
        if(len==1)
        {
            return arr[0];
        }
        if(arr[0]!=arr[1])
        {
            return arr[0];
        }
        if(arr[len-1]!=arr[len-2])
        {
            return arr[len-2];
        }
        int left=1,right=len-2;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])
            {
                return arr[mid];
            }
            if( ( mid%2==1 && arr[mid]==arr[mid-1] ) || ( mid%2==0 &&arr[mid]==arr[mid+1] )  )
            {
                left=mid+1;
            }
            else
            {
                right=mid+1;
            }
        }
        return -1;

    }
}
*/

//12.find peak element
//arr[]={1,2,3,4,5,6,7,8,5,1} ans=8
//arr[]={1,2,1,3,5,6,4} ans=2,6
//arr[]={1,2,3,4,5} ans=5
//arr[]={5,4,3,2,1} ans=5
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr1[]={1,2,1,3,5,6,4}; //ans=2,6
        System.out.println(Brute(arr1)); //index=1

        int arr2[]={1,2,1,3,5,6,4}; //ans=2,6
        System.out.println(Better(arr2)); //index=5

        int arr3[]={1,2,1,3,5,6,4}; //ans=2,6
        System.out.println(Optimal(arr3)); //index=5
    }
    static int Brute(int arr[])
    {
        for(int i=0;i<arr.length;i++)
        {
            if( (i==0 || arr[i-1]<arr[i]) && (i==arr.length-1 || arr[i]>arr[i+1]) )
            {
                return i;
            }
        }
        return -1;
    }
    static int Better(int arr[])
    {
        int start=0,end=arr.length-1;
        while(start<end)
        {
            int mid = start+(end-start)/2;
            if(arr[mid]>arr[mid+1])
            {
                end=mid;
            }
            else
            {
                start=mid+1;
            }
        }
        return start;
    }
    static int Optimal(int arr[])
    {
        int len=arr.length;
        if(len==1){return 0;}
        if(arr[0]>arr[1]){return 0;}
        if(arr[len-1]>arr[len-2]) {return len-1;} 
        int left=1,right=len-2;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(arr[mid]>arr[mid-1] && arr[mid]>arr[mid+1])
            {
                return mid;
            }
            else if(arr[mid]>arr[mid-1])
            {
                left=mid+1;
            }
            else
            {
                right=mid-1;
            }
        }
        return -1;
    }
}
*/

//13. Finding Sqrt of a number using Binary Search by return floor value
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        System.out.println(Brute(27)); //5
        System.out.println(Better(27)); //5
        System.out.println(Optimal(27)); //5
    }
    static int Brute(int number)
    {
        int ans=1;
        for(int i=1;i<=number;i++)
        {
            if(i*i <=number)
            {
                ans=i;
            }
            else
            {
                break;
            }
        }
        return ans;
    }
    static int Better(int number)
    {
        int ans=1;
        for(int i=number;i>=1;i--)
        {
            if(i*i<=number)
            {
                ans=i;
                break;
            }
        }
        return ans;
    }
    static int Optimal(int number)
    {
        int ans=1;
        int left=0,right=number;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(mid*mid<=number)
            {
                ans=mid;
                left=mid+1;
            }
            else
            {
                right=mid-1;
            }
        }
        return ans;
    }
}
*/

//14.find nth root of M
//N=3 M=27 ans=3 (3*3*3)
//N=4 M=69 ans=-1 (out of the number)
/*
public class Main 
{
    public static void main(String[] args)
    {
        int N1=3,M1=27; 
        System.out.println(Brute(N1, M1)); //3

        int N2=3,M2=27; 
        System.out.println(Brute(N2, M2)); //3
    }
    static int Brute(int N,int M)
    { 
        for(int i=1;i<=M;i++)
        {
            int j=1,pow=1;
            while(j<=N)
            {
                pow=pow*i;
                j++;
            }
            if(pow==M)
            {
                return i;
            }
            else if(pow>M)
            {
                return -1;
            }
        }
        return -1;
    }
    static int Optimal(int N,int M)
    {
        int left=0,right=M;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(Math.pow(mid,N)==M)
            {
                return mid;
            }
            else if(Math.pow(mid,N)<M)
            {
                left=mid+1;
            }
            else
            {
                right=mid-1;
            }
        }
        return -1;
    }
}
*/

//15.Koko Eating Bananas 
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int v1[] = {3, 6, 7, 11};
        int h1 = 8;  
        System.out.println(Brute(v1, h1)); //4

        int v2[] = {3, 6, 7, 11};
        int h2 = 8;  
        System.out.println(Optimal(v2, h2)); //4


    }
    static int Brute(int arr[],int h)
    {
        int end=max(arr);
        for(int i=1;i<=end;i++)
        {
            int temp=CalculateTotalHours(arr, i);
            if(temp<=h)
            {
                return i;
            }
        }
        return -1;
    }
    static int max(int arr[])
    {
        int max=0;
        for(int i:arr)
        {
            if(max<i)
            {
                max=i;
            }
        }
        return max;
    }
    static int CalculateTotalHours(int arr[],int hours)
    {
        int total=0;
        for(int i=0;i<arr.length;i++)
        {
            total+=Math.ceil((double)(arr[i])/(double)(hours));
        }
        return total;
    }

    static int Optimal(int arr[],int h)
    {
        int left=1,right=max(arr);
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            int temp=CalculateTotalHours(arr, mid);
            if(temp<=h)
            {
                right=mid-1;
            }
            else
            {
                left=mid+1;
            }
        }
        return left;
    }
}
*/

//16.Minimum days to make M bouquets 
//M-No.of Bouquets
//K-adjacent flowers required
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        
        int BloomDay1[]={7,7,7,7,13,11,12,7};
        //12-----------> |,|,|,|, |, |, |,|
        //11-----------> |,|,|,|, X, |, X,|
        //7------------> |,|,|,|, X, X, X,1
        int M1=2,K1=3;
        System.out.println(Brute(BloomDay1, M1, K1));//12

        int BloomDay2[]={7,7,7,7,13,11,12,7};
        int M2=2,K2=3;
        System.out.println(Optimal(BloomDay2, M2, K2));//12

    }
    static int Brute(int BloomDay[],int M1,int K1)
    {
        for(int i=min(BloomDay);i<=max(BloomDay);i++)
        {
            if(FormBouqutesIn_N_Day(BloomDay, i, M1, K1))
            {
                return i;
            }
        }   
        return -1;
    }
    static boolean FormBouqutesIn_N_Day(int arr[],int day,int m,int k)
    {
        int ctr=0,No_oF_Bouquts=0;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]<=day)
            {
                ctr++;
            }
            else
            {
                No_oF_Bouquts+=(ctr/k);
                ctr=0;
            }
        }
        No_oF_Bouquts+=(ctr/k);
        return No_oF_Bouquts>=m;
    }
    static int Optimal(int BloomDay[],int M1,int K1)
    {
        int left=min(BloomDay),right=max(BloomDay);
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(FormBouqutesIn_N_Day(BloomDay,mid ,M1, K1))
            {
                right=mid-1;
            }
            else
            {
                left=mid+1;
            }
        }
        return left; 
    }


    static int min(int arr[])
    {
        int min=99999;
        for(int i:arr)
        {
            if(min>i)
            {
                min=i;
            }
        }
        return min;
    }
    static int max(int arr[])
    {
        int max=0;
        for(int i:arr)
        {
            if(max<i)
            {
                max=i;
            }
        }
        return max;
    }
    

}

*/

//17.Find the Smallest Divisor Given a Threshold 
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr1[]={1,2,5,9},threshold1=6;    
        System.out.println(Brute(arr1, threshold1)); //5

     //   int arr2[]={1,2,5,9},threshold2=6;    
        int arr2[]={44,22,33,11,1},threshold=5;
        System.out.println(Optimal(arr2, threshold));//5
    }

    static int max(int arr[])
    {
        int max=0;
        for(int i:arr)
        {
            if(max<i)
            {
                max=i;
            }
        }
        return max;
    }
    
    static int Brute(int arr[],int threshold)
    {
        int max=max(arr);
        for(int i=1;i<=max;i++)
        {
            int sum=0;
            for(int j:arr)
            {
                sum=sum+(int)(Math.ceil( (double)(j)/(double)(i) ));
            }
            if(sum<=threshold)
            {
                return i;
            }
        }
        return -1;
    }
    static int Optimal(int arr[] ,int threshold)
    {
        int left=1,right=max(arr);
        while(left<=right)
        {
            int mid=left+(right-left);
            if(sumOfGivenRange(arr, mid)<=threshold)
            {
                right=mid-1;
            }
            else
            {
                left=mid+1;
            }
        }
        return left;
    }
    static int sumOfGivenRange(int arr[],int division)
    {
        int sum=0;
        for(int i:arr)
        {
            sum+=Math.ceil(  (double)(i)/(double)(division)  );
        }
        return sum;
    }
}
*/

//18.Capacity To Ship Packages Within D Days
//Capacity Range between (max - sum of arr)
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int weights1[] = {1,2,3,4,5,6,7,8,9,10},days1=5; 
        System.out.println(Brute(weights1, days1));//15

        int weights2[] = {1,2,3,4,5,6,7,8,9,10},days2=5; 
        System.out.println(Optimal(weights2, days2));//15
    }
    static int Brute(int weights[],int days)
    {
        for(int i=max(weights);i<=sum(weights);i++)
        {
            if(SetCapacity(weights, i)<=days)
            {
                return i;
            }
        }
        return -1;
    }
    static int SetCapacity(int arr[],int Capacity)
    {
        int days=1,ship=0;
        for(int i:arr)
        {
            if(ship+i>Capacity)
            {
                days++;
                ship=i;
            }
            else
            {
                ship+=i;
            }
        }
        return days;
    }

    static int Optimal(int arr[],int Capacity)
    {
        int left=max(arr),right=sum(arr);
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(SetCapacity(arr,mid)<=Capacity)
            {
                right=mid-1;
            }
            else
            {
                left=mid+1;
            }
        }
        return left;
    }

    static int sum(int arr[])
    {
        int sum=0;
        for(int i:arr)
        {
            sum+=i;
        }
        return sum;
    }
    static int max(int arr[])
    {
        int max=0;
        for(int i:arr)
        {
            if(max<i)
            {
                max=i;
            }
        }
        return max;

    }

} 
*/

//19.kth missing number
/* 
public class Main 
{
    public static void main(String[] args)
    {
        int arr1[]={2,3,4,7,11},k1=5;
        System.out.println(Brute(arr1, k1)); //9
    }
    static int Brute(int arr[],int k)
    {
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]<=k)
            {
                k++;
            }
            else
            {
                return k;
            }
        }
        return -1;
    }
}
*/

//20.painter's partition
//arr-wall
//k-no.of painters
/*
public class Main 
{
    public static void main(String[] args) {
        int arr1[]={10,20,30,40},k1=2;
        // [10]  [20,30,40]   -- 10,90 ---> 90|
        // [10,20] [30,40]    -- 30,70 ---> 70|--->60
        // [10,20,30] [40]    -- 60,40 ---> 60|
        System.out.println(Brute(arr1, k1)); //60
    }
    static int Brute(int arr[],int painters)
    {
        int min=Integer.MAX_VALUE;
        int sumE=0,sumS=0;
        for(int i:arr)
        {
            sumE+=i;
        }
        for(int i=0;i<arr.length;i++)
        {
            sumS=sumS+arr[i];
            sumE=sumE-arr[i];
            int max=Math.max(sumS, sumE);
            if(min>max)
            {
                min=max;
            }

        }
        return min;
    }
}
*/

//21.Median of 2 sorted arrays
/* 
public class Main 
{
    public static void main(String[] args)
    {
        int nums1[] = {1,3}, nums2[] = {2};
        System.out.println(findMedianSortedArrays(nums1, nums2));   //2.0
    }
    static double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int s=0,e=0,arr[]=new int[nums1.length+nums2.length],ctr=0;
        while(s<nums1.length&&e<nums2.length)
        {
            if(nums1[s]<nums2[e])
            {
                arr[ctr++]=nums1[s];
                s++;
            }
            else if(nums1[s]>nums2[e])
            {
                arr[ctr++]=nums2[e];
                e++;
            }
            else
            {
                arr[ctr++]=nums1[e];
                e++;
                s++;
            }
        }
        while(s<nums1.length)
        {
            arr[ctr++]=nums1[s++];
        }
        while(e<nums2.length)
        {
            arr[ctr++]=nums2[e++];
        }
        int len=arr.length;
        if(arr.length%2==0)
        {
            return ((double)(arr[len/2]+arr[len/2-1])/2);
        }
        else
        {
            return ((double)(arr[len/2]));
        }
    }
}
*/
//22.Search in a 2D matrix
/* 
public class Main 
{
    public static void main(String[] args) 
    {
         int arr1[][]=
         {
            {3,4,7,9},
            {12,13,16,18},
            {20,21,23,29}
         };
         int target=23;
         int arr[]=Brute(arr1, target); // 2 2
         System.out.println(arr[0]+" "+arr[1]); // true

         System.out.println(Optimal(arr1, target));
    }
    static int[] Brute(int arr[][],int target)
    {
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr[0].length;j++)
            {
                if(arr[i][j]==target)
                {
                    return new int[]{i,j};
                }
            }
        }
        return new int[]{-1,-1};
    }
    static boolean Optimal(int arr[][],int target)
    {
        int left=0,right=arr.length*arr[0].length-1;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            int row=mid/arr[0].length,col=mid%arr[0].length;
            if(arr[row][col]==target)
            {
                return true;
            }
            else if(arr[row][col]<target)
            {
                left=mid+1;
            }
            else
            {
                right=mid-1;
            }
        }
        return false;   
    }
}
*/

//23.Row with maximum number of 1s
/* 
public class Main {

    public static void main(String[] args) 
    {
        int arr[][]=
        {
            {0,0,1,1,1},
            {0,0,0,0,0},
            {0,1,1,1,1},
            {0,0,0,0,0},
            {0,1,1,1,1}
        };
        System.out.println(Brute(arr)); // 2
    }
    static int Brute(int arr[][])
    {
        int max=-1,index=-1;
        for(int i=0;i<arr.length;i++)
        {
            int ctr=0;
            for(int j=0;j<arr[0].length;j++)
            {
                ctr+=arr[i][j];
            }
            if(ctr>max)
            {
                max=ctr;
                index=i;
            }
        }
        return index;
    }
}
*/





///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//----------------------------------7.Stacks And Queues--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//1.stacks FILO LIFO
/* 
import java.util.Stack;
public class Main 
{
    public static void main(String[] args) {
        Stack<Integer> stack1=new Stack<>();
        stack1.push(11);
        stack1.push(12);
        stack1.push(13);
        stack1.push(14);
        System.out.println(stack1.pop()); //14
        for(Integer i:stack1)
        {
            System.out.print(i+" ");//11 12 13
        }
    }
}
*/
//2.Queues FIFO LILO
/* 
import java.util.LinkedList;
import java.util.Queue;
public class Main 
{
    public static void main(String[] args) 
    {
        Queue<Integer>queue=new LinkedList<>();    
        queue.add(11);
        queue.add(12);
        queue.add(13);
        queue.add(14);
        System.out.println(queue.remove()); //11
        for(Integer i:queue)
        {
            System.out.print(i+" "); //12 13 14
        }
    }
}
*/

//3.Dequeues insert and remove both side
/* 
import java.util.ArrayDeque;
import java.util.Deque;
public class Main 
{
    public static void main(String[] args) 
    {
        Deque<Integer> deque = new ArrayDeque<>();
        deque.add(11);
        deque.addFirst(12);
        deque.addLast(13);
        deque.add(123);
        deque.add(124);
        deque.add(125);

        for(Integer i:deque)
        {
            System.out.print(i+" ");//12 11 13 123 124 125 
        }
        System.out.println();

        System.out.println(deque.remove()); //12
        System.out.println(deque.removeFirst());//11
        System.out.println( deque.removeLast());//126

        for(Integer i:deque)
        {
            System.out.print(i+" ");//13 123 124
        }
        System.out.println();
    }
}
*/

//4.implementation of stack using array (FILO - LIFO)
/*
import java.util.*;
class Stack
{
    public int data[];
    public static final int DEAULT_SIZE=10;
    public  int index=-1;
    public int size=0;
    Stack()
    {
        this.size=DEAULT_SIZE;
        this.data=new int[DEAULT_SIZE];
    }
    public Stack(int Size)
    {
        this.size=Size;
        this.data=new int[Size];
    }
    public void push(int item)
    {
        if(index+1==size)
        {
            System.out.println("----Stack Overflow---");
            return;
        }
        else
        {
            data[++index]=item;
        }
    }
    public int pop()
    {
        if(index>=0)
        {
            return data[index--];
        }
        else
        {
            System.out.println("----Stack is Empty----");
            return -1;
        }
        
    }
    public void Show()
    {
        for(int i=0;i<=index;i++)
        {
            System.out.print(data[i]+" ");
        }
        return;
    }
    public boolean isEmpty()
    {
        if(index==-1)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public int Size()
    {
        return index+1;
    }
    public int top()
    {
        return data[index];
    }

}
public class Main 
{
    public static void main(String[] args)
    {
        Stack s1 = new Stack(5);
        s1.push(111);
        s1.push(222);
        s1.push(333);
        s1.push(444);
        s1.push(555);
        System.out.println(s1.top());       //555
        System.out.println(s1.Size());     // 5
        System.out.println(s1.isEmpty()); // false
        s1.push(666);
        s1.push(777);
        s1.push(888);                     //----Stack Overflow-------
        System.out.println(s1.pop());     // 555
        s1.Show();                        //111 222 333 444
        System.out.println();
        System.out.println(s1.pop());     //444
        System.out.println(s1.pop());     // 333
        System.out.println(s1.pop());     // 222
        System.out.println(s1.pop());     // 111
        System.out.println(s1.pop());     //  -1   ----Stack is Empty----

        System.out.println(s1.isEmpty()); // true
        System.out.println(s1.Size());    // 0


    }
}
*/


//5.implementation of Queue using array (FIFO - LILO)
/* 
//1 2 3 4 5 6
class queue
{
    public int arr[];
    public int start=0;
    public int end=-1;
    public int size=0;
    queue()
    {
        this.arr=new int[5];
        this.size=5;
    }
    queue(int size)
    {
        this.arr=new int[size];
        this.size=size;
    }
    public void PUSH(int item)
    {
        if((end+1)==size)
        {
            System.out.println("----Queue is Full-----");
            return;
        }
        else
        {
            arr[++end]=item;
        }
    }
    public int POP()
    {
        if (start<=end)
        {
            return arr[start++];
        }
        else
        {
            System.out.println("----Queue is empty----");
            return -1;
        }
    }
    public int PEEK()
    {
        if(start!=-1)
        {
            return arr[start];
        }
        else
        {
            return -1;
        }
    }
    public int size()
    {
        return end+1;
    }
    public void show()
    {
        if(start!=-1&&end!=-1 && start<=end)
        {
            for(int i=start;i<=end;i++)
            {
                System.out.print(arr[i]+" ");
            }
            System.out.println();
        }  

    }
}
public class Main
{
    public static void main(String[] args) {
        queue q = new queue();
        q.PUSH(1);
        q.PUSH(2);
        q.PUSH(3);
        q.PUSH(4);
        System.out.println(q.PEEK()); //1
        System.out.println(q.size()); //4
        q.show();                     // 1 2 3 4
        q.PUSH(6);    
        q.PUSH(7);               // ----Queue is Full-----
        q.show();                     //1 2 3 4 6
        q.POP();
        q.POP();
        q.POP();
        q.POP();
        q.POP();
        q.POP();                        //----Queue is empty----
        q.show();                       // 
    }
}
*/

//6.implement stack using Queues
//7.implement Queues using stack

//8.Check for Balanced Paranthesis
/* 
import java.util.*;
public class Main
{
    public static void main(String[] args) 
    {
        String str="[]{([])}";
        System.out.println(Optimal(str));
    }
    static boolean Optimal(String str)
    {
        Stack arr = new Stack();
        for(char i:str.toCharArray())
        {
            if(i=='('||i=='{'||i=='[')
            {
                arr.push(i);
            }
            else
            {
                if(arr.isEmpty())
                {
                    return false;
                }
                char ch=(char)arr.pop();
                if( (i=='}'&&ch=='{') || (i==']'&&ch=='[') || (i==')'&&ch=='(') )
                {
                    continue;
                }
                else
                {
                    return false;
                }
            }
        }
        return arr.isEmpty();
    }
}
*/

//9.Next Greater Element (NO CRICULAR)
/* 
import java.util.Stack;
public class Main 
{
    public static void main(String[] args) {
        int arr1[]={3,10,4,2,1,2,6,1,7,2,9};
                  //10 -1 6 6 2 6 7 7 9 9 -1 
        int temp1[]=Brute(arr1);
        for(int i:temp1)
        {
            System.out.print(i+" ");//10 -1 6 6 2 6 7 7 9 9 -1 
        }

        System.out.println();

        int arr2[]={3,10,4,2,1,2,6,1,7,2,9};
        int temp2[]=Optimal(arr2);
        for(int i:temp1)
        {
            System.out.print(i+" ");//10 -1 6 6 2 6 7 7 9 9 -1 
        }

        System.out.println();

        int arr3[]={4,12,5,3,1,2,5,3,1,2,4,6};
        int temp3[]=Optimal(arr3);
        for(int i:temp3)
        {
            System.out.print(i+" ");//12 -1 6 5 2 5 6 4 2 4 6 -1 
        }

    }
    static int[] Brute(int arr[])
    {
        int NGE[]=new int[arr.length];
        for(int i=0;i<arr.length;i++)
        {
            int flag=0;
            for(int j=i+1;j<arr.length;j++)
            {
                if(arr[j]>arr[i])
                {
                    flag=-111;
                    NGE[i]=arr[j];
                    break;
                }
            }
            if(flag==0)
            {
                NGE[i]=-1;
            }
        }
        return NGE;
    }
    static int[] Optimal(int arr[])
    {
        Stack <Integer> temp1 = new Stack<>();
        int len=arr.length;
        int temp2[] = new int[len];

        for(int i=len-1;i>=0;i--)
        {
            while (temp1.isEmpty()==false&&temp1.peek()<=arr[i])
            {
                temp1.pop();    
            }
            if(temp1.isEmpty()==false)
            {
                temp2[i]=temp1.peek();
            }
            else
            {
                temp2[i]=-1;
            }
            temp1.push(arr[i]);
        }
        return temp2;
    }
}
*/


//10.Next Greater Element (WITH CRICULAR)
/* 
import java.util.Stack;
public class Main 
{
    public static void main(String[] args) 
    {
        int arr3[]={2,10,12,1,11};
        int temp3[]=Optimal(arr3);
        for(int i:temp3)
        {
            System.out.print(i+" ");// 10 12 -1 11 12
        }
    }
    static int[] Optimal(int arr[])
    {
        Stack <Integer> temp1 = new Stack<>();
        int len=arr.length;
        int temp2[] = new int[len];
        // 2,10,12,1,11-2,10,12,1,11
        for(int i=len*2-1;i>=0;i--)
        {
            while (temp1.isEmpty()==false&&temp1.peek()<=arr[i%len])
            {
                temp1.pop();    
            }
            if(i<len)
            {
                if(temp1.isEmpty()==false)
                {
                    temp2[i]=temp1.peek();
                }
                else
                {
                    temp2[i]=-1;
                }
            } 
            temp1.push(arr[i%len]);
        }
        return temp2;
    }
}
*/
//11.trapping Rainwater
/* 
import java.util.ArrayList;
public class Main 
{
    public static void main(String[] args) 
    {
         // time Complexity : O(N)+O(N)+O(N)
         // space Complexity: O(N)
         int arr1[]={0,1,0,2,1,0,1,3,2,1,2,1};
         ArrayList<Integer>temp1=Brute(arr1);
         for(Integer i: temp1)
         {
            System.out.print(i+" ");
         }
         System.out.println();

         int arr2[]={0,1,0,2,1,0,1,3,2,1,2,1};
         System.out.println(Optimal(arr2));

    }
    static ArrayList<Integer> Brute(int arr[])
    {
        int prefix[]=new int[arr.length];
        int suffix[]=new int[arr.length];
        int max=0;
        for(int i=0;i<arr.length;i++)
        {
            if(max<arr[i])
            {
                max=arr[i];
            }
            prefix[i]=max;
        }
        max=0;
        for(int i=arr.length-1;i>=0;i--)
        {
            if(max<arr[i])
            {
                max=arr[i];
            }
            suffix[i]=max;
        }
        ArrayList<Integer>temp=new ArrayList<>();
        for(int i=1;i<arr.length-1;i++)
        {
            int t=Math.min(prefix[i],suffix[i])-arr[i];
            temp.add(t);
        }
        return temp;
    }
    static int Optimal(int[] height) 
    {
        int n = height.length;
        int left = 0, right = n - 1;
        int res = 0;
        int maxLeft = 0, maxRight = 0;
        while (left <= right) 
        {
            if (height[left] <= height[right])
            {
                if (height[left] >= maxLeft) 
                {
                    maxLeft = height[left];
                } else 
                {
                    res += maxLeft - height[left];
                }
                left++;
            } else {
                if (height[right] >= maxRight) {
                    maxRight = height[right];
                } else {
                    res += maxRight - height[right];
                }
                right--;
            }
        }
        return res;
    }
}
*/

//12.Remove K digts using monotonic stack algorithm
/* 
import java.util.Stack;

public class Main 
{
    public static void main(String[] args) 
    {
        String str="1432219";
        int remove_K_digit=3;
        Stack<Character> stack = new Stack<>();
        int removecount=0;
        for(int i=0;i<str.length();i++)
        {
            char ch=str.charAt(i);
            if(stack.isEmpty())
            {
                stack.add(ch);
            }
            else
            {
                while(removecount<remove_K_digit && !stack.isEmpty() && stack.peek() > ch )
                {
                    stack.pop();
                    removecount++;
                }
                stack.push(ch);
            }
        }
        while(removecount<remove_K_digit && !stack.isEmpty())
        {
            stack.pop();
            removecount++;
        }
        str="";
        while(!stack.isEmpty())
        {
            str=stack.pop()+str;
        }
        int nonzeroIndex=0;
        for(int i=0;i<str.length();i++)
        {
            if(str.charAt(i)!='0')
            {
                break;
            }
            nonzeroIndex++;
        }
        String result="";
        for(int i=nonzeroIndex;i<str.length();i++)
        {
            result+=str.charAt(i);
        }
        if(result=="")
        {
            System.out.println("0");
        }
        else
        {
            System.out.println(result);
        }
    }
}
*/

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//----------------------------------8.Greedy Algoithm-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//1.assign cookies
//greed -- N children
//s     -- parent to given cookies to children 
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args) 
    {
        int greed1[]={1,5,3,3,4};
        int s[]={4,2,1,2,1,3};
        System.out.println(assign_cookies1(greed1, s)); //3
        System.out.println(assign_cookies2(greed1, s)); //3
        
    }
    static int assign_cookies1(int greed[],int s[])
    {
        Arrays.sort(greed); // 1 3 3 4 5 --- children
        Arrays.sort(s);     // 1 1 2 2 3 4   --- cookies
        int first_pointer=0,second_pointer=0;
        while(second_pointer<s.length)
        {
            if(greed[first_pointer]<=s[second_pointer])
            {
                first_pointer++;
            }
            second_pointer++;
        }
        return first_pointer;

    }
    static int assign_cookies2(int greed[],int s[])
    {
        Arrays.sort(greed); // 1 3 3 4 5 --- children
        Arrays.sort(s);     // 1 1 2 2 3 4   --- cookies
        int first_pointer=0,second_pointer=0;
        while( first_pointer<greed.length && second_pointer<s.length )
        {
            if(greed[first_pointer]<=s[second_pointer])
            {
                first_pointer++;
                second_pointer++;
            }
            else
            {
                second_pointer++;
            }
        }
        return first_pointer;

    }
}
*/
//2.lemonade change
//At a lemonade stand, each lemonade costs $5.
/* 
public class Main
{
    public static void main(String[] args)
    {
        int bills[]={5,5,5,10,20};
        System.out.println(lemonadeChange(bills)); //true
    }
    static boolean lemonadeChange(int[] bills)
    {
        int five=0,ten=0;
        for(int i=0;i<bills.length;i++)
        {
            if(bills[i]==5)
            {
                five++;
            }
            else if(bills[i]==10)
            {
                if(five>=1)
                {
                    five--;
                    ten++;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                if(five>=1&&ten>=1)
                {
                    five--;
                    ten--;
                }
                else if(five>=3)
                {
                    five=five-3;
                }
                else
                {
                    return false;
                }
            }
        }
        return true;   
    }
} 
*/

//3.short job first(sjf)
//scheduling policy that select the waiting process with the smallest excution tume to excute next
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args) 
    {
        int bt[]={4,3,7,1,2};
        int len=bt.length;
        System.out.println(SJF(bt, len)); //20
    }
    static int SJF(int arr[],int len)
    {
        //---------------------------
        //   4    3    7    1    2
        //   p4   p3   p5   p1   p2
        //  0------1------3------6-------10-------17
        //     p1     p2    p3      p4       p5
        Arrays.sort(arr); 
        // 1 2 3 4 7
        // 1 3 6 10
        int sum=0,waiting_time=0;
        for(int i=0;i<arr.length-1;i++)
        {
            sum+=arr[i]; // 1 3 6 10  
            waiting_time+=sum;//0+1 1+3 4+6 10+10  
        }
        return waiting_time;
    }
}
*/

//4.jump game
/* 
public class Main 
{
    public static void main(String[] args) {
        int arr1[]={2,3,1,1,4};
        System.out.println(JG1(arr1));// true
        int arr2[]={2,3,1,1,4};
        System.out.println(JG2(arr2));//true
    }
    
    static boolean JG1(int arr[])
    {
        int finalposition=arr.length-1;
        // {2,3,1,1,4};
        //  0 1 2 3 4
        for(int i=arr.length-2;i>=0;i--)
        {
            if(i+arr[i]>=finalposition)   4>=4 2+1>=3 1+3>=2 2+0>=2
            {
                finalposition=i;    fp=4  fp=3  fp=2  fp=2    f=0
            }
        }
        return finalposition==0;
    }
    static boolean JG2(int[] nums)
    {
        int max=0;
        for(int i=0;i<nums.length;i++)
        {
            if(i>max)
            {
                return false;
            }
            max=Math.max(max,nums[i]+i);
        }
        return true;
    }
}
*/

//5. job sequencing problem
/* 
public class Main 
{
    public static void main(String[] args) 
    {
            //  id       deadline         profit  
            //  6           2               80
            //  3           6               70          
            //  4           6               65
            //  2           5               60
            //  5           4               25
            //  8           2               22
            //  1           4               20
            //  7           2               10

            //  0  1  2  3  4  5   6   deadline
            // -1 -1 -1 -1 -1 -1  -1    arr for id 
            //     6                     2  -  6 
            //                     3     6  -  3
            //                  6        6  -  4
            //               2           5  -  2 
            //            5              4  -  5 
            //        8                  2  -  8
            //  1                        4  -  1
            //                           2  -  7 (space execited)
            //  1 3 8 5 2 6 3

    }
}
*/

//6.Meeting in one room
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int stating_time[]={0,3,1,5,5,8};
        int ending_time []={5,4,2,9,7,9};    
        sort(stating_time, ending_time);
        
        int ctr=1,end_time=ending_time[0];
        for(int i=1;i<ending_time.length;i++)
        {
            if(end_time<stating_time[i])
            {
                ctr++;
                end_time=ending_time[i];
            }
        }
        System.out.println(ctr); //4


    }
    static void sort(int s[],int e[])
    {
        for(int i=0;i<e.length-1;i++)
        {
            for(int j=0;j<e.length-i-1;j++)
            {
                if(e[j]>e[j+1])
                {
                    int temp=e[j];
                    e[j]=e[j+1];
                    e[j+1]=temp;
                    temp=s[j];
                    s[j]=s[j+1];
                    s[j+1]=temp;
                }
            }
        }
        return;
    }

}
*/

//7.Non Overlapping intervals
/* 
public class Main 
{
    public static void main(String[] args) {
        int intervals[][]=
        {
            {0,5},
            {3,4},
            {1,2},
            {5,9},
            {5,7},
            {7,9}
        };
        sort(intervals);
        int ctr=1,lasttime=intervals[0][1];
        for(int i=1;i<intervals.length;i++)
        {
            if(lasttime<=intervals[i][0])
            {
                ctr++;
                lasttime=intervals[i][1];
                System.out.println(intervals[i][0]+" "+intervals[i][1]);
            }
        }
        System.out.println(ctr); // 4
        System.out.println(intervals.length-ctr); // 2
    }
    static void sort(int arr[][])
    {
        int len=arr.length;
        for(int i=0;i<len-1;i++)
        {
            for(int j=0;j<len-i-1;j++)
            {
                if(arr[j][1]>arr[j+1][1])
                {
                    int temp=arr[j][1];
                    arr[j][1]=arr[j+1][1];
                    arr[j+1][1]=temp;

                    temp=arr[j][0];
                    arr[j][0]=arr[j+1][0];
                    arr[j+1][0]=temp;
                }
            }
        }
    }
}
*/    

//8.minimum pf platform required for a railway
/* 
import java.util.Arrays;

public class Main 
{
    public static void main(String[] args)
    {
        int[] arr ={900,945,955,1100,1500,1800};
		int[] dep={920,1200,1130,1150,1900,2000};
        int len=arr.length;
        System.out.println(countPlatforms(len, arr, dep)); //3
        System.out.println(findPlatform(arr, dep, len));//3  
    }
    static int countPlatforms(int n,int arr[],int dep[])
    {
        int ans=1; //final value
        for(int i=0;i<=n-1;i++)
        {
            int count=1; // count of overlapping interval of only this   iteration
            for(int j=i+1;j<=n-1;j++)
            {
                if((arr[i]>=arr[j] && arr[i]<=dep[j]) || (arr[j]>=arr[i] && arr[j]<=dep[i]))
                {
                    count++;
                }
            }
            ans=Math.max(ans,count); //updating the value
        }
        return ans;
    }
    static int findPlatform(int arr[], int dep[], int n)
    {
        Arrays.sort(arr); 
        Arrays.sort(dep); 
  
        int plat_needed = 1, result = 1; 
        int i = 1, j = 0; 
  
        while (i < n && j < n) { 
        
            if (arr[i] <= dep[j]) { 
                plat_needed++; 
                i++; 
            } 
  
            else if (arr[i] > dep[j]) { 
                plat_needed--; 
                j++; 
            } 
  
             if (plat_needed > result) 
                result = plat_needed; 
        } 
  
        return result; 
    }
}
*/

//9.valid parenthesis string
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        //Brute
        //time complexity  : O(3^n)
        //space complexity : O(n)
        String str="(*()";    
        System.out.println(Brute(str.toCharArray(), 0, 0));//true
        
        //Optimal
        System.out.println(Optimal(str));
    }   
    static boolean Brute(char str[],int i,int ctr)
    {
        if(ctr<0)
        {
            return false;
        }
        if(i==str.length)
        {
            return ctr==0;
        }
        if(str[i]=='(')
        {
            return Brute(str, i+1, ctr+1);
        }
        else if(str[i]==')')
        {
            return Brute(str, i+1, ctr-1);
        }
        else
        {   //              (            ||          )            ||      empty
            return Brute(str, i+1, ctr+1)||Brute(str, i+1, ctr-1) || Brute(str, i+1, ctr);
        }
    }
    static boolean Optimal(String s)
    {
        int leftMin = 0, leftMax = 0;
        for (char c : s.toCharArray()) 
        {
            if (c == '(')
            {
                leftMin++;
                 leftMax++;
            }
            else if (c == ')')
            {
                leftMin--;
                leftMax--;
            }
            else
            {
                leftMin--;
                leftMax++;
            }
            if (leftMax < 0) return false;
            if (leftMin < 0) leftMin = 0;
        }
        return leftMin == 0;
    }
}
*/


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//----------------------------------9.Bit manipulationa and maths-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//1.minimum bit flips to convert a number
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int num1=10,num2=7;
        // 10 ----> 1 0 1 0
        // 7  ----> 0 1 1 1
        //---------------------
        //          1 1 0 1
        int result=num1^num2;
        //counting set bit
        int ctr=0;
        while (result>0)
        {
            if(result%2==1)
            {
                ctr++;
            }
            result=result/2;
        }
        System.out.println(ctr); //3

        //2.method 2
        result=num1^num2;
        ctr=0;
        while(result>0)
        {
            if( (result&1)==1 )
            {
                ctr++;
            }
            result=result>>1;
        }

        System.out.println(ctr);//3
    }
}
*/

//2.powet set (print all subset)
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int nums[]={ 1, 2, 3};
        //           0  1  2

        //  2    1    0
        // ------------ 
        //  0    0    0      []
        //  0    0    1      [1]
        //  0    1    0      [2]
        //  0    1    1      [1,2]
        //  1    0    0      [3]
        //  1    0    1      [1,3]
        //  1    1    0      [2,3]
        //  1    1    1      [1,2,3]

        int len=nums.length;
        int subset=1<<len;
        
        for(int i=0;i<=subset-1;i++)
        {
            System.out.print("[");
            for(int j=0;j<=len-1;j++)
            {
                if( (i&(1<<j))!=0)
                {
                    System.out.print(nums[j]+" ");
                }
            }  
            System.out.println("]"); 
        }
    }
}
*/

//3.single number I
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr[]={1,2,2,33,33,1,2};
        int result=0;
        for(int i:arr)
        {
            result=result^i;
        }
        System.out.println(result);    //2
    }    
}
*/

//4.single number II
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr[]={1,1,1,2,2,2,77,5,5,5,3,3,3};
        int one=0,two=0;
        for(int i:arr)
        {
            one=(one^i) & ~(two);
            two=(two^i) & ~(one);
        }   
        System.out.println(one);//7
    }
}
*/

//5.xor of Nth number
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        // N=1            1     1
        // N=2           1^2    3
        // N=3                  0
        // N=4                  4
        
        // N=5                  1
        // N=6                  7
        // N=7                  0
        // N=8                  8
        
        // N=9                  1

        int N=9;
        if(N%4==1)
        {
            System.out.println(1);
        }
        else if(N%4==2)
        {
            System.out.println(N+1);
        }
        else if(N%4==3)
        {
            System.out.println(0);
        }
        else
        {
            System.out.println(N);
        }

    }
}
*/

//6.divide two integer without using Multiplication and Division Operators
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        System.out.println(Brute(22, 3));  //7 
    }
    static int Brute(int dividend,int divisor)
    {
        int ans=0,ctr=0;
        while(ans<dividend)
        {
            ans=ans+divisor;
            if(ans>dividend)
            {
                break;
            }
            System.out.print(ans+"-");
            ctr++;
        }
        return ctr;
    }
}
*/
//maths
//7.print prime factor of a number
/* 
public class Main 
{
    public static void main(String[] args) {
        int num=35;// 5*7
        for(int i=1;i<=num;i++)
        {
            System.out.print(isPrime(i)==true && num%i==0 ?i+" ":""); // 5 7
        }
        PrintPrimeFactors(num);// 5 7

    }
    static void PrintPrimeFactors(int num)
    {
        for(int i=2;i*i<=num;i++)
        {
            if(num%i==0)
            {
                System.out.print(i+" ");
                while (num%i==0)
                {
                     num=num/i;   
                }
            }
        }
        if(num>1){System.out.println(num);}
        return;
    }
}
*/


//8.print divisors of a number
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int num=36;
        //1*36=36
        //2*18=36
        //3*12=36
        //4*9=36
        //6*6=36
        for(int i=1;i*i<=num;i++)
        {
            if(num%i==0)
            {
                System.out.print(i+" ");
                if(num/i!=i)
                {
                    System.out.print(num/i+" ");//1 36 2 18 3 12 4 9 6 
                }
            }
        }
    }
}
*/
//9. Sieve of Eratosthenes given a number N,print all prime number till N
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int num=25;
        Brute(num); //2 3 5 7 11 13 17 19 23  
        System.out.println();

        Sieve_Eratosthenes(num);
    }
    static void Brute(int num)
    {
        for(int i=1;i<=num;i++)
        {
            System.out.print(Prime(i)==true?i+" ":"");
        }
    }
    static boolean Prime(int num)
    {
        if(num<=1){return false;}
        for(int i=2;i*i<=num;i++)
        {
            if(num%i==0)
            {
                return false;
            }
        }
        return true;
    }
    static int Sieve_Eratosthenes(int num)
    {
        int arr[]=new int[num],ctr=0;
        for(int i=2;i<num;i++)
        {
            arr[i]=1;
        }
        for(int i=2;i*i<=num;i++)
        {
            if(arr[i]==1)
            {
                for(int j=i*i;j<num;j=j+i)
                {
                    arr[j]=0;
                }
            }
        }
        for(int i=2;i<num;i++)
        {
            if(arr[i]==1)
            {
                System.out.print(i+" ");
                ctr++;
            }
        }
        return ctr;
    }
}
*/

//10.pow(x,e)
/* 
public class Main 
{
    public static void main(String[] args) {
        int x=3,e=3,ans=1;
        pow1(x, e, ans);//27
        pow2(x, e, ans);//27
       double x1 = 2.00000;
       int  n1 = 10;
       myPow(x1, n1);//1024.0
    }
    static void pow1(int x,int e,int ans)
    {
        while(e!=0)
        {
            ans=ans*x;
            e--;
        }
        System.out.println(ans);//100
    }
    static void pow2(int x,int e,int ans)
    {
        while (e>0)
        {
            if(e%2==1)
            {
                ans=ans*x;
                e--;
            }   
            else
            {
                x=x*x;
                e=e/2;
                
            }
        }   
        System.out.println(ans);
    }
    static void myPow(double x, int n) 
    {
        double ans = 1.0;
        long nn = n;
        if (nn < 0) nn = -1 * nn;
        while (nn > 0) 
        {
          if (nn % 2 == 1) 
          {
            ans = ans * x;
            nn = nn - 1;
          } 
          else 
          {
            x = x * x;
            nn = nn / 2;
          }
        }
        if (n < 0) ans = (double)(1.0) / (double)(ans);
        System.out.println(ans);
    }
}
*/

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//----------------------------------10.two pointer slinding window-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//1.maximum points for can obtain from cards (leedoce:1423)
//In one step, you can take one card from the beginning or from the end of the row. You have to take exactly k cards.
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr[]={6,2,3,4,7,2,1,7,1};
        int k=4;
        //   6 2 3 4 -- 0       ==> 15
        //   6 2 3   -- 1       ==> 12
        //   6 2     -- 7 1     ==> 16 ==> max
        //   6       -- 7 1 1   ==> 15
        //   0       -- 2 1 7 1 ==> 11
        System.out.println(maximum(arr, k)); //16
    }
    static int maximum(int arr[],int k)
    {
        int leftsum=0,rightsum=0,maxsum=0;
        for(int i=0;i<k;i++)
        {
            leftsum=leftsum+arr[i];
        }
        maxsum=leftsum;
        int len=arr.length-1;
        for(int i=k-1;i>=0;i--)
        {
            leftsum=leftsum-arr[i];
            rightsum=rightsum+arr[len--];
            maxsum=Math.max(maxsum, leftsum+rightsum);
        }
        return maxsum;
    }
}
*/

//2.longest substring without repeating characters
/* 
import java.util.HashMap;
public class Main 
{
    public static void main(String[] args) 
    {
            String str1="cadbzabcd";
            Brute(str1);//Max String:cadbz Maxlength:5
            System.out.println(Optimal(str1)); //5
    }
    static void Brute(String str)
    {
        String maxstr="";
        int max=0;
        for(int i=0;i<str.length();i++)
        {
            String temp="";
            int arr[]=new int[52];
            for(int j=i;j<str.length();j++)
            {
                char ch=str.charAt(j);
                if(ch>='a'&&ch<='z')
                {
                    if(arr[ch-'a']==0)
                    {
                        temp+=ch;
                    }
                    else
                    {
                        break;
                    }
                    arr[ch-'a']++;
                }
                else
                {
                    if(arr[ch-'a']==0)
                    {
                        temp+=ch;
                    }
                    else
                    {
                        break;
                    }
                    arr[ch-'A'+26]++;
                }
            }
            if(max<temp.length())
            {
                max=temp.length();
                maxstr=temp;
            }
            System.out.println(temp);
        }
        System.out.println("Max String:"+maxstr+" Maxlength:"+max);
    }
    static int Optimal(String s)
    {
        // cadbzabcd
        // lr
        HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
        int left = 0, right = 0;
        int n = s.length();
        int len = 0;
        while (right < n) 
        {
            if (map.containsKey(s.charAt(right))) 
            {
                left = Math.max(map.get(s.charAt(right)) + 1, left);
            }
            map.put(s.charAt(right), right); // key value
            len = Math.max(len, right - left + 1);
            right++;
        }
        return len;
    }
}
*/

//3.max consective ones III (same as longest subarray with at most k zeros)
/* 
public class Main 
{
    public static void main(String[] args)
    {
        int arr1[]={1,1,1,0,0,0,1,1,1,1,0};
        int k1=2;
        System.out.println(Brute(arr1, k1)); //6

        System.out.println(Optimal(arr1, k1));//6

    }
    static int Brute(int arr[],int k)
    {
        int len=arr.length;
        int max=0;
        for(int i=0;i<len;i++)
        {
            int zero=0;
            for(int j=i;j<len;j++)
            {
                if(arr[j]==0){zero++;}
                if(zero<=k)
                {
                    max=Math.max(max, j-i+1);
                }
                else
                {
                    break;
                }
            }
        }
        return max;
    }
    static int Optimal(int arr[],int k)
    {
        int left=0,right=0;
        int ZeroCount=0,Maxlen=0;
        while(right<arr.length)
        {
            if(arr[right]==0)
            {
                ZeroCount++;
            }
            if(ZeroCount<=k)
            {
                Maxlen=Math.max(Maxlen, right-left+1);
            }
            if(ZeroCount>k)
            {
                if(arr[left]==0)
                {
                    ZeroCount--;
                }
                left++;
            }
            right++;
        }
        return Maxlen;
    }
}
*/

//4.fruit into basket
// to store fruit into two basket with unique fruit
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args) {
        int fruit1[]={3,3,3,1,2,1,1,2,3,3,4};
        System.out.println(Brute(fruit1));//5
    }
    static int Brute(int arr[])
    {
        int max=0;
       for(int i=0;i<arr.length;i++)
       {
         Set<Integer>temp=new HashSet<>();
         for(int j=i;j<arr.length;j++)
         {
            temp.add(arr[j]);
            if(temp.size()<=2)
            {
                max=Math.max(max, j-i+1);
            }
            else
            {
                break;
            }
         }
       }   
       return max;
    }
}
*/

//5.Longest substring with at most k distinct characters
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args) 
    {
        String str="aaabbbccd";
        int k=2;
        System.out.println(Optimal(str,k));   //6
    } 
    static int Optimal(String str,int k)
    {
        Map<Character,Integer>map=new HashMap<>();
        int left=0,right=0;
        int maxcount=0;
        while(right<str.length())
        {
            map.put(str.charAt(right),map.getOrDefault(str.charAt(right),0)+1);
            while (map.size()>k)
            {
                map.put( str.charAt(left),map.get(str.charAt(left))-1 ); 
                if(map.get(str.charAt(left))==0)
                {
                    map.remove(str.charAt(left));
                }  
                left++;
            }
            if(map.size()<=k)
            {
                maxcount=Math.max(maxcount,right-left+1);
            }
            right++;
        }
        return maxcount;
    }
}
*/

//6.Number of Substrings Containing All Three Characters
/* 
public class Main 
{
    public static void main(String[] args) 
    {
         String str="abcabc";  
        //  The substrings containing at least one occurrence of the characters a, b and c are
        //   "abc", "abca", "abcab", "abcabc", "bca", "bcab", "bcabc", "cab", "cabc" and "abc" 
         System.out.println(Brute(str)); //10
    }
    static int Brute(String str)
    {
        int ctr=0;
        int last[]=new int[3];
        for(int i=0;i<3;i++)
        {
            last[i]=-1;
        }
        for(int i=0;i<str.length();i++)
        {
            last[str.charAt(i)-'a']=i;
            if(last[0]!=-1 && last[1]!=-1 && last[2]!=-1)
            {
                ctr=ctr+(1+Math.min(last[0],Math.min(last[1], last[2])));
            }
        }
        return ctr;
    }
}
*/

//7.Binary Subarrays With Sum is less than equal to goal
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr[]={1,0,0,1,1,0},goal=2;
        int left=0,right=0;
        int sum=0,ctr=0;

        while (right<arr.length) 
        {
            sum=sum+arr[right];
            while (sum>goal)
            {
                sum=sum-arr[left];
                left++;    
            }    
            ctr=ctr+(right-left+1);
            System.out.print(right-left+1+" ");//1 2 3 4 4 5 
            right++;
        }
        System.out.println();
        System.out.println(ctr);//19

    }
    
}
*/
//8.Count number of Nice subarrays in odd
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr[]={3,3,2,3,3,},k=3;
        for(int i=0;i<arr.length;i++)
        {
            arr[i]=arr[i]%2==0?0:1;
        }
        int left=0,right=0;
        int sum=0,ctr=0;

        while (right<arr.length) 
        {
            sum=sum+arr[right];
            while (sum>k)
            {
                sum=sum-arr[left];
                left++;    
            }    
            ctr=ctr+(right-left+1);
            System.out.print(right-left+1+" ");//1 2 3 4 4 
            right++;
        }
        System.out.println();
        System.out.println(ctr);//14
    }
}
*/


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//----------------------------------11.string------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//1.Longest Palindromic Sub-string (LeetCode 5)
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        System.out.println(Longest_Palindromic("babad"));//bab
    }
    static String Longest_Palindromic(String str)
    {
        if (str.length() <= 1)
        return str;
  
      String LPS = "";
  
      for (int i = 1; i < str.length(); i++) {
  
        // Consider odd length
        int low = i;
        int high = i;
        while(str.charAt(low) == str.charAt(high)) {
          low--;
          high++;
  
          if (low == -1 || high == str.length())
            break;
        }
  
        String palindrome = str.substring(low+1, high);
        if (palindrome.length() > LPS.length()) {
          LPS = palindrome;
        }
  
        // Consider even length
        low = i-1;
        high = i;
        while(str.charAt(low) == str.charAt(high)) {
          low--;
          high++;
  
          if (low == -1 || high == str.length())
            break;
        }
  
        palindrome = str.substring(low+1, high);
        if (palindrome.length() > LPS.length()) {
          LPS = palindrome;
        }
      }
  
      return LPS;
    }
}
*/
//2.First unique character in a String
/*
public class Main 
{
    public static void main(String[] args) 
    {
        System.out.println(function("JAVAJ"));//2
    }
    static int function(String str)
    {
        int arr[]=new int[52];
        for(int i=0;i<str.length();i++)
        {
            char ch=str.charAt(i);
            if(ch>='a'&&ch<='z')
            {
                arr[ch-'a']++;
            }
            else
            {
                arr[ch-'A'+26]++;
            }
        }
        for(int i=0;i<str.length();i++)
        {
            char ch=str.charAt(i);
            if(ch>='a'&&ch<='z')
            {
                if(arr[ch-'a']==1)
                {
                    return i;
                }
            }
            else
            {
                if(arr[ch-'A'+26]==1)
                {
                    return i;
                }
            }
        }
        return -1;
    }
} 
*/
//3.Determine if two strings/phrases are valid Anagrams 
/*
public class Main 
{
    public static void main(String[] args) 
    {
        System.out.println(fun("listen", "silent")); // true
        System.out.println(fun("anagram", "naragram")); // true
    }
    static boolean fun(String str1,String str2)
    {
        if(str1.length()!=str2.length())
        {
            return false;
        }
        int arr[]=new int[26];
        for(char i:str1.toCharArray())
        {
            arr[i-'a']++;
        }
        for(int i=0;i<str2.length();i++)
        {
            char ch=str2.charAt(i);
            if(arr[ch-'a']<=0)
            {
                return false;
            }
        }
        return true;
    }
}
*/
//4.reverse letter only
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        char ch[]="a-b C = D Rf!".toCharArray();
        fun(ch);
        for(int i=0;i<ch.length;i++)
        {
            System.out.print(ch[i]);//f-R D = C ba!
        }   
    }
    static void fun(char ch[])
    {
        int s=0,e=ch.length-1;
        while (s<=e)
        {
            if(!Character.isLetter(ch[s]))
            {
                s++;
            }
            else if(!Character.isLetter(ch[e]))
            {
                e--;
            }
            else
            {
                char temp=ch[s];
                ch[s]=ch[e];
                ch[e]=temp;
                s++;
                e--;
            }
        }
    }
}
*/
//5.decode ways A-1 ... Z-26 AA-27 .. AZ-52
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        System.out.println(numDecodings("226"));//3
        //Explanation: "226" could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).
    }
    static int numDecodings(String s) 
    {
        int n = s.length();
        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = s.charAt(0) == '0' ? 0 : 1;
    
        for (int i = 2; i <= n; i++) {
          int oneDigit = Integer.valueOf(s.substring(i - 1, i));
          int twoDigits = Integer.valueOf(s.substring(i - 2, i));
    
          if (oneDigit >= 1)
            dp[i] += dp[i - 1];
    
          if (twoDigits >= 10 && twoDigits <= 26)
            dp[i] += dp[i - 2];
        }
    
        return dp[n];
      }
}
*/


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//----------------------------------12.DP------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//climbing stairs
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int num=4;
        int one=1,two=1;
        for(int i=2;i<=num;i++)
        {
            int temp=one+two;
            one=two;
            two=temp;
        }
        System.out.println(two);
    }
}
*/
//frog jump
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int height[]={30,10,60,10,60,50};
        System.out.println(frog_jump(height));
    }
    static int frog_jump(int height[])
    {
        int n=height.length;
        int prev=0;
       int prev2=0;
       for(int i=1;i<n;i++){
           
           int jumpTwo = Integer.MAX_VALUE;
           int jumpOne= prev + Math.abs(height[i]-height[i-1]);
           if(i>1)
             jumpTwo = prev2 + Math.abs(height[i]-height[i-2]);
         
           int cur_i=Math.min(jumpOne, jumpTwo);
           prev2=prev;
           prev=cur_i;
             
       }
       return prev;
    }
    
}
*/
//maximum sum of non-adjacent element
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr[] = {2, 1, 4, 9};
        int n = arr.length;
        int result = solve(n, arr);
        System.out.println(result);//11
        
    }   
    static int solve(int n, int[] arr) 
    {
        int prev = arr[0];
        int prev2 = 0;
        for (int i = 1; i < n; i++) 
        {
            int pick = arr[i];
            if (i > 1)
                pick += prev2;

            int nonPick = prev;
            int cur_i = Math.max(pick, nonPick);
            prev2 = prev;
            prev = cur_i;
        }
        return prev;
    }
}
*/
//best time to buy and sell stock I
/* 
public class Main 
{
    public static void main(String[] args)
    {
        int arr[]={7,1,5,3,6,4};
        System.out.println(Brute(arr));
    }
    static int Brute(int arr[])
    {
         int min=arr[0],max=0;
         int start=arr[0],end=0;
         for(int i=1;i<arr.length;i++)
         {
            if(arr[i-1]-min>max)
            {
                end=arr[i-1];
                max=arr[i-1]-min;
            }
            if(min>arr[i])
            {
                start=arr[i];
                min=arr[i];
            }
         }
         System.out.println(start+" "+end); // 1 6
         return max;
    }
} 
*/



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//1.unique paths
/*
public class Main 
{
    public static void main(String[] args) 
    {
        System.out.println(Count(0, 0, 3, 3));//6
    }
    static int Count(int i,int j,int m,int n)
    {
        if(i==(n-1)&&j==(m-1))
        {
            return 1;
        }
        if(i>=n||j>=m)
        {
            return 0;
        }
        return Count(i+1, j, m, n)+Count(i, j+1, m, n);
        
    }
}
*/

//1.unique paths
/* 
public class java
{
    public static void main(String[] args) 
    {
        //Time complexity:exp solution
        System.out.println(unique_path1(0, 0, 3,3)); //6
        System.out.println(unique_path2(2, 3));//3
    }
    static int unique_path1(int i,int j,int r,int c)
    {
        if(i==r-1&&j==c-1)
        {
            return 1;
        }
        if(i>=r||j>=c)
        {
            return 0;
        }
        return unique_path1(i+1, j, r, c)+unique_path1(i, j+1, r, c);
    }
    static int unique_path2(int r,int c)
    {
        // 0 0 0  
        // 0 0 0
        
        // right-->right-->down   3c2-->right    3c1-->down   ans will be a m+n-2cm-1 or m+n-2cn-1
        // down-->right-->right
        // right-->down-->right

        int N=r+c-2;
        int R=c-1;
        int result=1;
        for(int i=1;i<=R;i++) 
        {
            result=result*(N+i-R)/i;
        }

        return result; 
    }
}
*/
//2.next permutation
/* 
public class java 
{
    public static void main(String[] args) 
    {
        // 1 3 5 4 2 ---> 1 4 2 3 5
        // 1.arr[i]<arr[i+1]==(index1=1)
        // 2.arr[len-2]>arr[len-1] == (index2=len-2)
        // 3.swap(arr[index1],arr[index2])
        // 4.reverse(index1,len)
        
        int arr[]={1,3,5,4,2};
        next_permutation(arr);
        for(int i:arr)
        {
            System.out.print(i+" ");//1 4 2 3 5 
        }
        System.out.println();
        next_permutation(arr);
        for(int i:arr)
        {
            System.out.print(i+" ");//1 4 2 5 3
        }

    }
    static void next_permutation(int arr[])
    {
        if(arr.length<=1)
        {
            return;
        }
        int i=arr.length-2;
        while(i>=0&&arr[i]>=arr[i+1])
        {
            i--;
        }
        if(i>=0)
        {
            int j=arr.length-1;
            while (arr[j]<=arr[i])
            {
                j--;     
            }
            swap(arr, i, j);
        }
        reverse(arr, i+1, arr.length-1);
    }
    static void swap(int arr[],int i,int j)
    {
        arr[i]=arr[i]^arr[j];
        arr[j]=arr[i]^arr[j];
        arr[i]=arr[i]^arr[j];
    }
    static void reverse(int arr[],int i,int j)
    {
        while(i<j)
        {
            swap(arr, i, j);
            i++;
            j--;
        }
    }
}

*/
//3.minimum nuber of coins
/* 
public class java 
{
    public static void main(String[] args) 
    {
        // 1 2 5 10 20 50 100 500 1000
        int rs=1588;
        System.out.println(rs/1000); //1
        rs=rs%1000;
        System.out.println(rs);//588
        System.out.println(rs/500);//1
        rs=rs%500;
        System.out.println(rs);//88
        System.out.println(rs/100);//0
        rs=rs%100;
        System.out.println(rs);//88
        System.out.println(rs/50);//1
        rs=rs%50;
        System.out.println(rs);//38
        System.out.println(rs/20);//1
        rs=rs%20;
        System.out.println(rs);//18
        System.out.println(rs/10);//1

        rs=rs%10;
        System.out.println(rs);//8
        System.out.println(rs/5);//1

        rs=rs%5;
        System.out.println(rs);//3
        System.out.println(rs/2);//1

        rs=rs%2;
        System.out.println(rs);//1
        System.out.println(rs/1);//1

        rs=rs%1;
        System.out.println(rs);//0

    }
}
*/
//4.subset sum 
/* 
public class java 
{
    public static void main(String[] args) {
        // [3,1,2]  n=3;
        // {}     ----> 0
        // {3}    ----> 3
        // {1}    ----> 1
        // {2}    ----> 2
        // {3,1}  ----> 4
        // {3,2}  ----> 5
        // {1,2}  ----> 3
        // {3,1,2} ---> 6 
        //use power set in bit munipulations
    }
}
*/

//5.
/*
public class java 
{
    public static void main(String[] args)
    {
        int arr[] = { 12, 11, 13, 5, 6, 7 }; 
        int arr_size = arr.length;
    
        System.out.println("Given array is ");
        printArray(arr, arr_size); 
    
        mergeSort(arr, 0, arr_size - 1); 

        System.out.println("Sorted array is");
        printArray(arr, arr_size); 
    }
    static void merge(int arr[], int l, int m, int r) 
    { 
        int i, j, k; 
        int n1 = m - l + 1; 
        int n2 = r - m; 
        int L[]=new int[n1], R[]=new int[n2]; 
        for (i = 0; i < n1; i++) 
        {
            L[i] = arr[l + i]; 
        }
        for (j = 0; j < n2; j++) 
        {
            R[j] = arr[m + 1 + j]; 
        }
        i = 0; 
        j = 0; 
        k = l; 
        while (i < n1 && j < n2)
        { 
            if (L[i] <= R[j])
            { 
                arr[k] = L[i]; 
                i++; 
            } 
            else
            { 
                arr[k] = R[j]; 
                j++; 
            } 
            k++; 
        } 
        while (i < n1) 
        { 
            arr[k] = L[i]; 
            i++; 
            k++; 
        } 
        while (j < n2) 
        { 
            arr[k] = R[j]; 
            j++; 
            k++; 
        } 
    } 

    static void mergeSort(int arr[], int l, int r) 
    { 
        if (l < r) 
        { 
            // Same as (l+r)/2, but avoids 
            // overflow for large l and r 
            int m = l + (r - l) / 2; 

            // Sort first and second halves 
            mergeSort(arr, l, m); 
            mergeSort(arr, m + 1, r); 

            merge(arr, l, m, r); 
        } 
    } 
    static void printArray(int A[], int size) 
    { 
        int i; 
        for (i = 0; i < size; i++) 
        {
            System.out.print(A[i]+" ");
        }
        System.out.println();
    } 
}
*/

//1.
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int num=5;
        int temp1=1;
        int temp2=num-1;
        for(int i=num;i>0;i--)
        {
            for(int j=0;j<i-1;j++)
            {
                System.out.print("   ");
            }
            if(i==num)
            {
                System.out.print(temp1+" ");
            }
            else
            {
                System.out.print(temp1+" ");
                int temp=temp1;
                for(int j=i;j<=num-1;j++)
                {
                    temp=temp-j;
                    System.out.print(temp+" ");
                }
            }
            temp1+=i;
            System.out.println();
        }
    }
}
*/
/* 
import java.util.*;

public class Main {

    public static List<List<Integer>> mergeOverlappingIntervals(int[][] intervals) 
    {
        if (intervals.length == 0) return Collections.emptyList();

        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        List<List<Integer>> merged = new ArrayList<>();

        int[] currentInterval = intervals[0];
        merged.add(Arrays.asList(intervals[0][0], intervals[0][1]));

        for (int[] interval : intervals)
        {
            int currentEnd = currentInterval[1];
            int nextStart = interval[0];
            int nextEnd = interval[1];
         //  {{1, 3}, {2, 6}, {8, 10}, {15, 18}
            if (currentEnd >= nextStart) {
                currentInterval[1] = Math.max(currentEnd, nextEnd);
            } else {
                currentInterval = interval;
                merged.add(Arrays.asList(currentInterval[0], currentInterval[1]));
            }
        }
        return merged;
    }

    public static void main(String[] args) 
    {
        int[][] intervals = {{1, 3}, {8, 10}, {2, 6}, {15, 18}};
        List<List<Integer>> result = mergeOverlappingIntervals(intervals);
        System.out.println("The merged intervals are: " + result);
    }
}
*/
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//1.
// 1
// 2  6
// 3  7  10
// 4  8  11 13
// 5  9  12 14 15
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int num=5;
        for(int i=1;i<=num;i++)
        {
            int temp=i;
            for(int j=0;j<i;j++)
            {
                System.out.print(temp+" ");
                temp=temp+(num-1)-j;
            }
            System.out.println();
        }   
    }
}
*/
//2.
//               1
//            2  1
//         3  2  1
//     4   3  2  1
// 5   4   3  2  1
/* 
public class Main 
{
    public static void main(String[] args) {
        int num=5;
        for(int i=1;i<=num;i++)
        {
            for(int j=0;j<num-i;j++)
            {
                System.out.print("- ");
            }
            for(int j=i;j>=1;j--)
            {
                System.out.print(j+" ");
            }
            System.out.println();
        }
    }
}
*/
//3.
// 1
// 2 4
// 3 5 7
// 6 8 10 12
// 9 11 13 15 17
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int num=5,temp=1;
        for(int i=1;i<=num;i++)
        {
            temp=i;
            for(int j=0;j<i;j++)
            {
                System.out.print(temp+" ");
                temp+=2;
            }
            System.out.println();
        }    
    }
}
*/
//4.
// 1   5
//  2 4
//   3
//  2 4
// 1   5
/* 
public class Main 
{
    public static void main(String[] args)
    {
        char str[]="12345".toCharArray();
        int len=str.length;
        for(int i=0;i<len;i++)
        {
            for(int j=0;j<len;j++)
            {
                if(i==j)
                {
                    System.out.print(str[i]);
                }
                else if(j==len-1-i)
                {
                    System.out.print(str[j]);
                }
                else
                {
                    System.out.print(" ");
                }
            }
            System.out.println();
        }
    }
}
*/
//5.
// 1 2 3 4 5 
// 2 3 4 5 1
// 3 4 5 1 2
// 4 5 1 2 3
// 5 1 2 3 4
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int num=5;
        for(int i=1;i<=num;i++)
        {
            for(int j=0;j<num;j++)
            {
                System.out.print(i+j<=num?i+j+" ":(i+j)%(num)+" ");

            }
            System.out.println();
        }   
    }
}
*/

//6.






//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//1.
//  1 2 3
//  4 5 6
//  7 8 9
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr[][]=
        {
            {1,2,3},
            {4,5,6},
            {7,8,9}
        };
        int len=arr.length;
        for(int i=0;i<len/2;i++)
        {
            for(int j=0;j<len;j++)
            {
                int temp=arr[i][j];
                arr[i][j]=arr[len-1-i][j];
                arr[len-1-i][j]=temp;
            }
        }

        for(int i=0;i<len;i++)
        {
            for(int j=0;j<len/2;j++)
            {
                int temp=arr[i][j];
                arr[i][j]=arr[i][len-1-j];
                arr[i][len-1-j]=temp;
            }
        }
        for(int i=0;i<len;i++)
        {
            for(int j=0;j<len;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
    }
}
*/
//2.longest palindromic string
/* 
class Solution {
    public String longestPalindrome(String s)
    {
        return Longest_Palindromic(s);
    }
    static String Longest_Palindromic(String str)
    {
        if (str.length() <= 1)
        return str;
  
      String LPS = "";
  
      for (int i = 1; i < str.length(); i++) {
  
        // Consider odd length
        int low = i;
        int high = i;
        while(str.charAt(low) == str.charAt(high)) {
          low--;
          high++;
  
          if (low == -1 || high == str.length())
            break;
        }
  
        String palindrome = str.substring(low+1, high);
        if (palindrome.length() > LPS.length()) {
          LPS = palindrome;
        }
  
        // Consider even length
        low = i-1;
        high = i;
        while(str.charAt(low) == str.charAt(high)) {
          low--;
          high++;
  
          if (low == -1 || high == str.length())
            break;
        }
  
        palindrome = str.substring(low+1, high);
        if (palindrome.length() > LPS.length()) {
          LPS = palindrome;
        }
      }
  
      return LPS;
    }
}
*/
//3.Given a number, you have to represent this number as sum of minimum number of possible  pseudobinary numbers. A number is said to be  pseudobinary number if its decimal number consists of only two digits (0 and 1). Example: 11,10,101 are all  pseudobinary numbers.
// Examples :- 
 

// Input : 44
// Output : 11 11 11 11

// Explanation : 44 can be represented as sum of 
// minimum 4 pseudobinary numbers as 11+11+11+11  

// Input : 31
// Output : 11 10 10
// Java program to represent a given
// number as sum of minimum possible
// pseudobinary numbers
/*
class GFG
{
	public static void pseudoBinary(int n)
	{
		// Repeat below steps until n > 0
		while (n != 0)
		{
			int temp = n, m = 0, p = 1;
			while(temp != 0)
			{
				int rem = temp % 10;
				temp = temp / 10;

				if (rem != 0)
					m += p;

				p *= 10;
			}

			System.out.print(m + " ");
			
			// subtract m from n
			n = n - m;
		}
		System.out.println("--");
	}

// Driver code
public static void main(String[] args)
	{
		int n = 31;
		pseudoBinary(n);
	}
}
*/
//--------merge inteval
/* 
import java.util.Arrays;

public class Main {

    public static int[][] merge(int[][] intervals) {
        // Sort the intervals by their start time
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));

        int[][] temp = new int[intervals.length][2];
        int index = 0; 

        int st = intervals[0][0], en = intervals[0][1];
        for (int i = 0; i < intervals.length; i++) 
        {
            int thisSt = intervals[i][0], thisEn = intervals[i][1];

            // If the current interval does not overlap with the previous one
            if (thisSt > en) {
                // Add the previous interval to the temp array
                temp[index][0] = st;
                temp[index][1] = en;
                index++;

                // Update the start and end to the current interval
                st = thisSt;
                en = thisEn;
            } else {
                // If the current interval overlaps with the previous one, merge them
                if (thisEn > en) {
                    en = thisEn;
                }
            }
        }

        // Add the last interval to the temp array
        temp[index][0] = st;
        temp[index][1] = en;
        index++;

        // Copy the merged intervals to the result array
        int[][] result = new int[index][2];
        for (int i = 0; i < index; i++) {
            result[i][0] = temp[i][0];
            result[i][1] = temp[i][1];
        }

        return result;
    }

    public static void main(String[] args) {
        int[][] intervals = {{1, 3}, {2, 4}, {6, 8}, {9, 11}};
        int[][] result = merge(intervals);
        System.out.print("The merged intervals are: ");
        for (int[] interval : result) {
            System.out.print("[" + interval[0] + ", " + interval[1] + "] ");
        }
    }
}
*/
// Java program for pendulum arrangement of numbers 
/* 
import java.util.Arrays; 

class Test 
{ 
	// Prints pendulum arrangement of arr[] 
	static void pendulumArrangement(int arr[], int n) 
	{ 
		// sorting the elements 
		Arrays.sort(arr); 
	//  6 12 14 19 21
		// Auxiliary array to store output 
		int op[] = new int[n]; 
	
		// calculating the middle index 
		int mid = (n-1)/2; 
		int j = 1, i = 1; 
		op[mid] = arr[0]; 
		for (i = 1; i <= mid; i++) 
		{ 
			op[mid+i] = arr[j++]; 
			op[mid-i] = arr[j++]; 
		} 
	
		// adjustment for when no. of elements is even 
		if (n%2 == 0) 
			op[mid+i] = arr[j]; 
	
	
		// Printing the pendulum arrangement 
		System.out.println("Pendulum arrangement:"); 
		for (i = 0 ; i < n; i++) 
			System.out.print(op[i] + "-"); 
	
		System.out.println(); 
	} 
	
	// Driver method 
	public static void main(String[] args) 
	{ 
		//input Array 
		int arr[] = {14, 6, 19, 21, 12,1}; 
		
		// calling pendulum function 
		pendulumArrangement(arr, arr.length); 
	} 
} 
*/

//------------------------------------------------------------------------------------------------------------------------------------------

/*
//1.
494. Target Sum
Medium
Topics
Companies
You are given an integer array nums and an integer target.
You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.
For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target.

Example 1:

Input: nums = [1,1,1,1,1], target = 3
Output: 5
Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3
Example 2:

Input: nums = [1], target = 1
Output: 1
 

import java.util.*;
class Solution {
    public int findTargetSumWays(int[] nums, int target) 
    {  
        return tways(nums,target,0,new HashMap<String,Integer> ());   
    }
    public int tways(int [] nums,int target,int curr,HashMap<String,Integer> memo)
    {
        if(curr>=nums.length) 
        {
            if(target!=0) return 0;
            else return 1;
        }
        String currkey=Integer.toString(curr)+"_"+Integer.toString(target);
        
        if(memo.containsKey(currkey)) return memo.get(currkey);
        
        int pos=tways(nums,target-nums[curr],curr+1,memo);
        int neg=tways(nums,target+nums[curr],curr+1,memo);
        
        memo.put(currkey,pos+neg);
        
        return memo.get(currkey);
        
    }
}

//2.
1312. Minimum Insertion Steps to Make a String Palindrome
Hard
Topics
Companies
Hint
Given a string s. In one step you can insert any character at any index of the string.
Return the minimum number of steps to make s palindrome.
A Palindrome String is one that reads the same backward as well as forward.
Example 1:
Input: s = "zzazz"
Output: 0
Explanation: The string "zzazz" is already palindrome we do not need any insertions.
Example 2:
Input: s = "mbadm"
Output: 2
Explanation: String can be "mbdadbm" or "mdbabdm".
Example 3:
Input: s = "leetcode"
Output: 5
Explanation: Inserting 5 characters the string becomes "leetcodocteel".
class Solution {
    public int minInsertions(String s) {
        String s2 = new StringBuilder(s).reverse().toString();
        int[][] dp = new int[s.length()+1][s.length()+1];

        for(int i = 1;i<=s.length();i++){
            for(int j = 1;j<=s.length();j++){
                if(s.charAt(i-1) == s2.charAt(j-1))dp[i][j] = 1 + dp[i-1][j-1];
                else{
                    dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return s.length()-dp[s.length()][s.length()];
    }
}

//3.
1074. Number of Submatrices That Sum to Target
Hard
Topics
Companies
Hint
Given a matrix and a target, return the number of non-empty submatrices that sum to target.
A submatrix x1, y1, x2, y2 is the set of all cells matrix[x][y] with x1 <= x <= x2 and y1 <= y <= y2.
Two submatrices (x1, y1, x2, y2) and (x1', y1', x2', y2') are different if they have some coordinate that is different: for example, if x1 != x1'.
Example 1:
Input: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0
Output: 4
Explanation: The four 1x1 submatrices that only contain 0.
Example 2:
Input: matrix = [[1,-1],[-1,1]], target = 0
Output: 5
Explanation: The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix.
Example 3:
Input: matrix = [[904]], target = 0
Output: 0
 
class Solution {
    public int numSubmatrixSumTarget(int[][] matrix, int target) {
        for(int row = 0; row < matrix.length; row++) {
            for(int col = 1; col < matrix[0].length; col++) {
                matrix[row][col] += matrix[row][col - 1];
            }
        }
        int count = 0;

        for(int col = 0; col < matrix[0].length; col++) {
            for(int j = col; j < matrix[0].length; j++) {
                HashMap<Integer,Integer> map = new HashMap<>();
                map.put(0, 1);
                int sum = 0;
                
                for(int row = 0; row < matrix.length; row++) {
                    sum += matrix[row][j] - (col > 0 ? matrix[row][col - 1] : 0);
                    count += map.getOrDefault(sum - target, 0);
                    map.put(sum, map.getOrDefault(sum, 0) + 1);
                }
            }
        }
        return count;
    }
}
*/
// #include<stdio.h>
// int main()
// {
//    int h,m,s,h1,m1,s1;
//    scanf("%d:%d:%d %d:%d:%d",&h,&m,&s,&h1,&m1,&s1);
//    int t=(h*3600)+(m*60)+s;
//    int t1=(h1*3600)+(m1*60)+s1;
//    int f=t1-t;
//    printf("%02d:%02d:%02d",(f/3600),(f%3600)/60,f%60);
// }


//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//1.
/* 
class Main 
{
    public static void main(String[] args) 
    {
        int n=31;
        while (n > 0)
        {				 
            // calculate m (A number that has same
            // number of digits as n, but has 1 in
            // place of non-zero digits 0 in place
            // of 0 digits)
            int temp = n, m = 0, p = 1;
            while (temp>0)
            {
                int rem = temp % 10;
    
                if (rem != 0)
                {
                    m += p;
                }
                p *= 10;
                temp = temp / 10;
            }
            System.out.println(m);   
            // subtract m from n
            n = n - m;
        }
    }
}
*/
//2.90
/* 
class Main {
    static void rotate(int[][] matrix) {
        for (int i = 0; i < matrix.length; i++) {
            for (int j = i; j < matrix[0].length; j++) {
                int temp = 0;
                temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix.length / 2; j++) {
                int temp = 0;
                temp = matrix[i][j];
                matrix[i][j] = matrix[i][matrix.length - 1 - j];
                matrix[i][matrix.length - 1 - j] = temp;
            }
        }
    }

    public static void main(String args[]) {
        int arr[][] =  {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
        rotate(arr);
        System.out.println("Rotated Image");
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr.length; j++) {
                System.out.print(arr[i][j] + " ");
            }
            System.out.println();
        }

    }
}

*/

//3.Longest Palindromic

//brute
/* 
import java.util.Scanner;
class Main 
{
    public static void main(String[] args) 
    {
        Scanner scan = new Scanner(System.in);
        String str=scan.nextLine();
        for(int i=0;i<str.length();i++)
        {
            for(int j=i;j<str.length();j++)
            {
                if( fun(str.substring(i,j+1)) )
                {
                    System.out.println(  str.substring(i,j+1) );
                }
            }
        }
    }
    static boolean fun(String str)
    {
        for(int i=0;i<str.length()/2;i++)
        {
            if(str.charAt(i)!=str.charAt(str.length()-1-i))
            {
                return false;
            }
        }
        return true;
    }
}
*/

//optimal
/* 
class Solution {
    public String longestPalindrome(String s)
    {
        return Longest_Palindromic(s);
    }
    static String Longest_Palindromic(String str)
    {
        if (str.length() <= 1)
        return str;
  
      String LPS = "";
  
      for (int i = 1; i < str.length(); i++) {
  
        // Consider odd length
        int low = i;
        int high = i;
        while(str.charAt(low) == str.charAt(high)) {
          low--;
          high++;
  
          if (low == -1 || high == str.length())
            break;
        }
  
        String palindrome = str.substring(low+1, high);
        if (palindrome.length() > LPS.length()) {
          LPS = palindrome;
        }
  
        // Consider even length
        low = i-1;
        high = i;
        while(str.charAt(low) == str.charAt(high)) {
          low--;
          high++;
  
          if (low == -1 || high == str.length())
            break;
        }
  
        palindrome = str.substring(low+1, high);
        if (palindrome.length() > LPS.length()) {
          LPS = palindrome;
        }
      }
  
      return LPS;
    }
}
//babad
// */
// class Main
// {
//     public static void main(String[] args) 
//     {
//         System.out.println("babad"); 
//         System.out.print("\n"+longestPalindrome("babad") );
//     }
//     public static String longestPalindrome(String s) {
//         int n=s.length();
//         char[] newStr=new char[2*n+1];
//         int i=0;
//         newStr[i++]='#';
//         for(char c:s.toCharArray()){
//             System.out.print(c);
//             newStr[i++]=c;
//             System.out.print("#");
//             newStr[i++]='#';
//         }
        
//         int p[]=new int[2*n+1];
//         int center=0,right=0;
        
//         int longestLength=0,longestCenter=0;
        
//         for(i=0;i<newStr.length;i++){
            
//             int mirror= 2*center-i;
            
//             if(right>i){
//                 p[i]=Math.min(p[mirror],right-i);
//             }
            
//             int a=i + (p[i]+1);
//             int b=i - (p[i]+1);
            
//             while(b>=0 && a<newStr.length && newStr[a]==newStr[b]){
//                 b--;
//                 a++;
//                 p[i]++;
//             }
            
//             if(p[i]>=longestLength){
//                 longestCenter=i;
//                 longestLength=p[i];
//             }
            
//             if(i+p[i]>right){
//                 center=i;
//                 right=i+p[i];
//             }
//         }
        
//         String st=new String(newStr);
//         return st.substring(longestCenter-longestLength,longestCenter+longestLength).replace("#","");
//     }
// }


//4.insert element
// public class Main {

//     public static int searchInsert(int [] arr, int x) {
//         int n = arr.length; // size of the array
//         int low = 0, high = n - 1;
//         int ans = n;

//         while (low <= high) {
//             int mid = (low + high) / 2;
//             // maybe an answer
//             if (arr[mid] >= x) {
//                 ans = mid;
//                 //look for smaller index on the left
//                 high = mid - 1;
//             } else {
//                 low = mid + 1; // look on the right
//             }
//         }
//         return ans;
//     }

//     public static void main(String[] args) {
//         int[] arr = {1, 2, 4, 7};
//         int x = 6;
//         int ind = searchInsert(arr, x);
//         System.out.println("The index is: " + ind);
//     }
// }

// Input : 1   3   2   5   4
// Output :5   3   1   2   4
// Explanation: 

// //merge sort
// public class Main 
// {
//     public static void main(String[] args)
//     {
//         int arr[] = { 12, 11, 13, 5, 6, 7 }; 
//         int arr_size = arr.length;
    
//         System.out.println("Given array is ");
//         printArray(arr, arr_size); 
    
//         mergeSort(arr, 0, arr_size - 1); 

//         System.out.println("Sorted array is");
//         printArray(arr, arr_size); 
//     }
//     static void merge(int arr[], int l, int m, int r) 
//     { 
//         int i, j, k; 
//         int n1 = m - l + 1; 
//         int n2 = r - m; 
//         int L[]=new int[n1], R[]=new int[n2]; 
//         for (i = 0; i < n1; i++) 
//         {
//             L[i] = arr[l + i]; 
//         }
//         for (j = 0; j < n2; j++) 
//         {
//             R[j] = arr[m + 1 + j]; 
//         }
//         i = 0; 
//         j = 0; 
//         k = l; 
//         while (i < n1 && j < n2)
//         { 
//             if (L[i] <= R[j])
//             { 
//                 arr[k] = L[i]; 
//                 i++; 
//             } 
//             else
//             { 
//                 arr[k] = R[j]; 
//                 j++; 
//             } 
//             k++; 
//         } 
//         while (i < n1) 
//         { 
//             arr[k] = L[i]; 
//             i++; 
//             k++; 
//         } 
//         while (j < n2) 
//         { 
//             arr[k] = R[j]; 
//             j++; 
//             k++; 
//         } 
//     } 

//     static void mergeSort(int arr[], int l, int r) 
//     { 
//         if (l < r) 
//         { 
//             // Same as (l+r)/2, but avoids 
//             // overflow for large l and r 
//             int m = l + (r - l) / 2; 

//             // Sort first and second halves 
//             mergeSort(arr, l, m); 
//             mergeSort(arr, m + 1, r); 

//             merge(arr, l, m, r); 
//         } 
//     } 
//     static void printArray(int A[], int size) 
//     { 
//         int i; 
//         for (i = 0; i < size; i++) 
//         {
//             System.out.print(A[i]+" ");
//         }
//         System.out.println();
//     } 
// }

//------interval merge------------------------------



// import java.util.ArrayList;
// import java.util.Arrays;
// import java.util.List;

// public class Main {

//     public static List<int[]> mergeOverlap(int[][] arr) {
      
//         // Sort intervals based on start values
//         Arrays.sort(arr, (a, b) -> Integer.compare(a[0], b[0]));

//         List<int[]> res = new ArrayList<>();
//         res.add(arr[0]);

//         for (int i = 1; i < arr.length; i++) {
//             int[] last = res.get(res.size() - 1);
//             int[] curr = arr[i];

//             // If current overlaps with the last merged, merge them
//             if (curr[0] <= last[1]) {
//                 last[1] = Math.max(last[1], curr[1]);
//             } else {
//                 // Add current to the result
//                 res.add(curr);
//             }
//         }

//         return res;
//     }

//     // Driver Code
//     public static void main(String[] args) {
//         int[][] arr = {{6, 8}, {1, 9}, {2, 4}, {4, 7}};
//         List<int[]> res = mergeOverlap(arr);

//         System.out.print("The Merged Intervals are: ");
//         for (int[] interval : res) {
//             System.out.print("[" + interval[0] + ", " + interval[1] + "] ");
//         }
//         System.out.println();
//     }
// }


//dsa-data structure is way of organinzing data in computer so that it is efficient handle the data
//what do mean by efficient? ==> easy store,search and retrieve,modify the data

//time complextity :
// 1.bigo (O(1))
// 2.omege
// 3.theta
// O(1) <  O(log n) < O(n) < O(n log n)  < O(x^2)  < O(X^3)  < O(2^x) < O(n!)


//1.List Implementation using Array()
/*
import java.util.*;
class DynamicArray
{
    int arr[];
    static  int size = 0;
    int INITIAL_CAPACITY = 10; 
    DynamicArray() {
        size = 0;
        arr = new int[INITIAL_CAPACITY]; // Use INITIAL_CAPACITY
    }
    public void add(int num)
    {
        if(size==INITIAL_CAPACITY)
        {
            expandArray();
        }
        arr[size++]=num;
    }
    public void expandArray()
    {
        INITIAL_CAPACITY*=2;
        Arrays.copyOf(arr,INITIAL_CAPACITY);
    }
    public void delete()
    {
        size--;
    }
    public void display()
    {
        for(int i=0;i<size;i++)
        {
            System.out.print(arr[i]+" ");
        }
        System.out.println();
    }
    public void insert(int pos,int num)
    {
        if(size==INITIAL_CAPACITY)
        {
            expandArray();
        }
        for(int i=size-1;i>=pos;i--)
        {
            arr[i+1]=arr[i];
        }
        arr[pos]=num;
        size+=1;
    }
    public void deleteAt(int pos,int num)
    {
         //1 7 2 3
        for(int i=pos+1;i<size;i++)
        {
            arr[i-1]=arr[i];
        }
        arr[pos]=num;
        size-=1;
    }
}

public class main1 
{
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        DynamicArray linkedlist = new DynamicArray();
        for(int i=0;i<3;i++)
        {
            linkedlist.add(scan.nextInt());
        }
        linkedlist.display();
        linkedlist.insert(1,7);
        linkedlist.display();
        linkedlist.deleteAt(1, 7);
        linkedlist.display();

    }
}
*/
//2.Linkedlist
//-- Node contians data and pointer is called as node data any thick like string ,integer,float...
//-- starting node is head
//-- ending node is tail
//-- ending node pointer should point to null value  

// -Array:A fixed-size, contiguous block of memory with fast indexed access but requires resizing to change its size.
// -Linked List: A dynamic, non-contiguous data structure with each element pointing to the next, allowing efficient insertions and deletions but slower access due to traversal.

//time complexity            Linked List             Array
//1.Insert At Beginning          O(1)                 O(n)
//2.Tranvers                     O(n)                 O(n)
//3.Read/updeate                 O(n)                 O(1)
//4.Insert at Pos                O(n)                 O(n)
//5.delete form pos              O(n)                 O(n)

// //1.
// class linkedlist
// {
//     Node head;
//     class Node
//     {
//         int data;
//         Node next;
//         Node(int data)
//         {
//             this.data=data;
//             this.next=null;
//         }
//     }
//     public linkedlist() 
//     {
//         head=null;
//     }  
//     public void InsertAtBegin(int data)
//     {
//         Node newNode = new Node(data);
//         if(head==null)
//         {
//             head=newNode;
//         }
//         else
//         {
//             newNode.next=head;
//             head=newNode;
//         }
//     }
//     public void display()
//     {
//         Node temp = head;
//         while(temp!=null)
//         {
//             System.out.print(temp.data);
//             temp=temp.next;
//         }
//     }
// }
// public class main1
// {
//     public static void main(String[] args) {
//         linkedlist obj1 = new linkedlist();
//         obj1.InsertAtBegin(3);
//         obj1.InsertAtBegin(33);
//         obj1.InsertAtBegin(333);
//         obj1.InsertAtBegin(3333);
//         obj1.display();
//     }
// }

//1.given a unsorted array to find continues pair largest sum value
//input:0,5,6,0,9,0,1,4
/*
public class zoho {
    public static void main(String[] args) {
        int arr[]={0,5,6,0,9,0,1,4},max=0;
        for(int i=0;i<arr.length-1;i++)
        {
            if(max<arr[i]+arr[i+1])
            {
                max=arr[i]+arr[i+1];
            }
        }
        System.out.println(max);
    }
}
*/
//2.print the range form x to y in n array
// N=6 A=4,3,7,11,50,1 
// X=4 Y=10
/* 
public class zoho {
    public static void main(String[] args) {
        int arr[]={4,3,7,11,50,1};
        int x=4,y=10;
        for(int i=0;i<arr.length;i++)
        {
            if(x<arr[i]&&arr[i]<y)
            {
                System.out.println(arr[i]);
                return;
            }
        }
    }
}
*/

//3.given an array find the sum of elements present in specified gap n
//input:arr[]={1,2,3,4,5,6,7,8,9,10,11,12,13},gap=3
//output: 
// 35 => 1+4+7+10+13 
// 26 => 2+5+8+11
// 30 => 3+6+9+12
/* 
public class zoho {
    public static void main(String[] args) {
        int arr[]={1,2,3,4,5,6,7,8,9,10,11,12,13};
        int gap=3,s=0,e=0,sum=0;
        while(s<gap)
        {
            System.out.print(arr[e]+" ");
            sum+=arr[e];
            e+=gap;
            if(e>=arr.length)
            {
                s++;
                e=s;
                System.out.println(" ==> "+sum);
                sum=0;
            }
        }
    }
}
*/
//4.anagram
//input: s1=anagram s2=nagaram

//5.
// Input:2,3,4,5,1,7,6
// output:1,3,2,5,4,7,6

/* 
import java.util.Arrays;
public class zoho {
    public  static void main(String[] args) {
        int arr[]={2,3,4,5,1,7,6};
        Arrays.sort(arr);
        for(int i=1;i<arr.length;i+=2)
        {
                arr[i]=arr[i]^arr[i+1];
                arr[i+1]=arr[i]^arr[i+1];
                arr[i]=arr[i]^arr[i+1];
        }
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
}
*/
//6.from a given array of integers print the next bigger number for each number in array
//input:8,4,1,9,6,2
//output:8->9,4->6,1->2,9->,6->8,2->4
/*
public class zoho {
    public static void main(String[] args) {
        int arr[]={8,4,1,9,6,2};
        int s=0,e=0,min=Integer.MAX_VALUE;
        while(s<arr.length)
        {
            if(arr[s]<arr[e])
            {
                if(arr[e]<min)
                {
                    min=arr[e];
                }
            }
            e++;
            if(e>=arr.length)
            {
                if(min!=Integer.MAX_VALUE)
                {
                    System.out.println(arr[s]+" ==> "+min);
                }
                else
                {
                    System.out.println(arr[s]+" ==>");
                }
                min=Integer.MAX_VALUE;
                e=0;
                s++;
            }
        }
    }
}
*/
//7.
// input:3
// output:{},{{}},{{{}}};
/*
public class zoho {
    public static void main(String[] args) {
        int num=3;
        for(int i=1;i<=num;i++)
        {
            for(int j=1;j<=i;j++)
            {
                System.out.print("{");
            }
            for(int j=1;j<=i;j++)
            {
                System.out.print("}");
            }
            System.out.print(" ");
        }
    }
}
*/

/* 
1.Implement strstr
Example 1:
    Input  : s = GeeksForGeeks, x = Fr
    Output : -1
Example 2:
    Input  :  s = GeeksForGeeks, x = For
    Output : 5

public class zoho {
    public static void main(String[] args) {
        char ch1[]="GeeksForGeeks".toCharArray(),ch2[]="Fr".toCharArray(); 
        int index=-1;
        for(int i=0;i<ch1.length;i++)
        {
            if(ch1[i]==ch1[0])
            {
                int l=i,ctr=0;
                for(int j=0;j<ch2.length;j++)
                {
                    if(&&ch1[l++]==ch2[j])
                    {
                        ctr++;
                    }
                    else
                    {
                        break;
                    }
                }
                if(ctr==ch2.length){index=i;break;}
            }
        }
        System.out.println(index);  
    }
}
*/
//2.counting sorting:
// Input:
// N = 5
// S = "edsab"
// Output:
// abdes
/*
public class zoho {
    public static void main(String[] args) {
        String str="edsab";
        System.out.println(countSort(str));    
    }
    static String countSort(String arr)
    {
        int count[]=new int [26];
        for(int i=0;i<arr.length();i++)
        {
            count[arr.charAt(i)-'a']++;
        }
        arr="";
        for(int i=0;i<26;i++)
        {
            for(int j=0;j<count[i];j++)
            {
               arr+=(char)(i+'a'); 
            }
        }
        return arr;
    }
}
*/
//3.Print Matrix in snake Pattern
/*
import java.util.ArrayList;
public class zoho {
    public static void main(String[] args) {
        int arr[][]={
            {1,2,3},
            {4,5,6},
            {7,8,9}
        };
        ArrayList<Integer> temp = new ArrayList<Integer>();
        int len=arr[0].length;
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<len;j++)
            {
                if(i%2==0)
                {
                    temp.add(arr[i][j]);
                }
                else
                {
                    temp.add(arr[i][len-j-1]);
                }
            }
        }
        for(int i=0;i<temp.size();i++)
        {
            System.out.println(temp.get(i)+" ");
        }
    }
}
*/
// 4.2nd longest elements
/*
public class zoho {
    public static void main(String[] args) {
        int arr[]={1,7,2,3,6,5,22};
        int first_max=-1,second_max=-1;
        for(int i=0;i<arr.length;i++)
        {
            if(first_max<arr[i])
            {
                second_max=first_max;
                first_max=arr[i];
            }
            else if(second_max<arr[i]&&first_max!=arr[i])
            {
                second_max=arr[i];
            }
        }
        System.out.println(second_max);
    }
}
*/
//5.sum digit in string
/* 
public class zoho {
    public static void main(String[] args) {
        String str="1ab40b3s1";
        int sum=0,num=0;
        for(int i=0;i<str.length();i++)
        {
            if(str.charAt(i)>='0'&&str.charAt(i)<='9')
            {
                num=num*10+(int)(str.charAt(i)-'0');
            }
            else
            {
              sum+=num;
              num=0;   
            }
            if(i==str.length()-1)
            {
                sum+=num;
            }
        }
        System.out.println(sum);
    }
}
*/
//6.remove duplicate number in array
/* 
public class zoho {
    public static void main(String[] args) {
        int arr[]={1,2,3,5,5};
        int i=0,j=0;
        while(i<arr.length-1)
        {
            if(arr[i]!=arr[i+1])
            {
                arr[j++]=arr[i];
            }
            i++;
        }
        i=0;
        while (i<j) 
        {
            System.out.print(arr[i]+" ");
            i++;    
        }
    }
}
*/
//7.remove character for str1 to str2
/*
public class zoho {
    public static void main(String[] args) {
        String str1="occurrence",str2="car";
        int count[]=new int[26];
        for(int i=0;i<str1.length();i++)
        {
            count[(int)str1.charAt(i)-'a']++;
        }
        for(int i=0;i<str2.length();i++)
        {
            count[(int)str2.charAt(i)-'a']=0;
        }
        for(int i=0;i<str1.length();i++)
        {
            if(count[(int)str1.charAt(i)-'a']!=0)
            {
                System.out.print(str1.charAt(i));
            }
        }
    }
}
*/
//8.replace all 0's by 5
/* 
public class zoho {
    public static void main(String[] args) {
        int num=1004,ans=0,num1=num;
        int factor=1;
        while(num>0)
        {
            if(num%10==0)
            {
                ans=ans+(5*factor);//4+50=54 || 55+500=554
            }
            else
            {
                ans=ans+(num%10*factor);//4 || 1000+554=1554
            }
            num/=10;
            factor=factor*10;//1 10 100 1000
        }
        System.out.println(ans);
        ans=0;
        while (num2>0) 
        {
            if(num2%10==0)
            {
                ans=ans*10+5;
            }    
            else
            {
                ans=ans*10+num2%10;
            }
            num2/=10;
        }
        System.out.println(ans);
    }
}
*/
//9.multiply two polynimials
/*
public class zoho {
    public static void main(String[] args) {
        int m=4,n=3;
        int arr1[]={1,0,3,2},arr2[]={2,0,4};
        int result[]=new int[m+n-1];
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                result[i+j]+=arr1[i]*arr2[j];
                // 0 0 0 0 0 0 0 0
                // 2 0 4                 i=0
                //   0 0 0               i=1
                //     6 9 12            i=2
                //       4 0 8           i=4
            }
        }

        for(int i=0;i<m+n-1;i++)
        {
            System.out.print(result[i]+" ");
        }

    }
}
*/
//10.geek-anacci number

/* 
import java.util.Scanner;
public class zoho {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int num=3;
        for(int i=0;i<num;i++)
        {
            int a=scan.nextInt(),b=scan.nextInt(),c=scan.nextInt(),n=scan.nextInt();
            System.out.println(fn(a,b,c,n));
        }
    }
    static int fn(int a,int b,int c,int n)
    {
        int count=3,sum=0;
        while(count<n)
        {
            sum = a+b+c;
            a=b;
            b=c;
            c=sum;
            count++;
        }
        return c;
    }
}
*/

//11.square root of number is <=x
/*
public class zoho {
    public static void main(String[] args) {
        int num=5;
        System.out.println(floorSqrt(num));
    }
    static int floorSqrt(int num)
    {
        int start=1,end=num;
        int floor_ans=0;
        int mid;
        while(start<=end)
        {
            
            mid=(start+end)/2;
            if(mid*mid==num)
            {
                return mid;
            }
            else if(mid<=num/mid)
            {
                start=mid+1;
                floor_ans=mid;
            }
            else
            {
                end=mid-1;
            }
        }
        return floor_ans;
    }
}
*/
//12.anagram
/* 
public class zoho {
    public static void main(String[] args) {
        int arr[]=new int[26];
        String str1="geeksforgeeks",str2="forgeeksgeeks";
        for(int i=0;i<str1.length();i++)
        {
            arr[(int)(str1.charAt(i)-'a')]++;
        }
        for(int i=0;i<str2.length();i++)
        {
            if(arr[(int)(str2.charAt(i)-'a')]>0)
            {
                arr[(int)(str2.charAt(i)-'a')]--;
            }
            else
            {
                System.out.println("NO");
                return;
            }
        }
        System.out.println("YES");
    }
}
*/
//13.Intersection of two arrays
/* 
public class zoho {
    public static void main(String[] args) {
       int  n = 5, m = 3;
       int a[] = {89, 24, 75, 11, 23};
       int b[] = {89, 2, 4};
       System.out.println(NumberofElementsInIntersection(a, b, n, m));
    }
    static int NumberofElementsInIntersection(int a[], int b[], int n, int m) {
        int i=0,j=0,ctr=0;
        while(i<n)
        {
            if(a[i]==b[j++])
            {
                ctr++;
            }
            if(j>=m)
            {
                j=0;
                i++;
            }
        }
        return ctr;
    }
}
*/
//13.
/*
public class zoho {
    public static void main(String[] args) {
        String str="67542-/+-";
        fn(str, 0);
    }
    static int fn(String str,int ans)
    {
        int o_index=0;
        for(int i=0;i<str.length();i++)
        {
            if((str.charAt(i)<'0'||str.charAt(i)>'9'))
            {
                o_index=i;
                break;
            }
        }
        ans=(int)(str.charAt(0)-'0');
        int j=o_index;
        for(int i=1;i<j;i++)
        {
            if(str.charAt(o_index)=='+')
            {
                ans=ans+(int)(str.charAt(i)-'0');
            }
            else if(str.charAt(o_index)=='-')
            {
                ans=ans-(int)(str.charAt(i)-'0');
            }      
            else if(str.charAt(o_index)=='%')
            {
                ans=ans%(int)(str.charAt(i)-'0');
            }
            else if(str.charAt(o_index)=='/')
            {
                ans=ans/(int)(str.charAt(i)-'0');
            }
            o_index++;      
        }
        System.out.println(ans);
        return 0;
    }
}
*/
//14.
/* 
public class zoho {
 
    public static void main(String[] args) {
        String str="1c0c1c1a0b1";
        // a-and , b-or ,c-xor 
        int ans = (int)(str.charAt(0)-'0');
        for(int i=1;i<str.length();i+=2)
        {
            if(str.charAt(i)=='a')
            {
                ans = ans&(int)(str.charAt(i+1)-'0');
            }
            else if(str.charAt(i)=='b')
            {
                ans=ans|(int)(str.charAt(i+1)-'0');
            }
            else if(str.charAt(i)=='c')
            {
                ans=ans^(int)(str.charAt(i+1)-'0');
            }
        }
        System.out.println(ans);
    }
}
*/
//15.total number of sock in 3 different type of colour
// 1-red
// 2-green
// 3-blue
/* 
public class zoho {
    public static void main(String[] args) {
        int arr[]={2,1,1,2,3,3,1};
        int temp[]=new int[3],result=0;
        for(int i=0;i<arr.length;i++)
        {
            temp[arr[i]-1]++;
        }
        for(int i=0;i<3;i++)
        {
            result+=temp[i]/2;
        }
        System.out.println(result); // 2-2->1 pair && 1-1 && 3-3
    }
}
*/
//16.
//sting mappint in str1 to str2

//input:str1="add",str2="egg" (a-->e && d-->g)
//output:yes

//input:str1="add",str2="edg" (a-->e && r-->g ||~ d-->g)
//output:yes

/* 
public class zoho {
    public static void main(String[] args) {
        String str1="add",str2="edg";
        int arr[]=new int[26];
        for(int i=0;i<str1.length();i++)
        {
            if(arr[(int)str1.charAt(i)-'a']==0)
            {
                arr[(int)str1.charAt(i)-'a']=(int)(str2.charAt(i)-'a');
            }
            else if(arr[(int)str1.charAt(i)-'a']!=(int)(str2.charAt(i)-'a'))
            {
                System.out.print("NO");
                return;
            }
        }
        System.out.println("YES");
    }
}
*/

//17.
/* 
public class zoho {
    public static void main(String[] args) {
        String str="abbaccc",result="";
        int ctr=1;
        for(int i=1;i<str.length();i++)
        {
            if(str.charAt(i-1)!=str.charAt(i))
            {
                result+=str.charAt(i-1)+""+(char)('0'+ctr);
                ctr=1;
            }
            else
            {
                ctr++;
            }
        }
        result+=str.charAt(str.length()-1)+""+(char)('0'+ctr);
        System.out.println(result);
    }
}
*/
//18.first non repeating character:
/* 
public class zoho {
    public static void main(String[] args) {
        String str="hello";
        int len=str.length(),arr[]=new int[26];
        for(int i=0;i<len;i++)
        {
            arr[(int)str.charAt(i)-'a']++;
        }
        for(int i=0;i<len;i++)
        {
            if(arr[(int)str.charAt(i)-'a']==1)
            {
                System.out.println(str.charAt(i));
                return;
            }
        }
    }
}
*/

//19.Given a street of N houses (a row of houses), each house having K amount of money kept inside; now there is a thief who is going to steal this money but he has a constraint/rule that he cannot steal/rob two adjacent houses. Find the maximum money he can rob.
/*
public class zoho {
    public static void main(String[] args) {
        int N=5,K=10;
        System.out.println(maximizeMoney(N, K));   
    }
    static int maximizeMoney(int N , int K) {
        N=(N%2==0)?N/2:N/2+1;
        return N*K;
    }
}
*/

//20.count 0 and 1> and <-1
/* 
public class zoho {
    public static void main(String[] args) {
        int arr[]={1,1,0,-1,-2};
        double ctr_0=0,ctr_1=0,ctr_2=0;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]==0)
            {
                ctr_0++;
            }
            else if(arr[i]>0)
            {
                ctr_1++;
            }
            else 
            {
                ctr_2++;
            }
        }
        ctr_0=ctr_0/arr.length;
        ctr_1=ctr_1/arr.length;
        ctr_2=ctr_2/arr.length;
        System.out.printf("%."+arr.length+"f",ctr_0);
        System.out.printf("%."+arr.length+"f",ctr_1);
        System.out.printf("%."+arr.length+"f",ctr_2);
    }
}
*/
//21.isogram is if all character is unique than return true otherwise false

//22.number to word
/* 
public class zoho {

    public static void main(String[] args) {
        long n=77744448l;
        String ans="";
        ans+=numtoword((int)(n/10000000),"crore ");// 7 0's
        ans+=numtoword((int)((n/100000)%100),"lakh "); // 5 0's
        ans+=numtoword((int)((n/1000)%100),"thousand "); // 3 0's
        ans+=numtoword((int)((n/100)%10),"hundred ");   // 2's
        if(n>100 && n%100>0){
            ans+="and ";
        }
        ans+=numtoword((int)(n%100),"");
        System.out.println(ans);
    }
    static String numtoword(long n,String s)
    {
        String one[]={"","one ","two ","three ","four ","five ","six ","seven ","eight ","nine ","ten ","eleven ","twelve ","thirteen ","fourteen ","fifteen ","sixteen ","seventeen ","eighteen ","nineteen "};
        String tens[]={"","","twenty ","thirty ","forty ","fifty ","sixty ","seventy ","eighty ","ninety "};
        String str="";
        if(n>19){
            str+=tens[(int) (n/10)]+one[(int) (n%10)];
        }else{
            str+=one[(int) n];
        }
        if(n!=0){
            str+=s;
        }
        return str;
    }
}
*/
//23.diagonal traverse
// public class zoho {
//     public static void main(String[] args) {
//         int arr[][]={
//             {1,2,3},
//             {4,5,6},
//             {7,8,9}
//         };
        
//     }
// }
//-------------------------------------------------------------------------
//24.pangram checking
// Check whether all english alphabets are present in the given sentence or not
// I/P: abc defGhi JklmnOP QRStuv wxyz
// O/P: True

// I/P: abc defGhi JklmnOP QRStuv
// O/P: False
/*
public class zoho {
    public static void main(String[] args) {
        int arr[]=new int [26];
        String str="abc defGhi JklmnOP QRStuv wxyz";
        for(int i=0;i<str.length();i++)
        {
            if(str.charAt(i)>='a'&&str.charAt(i)<='z')
            {
                arr[(int)str.charAt(i)-'a']++;
            }
            else if(str.charAt(i)>='A'&&str.charAt(i)<='Z')
            {
                arr[(int)str.charAt(i)-'A']++;
            }
        }
        for(int i=0;i<26;i++)
        {
            if(arr[i]==0)
            {
                System.out.println("False");
                return ;
            }
        }
        System.out.println("True");
        return;
    }
}
*/
//25.password strength
/* 
public class zoho {
    public static void main(String[] args) {
        String str="Qwertyuiop";
        if(str.length()<6){System.out.println("weak");return;}
        int uc=0,lc=0,d=0,s=0,i=0;
        for(i=0;i<str.length();i++)
        {
            if(str.charAt(i)>='a'&&str.charAt(i)<='z')
            {
                lc++;
            }
            else if(str.charAt(i)>='A'&&str.charAt(i)<='Z')
            {
                uc++;
            }
            else if(str.charAt(i)>='0'&&str.charAt(i)<='9')
            {
                d++;
            }
            else
            {
                s++;
            }
        }
        i=0;
        if(uc!=0){i++;}
        if(lc!=0){i++;}
        if(d!=0){i++;}
        if(s!=0){i++;}
        switch(i)
        {
            case 1:
                System.out.println("Weak");
                break;
            case 2:
                System.out.println("Medium");
                break;
            case 3:
                System.out.println("Good");
                break;
            case 4:
                System.out.println("Strong");
                break;
            
        }
    }
}
*/
//26.First Occurrences
// Explanation: The index of P in first string is 7, O is 1, R is 6 and T is 11. The largest range is 1 – 11.
// So print the characters of the first string in this inex range i.e. OHOCORPORAT
/*
public class zoho {
    public static void main(String[] args) {
        String str1="ZOHOCORPORATION",str2="PORT";
        int i=0,j=0,min=99999,max=0;
        while(i<str2.length())
        {
            if(str1.charAt(j++)==str2.charAt(i))
            {
                if(min>(j-1))
                {
                    min=(j-1);
                }
                if(max<(j-1))
                {
                    max=(j-1);
                }
                j=0;
                i++;
            }
            if(j>=str1.length())
            {
                j=0;
                i++;
            }
        }
        System.out.println(min+" "+max);
        for(int k=min;k<=max;k++)
        {
            System.out.print(str1.charAt(k));
        }
        return;
    }
}
*/
//27.
// Matrix Diagonal sum
// Given a matrix print the largest of the sums of the two triangles split by diagonal from top right to bottom left
// I/P:
// 3 3
// 1 2 3
// 4 5 6
// 7 8 9
// O/P: 38
/*
public class zoho {
    public static void main(String[] args) {
        int arr[][]=
        {
            {1,2,3},
            {4,5,6},
            {7,8,9},
        };
        int upper_sum=0,lower_sum=0;
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr[0].length;j++)
            {
                if(i<=j)
                {
                    upper_sum+=arr[i][j];
                }
                if(i>=j)
                {
                    lower_sum+=arr[i][j];
                }
            }   
        }
        System.out.print(lower_sum+" "+upper_sum);
    }
}
*/
//28.
// January - 31 days
// February - 28 days in a common year and 29 days in leap years
// March - 31 days
// April - 30 days
// May - 31 days
// June - 30 days
// July - 31 days
// August - 31 days
// September - 30 days
// October - 31 days
// November - 30 days
// December - 31 days


//30.product of each excpect
/* 
public class zoho {
    public static void main(String[] args) {
        int arr[]={1,2,3,4},sum=1;
        for(int i=0;i<arr.length;i++)
        {
            sum=sum*arr[i];
        }
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(sum/arr[i]+" ");
        }
    }
}
*/
//31.
/* 
public class zoho {
    public static void main(String[] args) {
        int arr[][]=
        {
            {1,2,3,4},
            {4,5,6,5},
            {7,8,9,6},
            {7,8,9,10}
        };
        (0,3)
        (0,2)(1,3)
        (0,1)(1,2)(2,3)
        (0,0)(1,1)(2,2)(3,3)
        (1,0)(2,1)(3,2)
        (2,0)(3,1)
        (3,0)
        int n=3;
        for(int i=0;i<=3;i++)
        {
            for(int j=0;j<=i;j++)
            {
                System.out.print(arr[j][n+j]+" ");
            }
            n--;
        }
        n=2;
        for(int i=1;i<=3;i++)
        {
            for(int j=0;j<=n;j++)
            {
                System.out.print(arr[i+j][j]+" ");
            }
            n--;
        }
    }
}

*/

/* 
public class zoho
{
    public static void main(String[] args) {
        int ans=0;
        int arr[]={1,1,1,2,2,3};
        for(int i=0;i<arr.length;i++)
        {
            for(int j=i+1;j<arr.length;j++)
            {
                if(arr[i]==arr[j])
                {
                    ans++;
                }
            }
        }
        System.out.println(ans);
    }
}
*/

/* 
public class zoho {
    public static void main(String[] args) {
        int arr[]=new int[5];
        for(int i=1;i<5;i++){
            arr[i]=(i>>1)+(i&1);
        }
        for(int i=0;i<5;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
}
*/

/* 
public class zoho {
    public static void main(String[] args) {
        System.out.println(fn(16));
    }
    static boolean fn(int num)
    {
        if(num==1)
        {
            return true;
        }
        if(num%4!=0)
        {
            return false;
        }
        return !fn(num/4);
    }
}
*/
/* 
public class zoho {
    public static void main(String[] args) {
        int arr[]={1,2,3};
        int arr1[]=new int[arr.length*2];
        for(int i=0;i<arr.length;i++)
        {
            arr1[i]=arr1[i+arr.length]=arr[i];
        }
        for(int i=0;i<arr.length*2;i++)
        {
            System.out.print(arr1[i]+" ");
        }
    }
}*/
/* 
public class zoho {
    public static void main(String[] args) {
        int arr[]={1,3,2,5,3};
        int i=0;
        while(i<arr.length)
        {
            int index = arr[i]-1;
            if(arr[i]!=arr[index])
            {
                int temp=arr[i];
                arr[i]=arr[index];
                arr[index]=temp;
            }
            else
            {
                i++;
            }
        }
        for(i=0;i<arr.length;i++)
        {
            if(i!=arr[i]-1)
            {
                System.out.print(arr[i]+" "+i);
            }
        }
    }
}
*/

//1.linear search
//best case o(1)
//worst case o(n)

//1.
/* 
import java.util.*;
public class MainJava {
    public static void main(String[] args) {
        int arr[][]={
                      {18,12},
                      {9,14},
                      {77,50}
                    },target=12;
        int[] temp=linearSearch(arr, target);
        System.out.println(Arrays.toString(temp));
        System.out.println(Integer.MIN_VALUE+" "+Integer.MMAX _VALUE);
    }
    static int[] linearSearch(int arr[][],int target)
    {
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr.length;j++)
            {
              if(arr[i][j]==target)
              {
                   return new int[]{i,j};
              }
            }
        }
        return new int[]{-1,-1};
    }
}
*/
//2.
//1295. Find Numbers with Even Number of Digits (linear search)
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={12,345,2,6,7896,-11,-1222},ctr=0;
        for(int i=0;i<arr.length;i++)
        {
            if(method1(arr[i])%2==0)
            {
                ctr++;
            }
        }
        System.out.println("method1 "+ctr);
        ctr=0;
        for(int i=0;i<arr.length;i++)
        {
            if(method2(arr[i])%2==0)
            {
                ctr++;
            }
        }
        System.out.println("method2 "+ctr);
    }
    static int method1(int num)
    {
        int ctr=0;
        while(num!=0)
        { 
            ctr++;
            num/=10;
        }
        return ctr;
    }
    static int method2(int num)
    {
        if(num<0){num*=-1;}
        return (int)(Math.log10(num))+1;// minus value will not counted
    }
}
*/
//3.
//1672.richest customer wealth (linear search)
/* 
import java.util.Scanner;
public class MainJava 
{
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int arr[][]=
        {
            {1,2,3},
            {3,2,1}
        };
        for(int i=0;i<arr.length;i++)
        {
            int sum=0;
            for(int j=0;j<arr[0].length;j++)
            {
                sum+=arr[i][j];
            }
            System.out.print(sum+" ");
        }
    }
}
//output: 6 6
*/
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//2.Binary search
//if the given array is sort use binary search it's more efficient
//best case:o(1)
//worst case:o(log n)
/* 
//1.
public class MainJava {
    public static void main(String[] args) {
        int arr1[]={2,4,6,9,11,12,14,20,36,48},target1=36;
        System.out.println(BinarySearchAscending(arr1, target1));

        int arr2[]={90,75,18,12,6,4,3,1},target2=75 ;
        System.out.println(BinarySearchDescending(arr2, target2));

    }
    static int BinarySearchAscending(int arr[],int target)
    {
        int start=0,end=arr.length-1;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(arr[mid]<target)
            {
                start=mid+1;
            }
            else if(arr[mid]>target)
            {
                end=mid-1;
            }
            else
            {
                return mid;
            }
        }
        return -1;
    }
    static int BinarySearchDescending(int arr[],int target)
    {
        int start=0,end=arr.length-1;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(arr[mid]<target)
            { 
                end=mid-1;
            }
            else if(arr[mid]>target)
            {
                start=mid+1;
            }
            else
            {
                return mid;
            }
        }
        return -1;
    }
}
*/   
//2.
//852. Peak Index in a Mountain Array 
//162. Find Peak Element
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={0,10,5,2};
        System.out.println(peakIndexInMountainArray(arr));
    }
    static int peakIndexInMountainArray(int[] arr)
    {
        int start=0,end=arr.length-1;
        while(start<end)
        {
            int mid = start+(end-start)/2;
            if(arr[mid]>arr[mid+1])
            {
                end=mid;
            }
            else
            {
                start=mid+1;
            }
        }
        return start;
    }
}
*/
//3.ceiling number (greater or equal to the target elements)
/* 
public class MainJava {
    public static void main(String[] args) {
         int arr[]={2,3,5,9,14,16,18},target=15;
         System.out.println(ceiling(arr, target));//5
         System.out.println(floor(arr, target));//4
    }
    static int ceiling(int arr[],int target)
    {
        int start=0,end=arr.length-1;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(target<arr[mid])
            {
                end=mid-1;
            }
            else if(target>arr[mid])
            {
                start=mid+1;
            }
            else 
            {
                return mid;
            }
        }
        return start;
    }
    static int floor(int arr[],int target)
    {
        int start=0,end=arr.length-1;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(target<arr[mid])
            {
                end=mid-1;
            }
            else if(target>arr[mid])
            {
                start=mid+1;
            }
            else 
            {
                return mid;
            }
        }
        return end;
    }
}
*/
//4.
/* 
744. Find Smallest Letter Greater Than Target
Return the smallest character in letters that is lexicographically greater than target. If such a character does not exist, return the first character in letters.
Example 1:
Input: letters = ["c","f","j"], target = "a"
Output: "c"
Explanation: The smallest character that is lexicographically greater than 'a' in letters is 'c'.

Example 2:
Input: letters = ["c","f","j"], target = "c"
Output: "f"
Explanation: The smallest character that is lexicographically greater than 'c' in letters is 'f'.

Example 3:
Input: letters = ["x","x","y","y"], target = "z"
Output: "x"
Explanation: There are no characters in letters that is lexicographically greater than 'z' so we return letters[0].

public class MainJava {
    public static void main(String[] args) {
        char arr[]={'c','f','j'},target='a';
        System.out.println(nextGreatestLetter(arr, target));//c
    }
    static char nextGreatestLetter(char[] letters, char target) {
        int s=0,e=letters.length-1;
        while(s<=e)
        {
            int mid=s+(e-s)/2;
            if(letters[mid]>target)
            {
                e=mid-1;
            }
            else
            {
                s=mid+1;
            }
        }
        return letters[s % letters.length];
    }
}
*/
//5.
//34. Find First and Last Position of Element in Sorted Array
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={5,7,7,7,7,8,8,10},target=7;
        int temp[]=new int[2];
        temp[0]=search(arr, target, true);
        temp[1]=search(arr, target, false);
        System.out.println(temp[0]+" "+temp[1]);// 1 4
    }
    static int search(int arr[],int target,boolean firstindex)
    {
        int ans=-1;
        int start = 0,end=arr.length-1;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(target<arr[mid])
            {
                end=mid-1;
            }
            else if(target>arr[mid])
            {
                start=mid+1;
            }
            else
            {
                ans=mid;
                if(firstindex)
                {
                    end=mid-1;
                }
                else
                {
                    start=mid+1;
                }
            }
        }
        return ans;
    }
}
*/
//6.find the peak in moutain array
/*
public class MainJava {
    public static void main(String[] args) {
        int arr[]={3,4,5,6,2};
        System.out.println(peakIndexInMountainArray(arr));
    }
    static int peakIndexInMountainArray(int[] arr) {
        int start=0,end=arr.length-1;
        while(start<end)
        {
            int mid = start+(end-start)/2;
            if(arr[mid]>arr[mid+1])
            {
                end=mid;
            }
            else 
            {
                start=mid+1;
            }
        }
        return end; // start and end both are pointing to the answer
    }
}
*/
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//3.bubble sort:
//space complexity:o(1)
//time complexity:o(n^2)
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={3,1,5,4,2};
        sort(arr);
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
    static void sort(int arr[])
    {
        for(int i=0;i<arr.length-1;i++)
        {
            for(int j=0;j<arr.length-i-1;j++)
            {
                if(arr[j]>arr[j+1])
                {
                    arr[j]=arr[j]*arr[j+1];
                    arr[j+1]=arr[j]/arr[j+1];
                    arr[j]=arr[j]/arr[j+1];
                }
            }
        }
    }
}
*/
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


//1.pattern printing:

//1.
/* 
public class MainJava {
    public static void main(String[] args) 
    {
        int num=5;
        for(int i=0;i<num;i++)
        {
            for(int j=0;j<num;j++)
            {
                System.out.print("* ");
            }
            System.out.println();
        }
    }
}

//output:
* * * * * 
* * * * * 
* * * * * 
* * * * * 
* * * * *
 */
//-------------------
//2.
/* 
public class MainJava {
    public static void main(String[] args) 
    {
        int num=5;
        for(int i=0;i<num;i++)
        {
            for(int j=0;j<i+1;j++)
            {
                System.out.print("* ");
            }
            System.out.println();
        }
    }
}

//output:
* 
* *
* * *
* * * *
* * * * *
 */
//-------------------

//3.
/* 
public class MainJava {
    public static void main(String[] args) 
    {
        int num=5;
        for(int i=0;i<num;i++)
        {
            for(int j=1;j<=i+1;j++)
            {
                System.out.print(j+" ");
            }
            System.out.println();
        }
    }
}

//output:
1 
1 2
1 2 3
1 2 3 4
1 2 3 4 5
 */

//-------------------

//4.
/* 
public class MainJava {
    public static void main(String[] args) 
    {
        int num=5;
        for(int i=1;i<=num;i++)
        {
            for(int j=0;j<i;j++)
            {
                System.out.print(i+" ");
            }
            System.out.println();
        }
    }
}
//output:
1 
2 2
3 3 3
4 4 4 4
5 5 5 5 5
 */

 //-------------------

//5.
/* 
public class MainJava {
    public static void main(String[] args) 
    {
        int num=5;
        for(int i=0;i<num;i++)
        {
            for(int j=0;j<num-i;j++)
            {
                System.out.print("* ");
            }
            System.out.println();
        }
    }
}

//output:
* * * * * 
* * * *
* * *
* *
*
*/


 //-------------------

//6.

/* 
public class MainJava {
    public static void main(String[] args) 
    {
        int num=5;
        for(int i=0;i<num;i++)
        {
            for(int j=1;j<=num-i;j++)
            {
                System.out.print(j+" ");
            }
            System.out.println();
        }
    }
}
//output:
1 2 3 4 5 
1 2 3 4
1 2 3
1 2
1
*/

 //-------------------

//7.
/* 
public class MainJava {
    public static void main(String[] args) 
    {
        int num=5;
        for(int i=0;i<num;i++)
        {
            //space
            for(int j=0;j<num-i-1;j++)
            {
                System.out.print("- ");
            }
            //star
            for(int j=0;j<(2*i)+1;j++)
            {
                System.out.print("* ");
            }
            //space
            for(int j=0;j<num-i-1;j++)
            {
                System.out.print("- ");
            }
            System.out.println();
        }
        
    }
}

//output:
- - - - * - - - -   4 1 4
- - - * * * - - -   3 3 3
- - * * * * * - -   2 5 2
- * * * * * * * -   1 7 1
* * * * * * * * *   0 9 0
*/


//-------------------

//8.

/* 
public class MainJava {
    public static void main(String[] args) 
    {
        int num=5;
        for(int i=0;i<num;i++)
        {
            for(int j=0;j<i;j++)
            {
                System.out.print("- ");
            }
            for(int j=0;j<(num*2)-(2*i+1);j++)
            {
                System.out.print("* ");
            }
            for(int j=0;j<i;j++)
            {
                System.out.print("- ");
            }
            System.out.println();
        }
        
    }
}

//output:
JAVA(ii)\" ; if ($?) { javac MainJava.java } ; if ($?) { java MainJava }
* * * * * * * * *        0  9  0
- * * * * * * * -        1  7  1
- - * * * * * - -        2  5  2
- - - * * * - - -        3  3  3
- - - - * - - - -        4  1  4
*/
//------------------------
//10.
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        for(int i=0;i<num*2-1;i++)
        {
            int end=i;
            if(i>=num){end=num*2-i-2;}
            for(int j=0;j<=end;j++)
            {
                System.out.print("* ");
            }
            System.out.println();
        }    
    }
}
//output:


*             1  0
* *           2  1 
* * *         3  2 
* * * *       4  3  
* * * * *     5  4
* * * *       4  5   (10-5-2) 0 to 3
* * *         3  6   (10-6-2) 0 to 2    
* *           2  7   (10-7-2) 0 to 1
*             1  8   (10-8-2) 0 to 0

*/

//----------------------------
//11.

/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        for(int i=0;i<num;i++)
        {
            int start=i%2==0?1:0;
            for(int j=0;j<i+1;j++)
            {
                System.out.print(start+" ");
                start=1-start;
            }
            System.out.println();
        }
    }
}

//output:
1 
0 1
1 0 1
0 1 0 1
1 0 1 0 1
*/


//----------------------------
//12.

/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        for(int i=1;i<=num;i++)
        {
            for(int j=1;j<=i;j++)
            {
                System.out.print(j+" ");
            }
            for(int j=1;j<=(num*2)-(2*i);j++)
            {
                System.out.print("- ");
            }
            for(int j=i;j>=1;j--)
            {
                System.out.print(j+" ");
            }
            System.out.println();
        }
    }
}

//output: 
1 - - - - - - - - 1     1 8 1
1 2 - - - - - - 2 1     2 6 2
1 2 3 - - - - 3 2 1     3 4 3
1 2 3 4 - - 4 3 2 1     4 2 4
1 2 3 4 5 5 4 3 2 1     5 0 5

*/

//--------------------------------------

//13.
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5,temp=1;
        for(int i=0;i<num;i++)
        {
            for(int j=0;j<i+1;j++)
            {
                System.out.print(temp+++" ");
            }
            System.out.println();
        }
    }
}
//output:
1 
2 3
4 5 6
7 8 9 10
11 12 13 14 15
*/


//------------------------------------

//14.
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        for(int i=0;i<num;i++)
        {
            for(int j=0;j<i+1;j++)
            {
                System.out.print((char)(65+j)+" ");
            }
            System.out.println();
        }
    }
}
//output:
A 
A B
A B C
A B C D
A B C D E
*/

//----------------------------------------

//15.
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        for(int i=0;i<num;i++)
        {
            for(int j=0;j<num-i;j++)
            {
                System.out.print((char)(65+j)+" ");
            }
            System.out.println();
        }
    }
}
A B C D E 
A B C D
A B C
A B
A
*/

//------------------------------

//16.
/* 

public class MainJava {
    public static void main(String[] args) {
        int num=5;
        for(int i=0;i<num;i++)
        {
            for(int j=0;j<=i;j++)
            {
                System.out.print((char)(65+i)+" ");
            }
            System.out.println();
        }
    }
}
A 
B B
C C C
D D D D
E E E E E

*/

//----------------------------------

//17.
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        
        for(int i=0;i<num;i++)
        {
            for(int j=0;j<num-i-1;j++)
            {
                System.out.print("- ");
            }
            char ch='A';
            int breakpoint=(2*i+1)/2;
            for(int j=1;j<=(2*i)+1;j++)
            {
                System.out.print(ch+" ");
                if(j<=breakpoint)
                {
                    ch++;
                }
                else
                {
                    ch--;
                }
            }
            for(int j=0;j<num-i-1;j++)
            {
                System.out.print("- ");
            }
            System.out.println();
        }
    }
}
//output:
- - - - A - - - - 
- - - A B A - - -
- - A B C B A - -
- A B C D C B A -
A B C D E D C B A
*/

//------------------------------------------

//18.
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5,ch=65+(num-1);
        for(int i=0;i<num;i++)
        {
            for(int j=0;j<i+1;j++)
            {
                System.out.print((char)(ch+j)+" ");
            }
            ch--;
            System.out.println();
        }
    }
}
//output:
E 
D E
C D E
B C D E
A B C D E
*/

//-------------------------------------------------

//21.
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        for(int i=0;i<num;i++)
        {
            if(i==0||i==num-1)
            {
                for(int j=0;j<num;j++)
                {
                    System.out.print("* ");
                }
                System.out.println("\n");
            }
            else 
            {
                for(int j=0;j<num;j++)
                {
                    System.out.print(j==0||j==num-1?"* ":"  ");
                }
                System.out.println("\n");
            }

        }
    }
}
//output:
* * * * * 

*       * 

*       * 

*       * 

* * * * *
*/

//-------------------------------------------------

//22.
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        for(int i=1;i<=num;i++)
        {
            for(int j=1;j<=num;j++)
            {
                if(i==j)
                {
                    System.out.print(i);
                }
                else if(j==num-i+1)
                {
                    System.out.print(num-i+1);
                }
                else
                {
                    System.out.print(" ");
                }
            }
            System.out.println();
        }
    }
}
//output:
1   5
 2 4
  3
 2 4
1   5
*/

//--------------------------------------------------
//23.
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        num=num*2;
        for(int i=0;i<=num;i++)
        {
            for(int j=0;j<=num;j++)
            {
                int temp=Math.min(Math.min(i,j),Math.min(num-i, num-j));
                System.out.print(temp+" ");
            }
            System.out.println();
        }
    }
}
//output:
0 0 0 0 0 0 0 0 0 0 0 
0 1 1 1 1 1 1 1 1 1 0 
0 1 2 2 2 2 2 2 2 1 0 
0 1 2 3 3 3 3 3 2 1 0 
0 1 2 3 4 4 4 3 2 1 0 
0 1 2 3 4 5 4 3 2 1 0 
0 1 2 3 4 4 4 3 2 1 0 
0 1 2 3 3 3 3 3 2 1 0 
0 1 2 2 2 2 2 2 2 1 0 
0 1 1 1 1 1 1 1 1 1 0
*/

//----------------------------------------------------------------------------------------------------------------------------------


//2.basics maths 

//1.count digit:
/* 
public class MainJava {
    public static void main(String[] args)
    {
        int num=1223,ctr=0;
        while(num>0)
        {
            ctr++;
            num/=10;
        }
        System.out.println(ctr);
    }
}
*/
//2.reverse number
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=-123,reverse=0;
        while(num!=0)
        {
            reverse=reverse*10+num%10;
            num/=10;
        }
        System.out.println(reverse);
    }
}
*/
//3.Palindrome Number
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=-121;
        if(num<0)
        {
            System.out.println(false);
            return;
        }
        int reverse=0,N=num;
        while(num!=0)
        {
            reverse=reverse*10+num%10;
            num/=10;
        }
        System.out.println(N==reverse);

    }
}
*/
//4.armstrong number 
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=371,len=(int)(Math.log10(num)+1),sum=0,N=num;
        while(num>0)
        {
            sum=sum+(int)(Math.pow(num%10,len));
            num/=10;
        }
        System.out.println(sum==N?"Yes":"No");//Yes
    }
}
*/
//5.Print all Divisors
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=36;
        for(int i=1;i<=num;i++)
        {
            if(num%i==0)
            {
                System.out.print(i+" ");//1 2 3 4 6 9 12 18 36 
            }
        }
    }
}
*/
//6.check for prime
/* 
import java.net.Socket;
class Prime
{
    public int isPrime(int num)
    {
        for(int i=2;i*i<=num;i++)
        {
            if(num%i==0){return 0;}
        }
        return 1;
    }
}
public class MainJava {
    public static void main(String[] args) {
        int num=22;
        if(num<=1)
        {
            System.out.print("No a Prime number");
            return;
        }
        Prime obj = new Prime();
        
        System.out.println(obj.isPrime(num)==1?"Prime Number":"Not a Prime Number");
    }
}
*/
//7.GCD (great common Divisor) or HCF Highest common factor
/* 
public class MainJava {
    public static void main(String[] args) {
        int num1=9,num2=12;
        for(int i=Math.min(num1, num2);i>=1;i--)
        {
            if(num1%i==0&&num2%i==0)
            {
                System.out.println(i); // 3
                return;
            }
        }
    }
}
*/

//-----------------------------------------------------------------------------------------------------------------------------------------
//3.recursion-when a function calls itself until a specified condition is met without base condition stack overflow is occur


//1.print name 5 times
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        function1(num);
    }
    static void function1(int num)
    {
        if(num==0)
        {
            return;
        }
        System.out.print("Hi ");//Hi Hi Hi Hi Hi 
        function1(num-1);//5 4 3 2 1 0
    }
}
*/
//2.print 1 to n
/* 
public class MainJava {
    public static void main(String[] args) {
        function(10, 1);
    }
    static void function(int num,int start)
    {
        if(num<start)
        {
            return;
        }
        System.out.print(start+" ");//1 2 3 4 5 6 7 8 9 10 
        function(num, start+1);
    }
}
*/
//3.print n to 1 and 1 to n
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        function(num);
    }
    static void function(int num)
    {
        if(num==0)
        {
            return;
        }
        System.out.print(num+" ");// 5 4 3 2 1
        function(num-1); // (5) 4 3 2 1 0
        System.out.print(num+" ");//1 2 3 4 5
    }
}
*/
//4.print 1 to n and  n to 1
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        function1(1,num);// 1 2 3 4 5
        System.out.println();
        function2(num);// 5 4 3 2 1
    }
    static void function1(int s,int num)
    {
        if(num<s)
        {
            return;
        }
        System.out.print(s+" ");
        function1(s+1, num);
    }
    static void function2(int num)
    {
        if(num==0)
        {
            return;
        }
        System.out.print(num+" ");
        function2(num-1);
    }
}
*/
//5.1 to n using bactracking
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        function(num);// 1 2 3 4 5
    }
    static void function(int num)
    {
        if(num==0)
        {
            return;
        }
        function(num-1);
        System.out.print(num+" "); 
    }
}
    function(5)   print(5)
        |            |
    function(4)   print(4)
        |            |
    function(3)   print(3)
        |            |
    function(2)   print(2)
        |            |
    function(1)    print(1)
        |            |
        V            |
    function(0) -> (return 0)      
*/
//6. n to 1 using bactracking
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        function(num);
    }
    static void function(int num)
    {
        if(num==0)
        {
            return;
        }
        System.out.print(num+" ");
        function(num-1);
    }
}
*/
//7.sum of n number
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        System.out.println(function(num, 0));//15
    }
    static int function(int num,int sum)
    {
        if(num==0)
        {
            return sum;
        }
        //sum=sum+num;  also same
        return function(num-1, sum+num);   
        //             5 0+5
        //             4 5+4
        //             3 9+3
        //             2 12+2
        //             1  14+1
        //             0 (return)
    }
}
*/
//8.sum of n number
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        System.out.println(function1(num));
    }
    static int function1(int num)
    {
        if(num==0)
        {
            return num;// 0
        }
        return num+function1(num-1);
        // 5+fun(4)                       5+10
        //   4+fun(3)                     4+6
        //      3+fun(2)                  3+3
        //        2+fun(1)                2+1
        //          1+fun(0)-->(return)-->1+0
        //              
    }
}
*/
//9.factorial of n
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=5;
        System.out.println(function1(num));
    }
    static int function1(int num)
    {
        if(num==0)
        {
            return 1;
        }
        return num*function1(num-1);
        // 5+fun(4)                       5*24
        //   4+fun(3)                     4*6
        //      3+fun(2)                  3*2
        //        2+fun(1)                2*1
        //          1+fun(0)-->(return)-->1*1
        //              
    }
}
*/
//10.reverse array
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={1,2,3,4,5,6,7};
        fun(arr, 0, arr.length-1); // arr 0 6
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
    static void fun(int arr[],int start ,int end)
    {
        if(start>=end)
        {
            return;
        }
        int temp=arr[start];
        arr[start]=arr[end];
        arr[end]=temp;
        fun(arr, start+1, end-1);
        // swap(0,6)
        // fun(arr,1,5)
        //          |
        //     swap(1,5)
        //     fun(arr,2,4)
        //            |
        //        swap(2,4)
        //        fun(arr,3,3) --> return 

    }
}
*/
//11.reverse array
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={1,2,3,4,5,6,7};
        fun(arr, 0); // arr 0 6
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
    static void fun(int arr[],int start)
    {
        if(start>=arr.length/2)
        {
            return;
        }
        int temp=arr[start];
        arr[start]=arr[arr.length-1-start];
        arr[arr.length-1-start]=temp;
        fun(arr, start+1);
    }
}
*/
//12.string palindrome or not
/* 
public class MainJava {
    public static void main(String[] args) {
        String str="malayalam";
        System.out.println(function(str, 0));// true
    }
    static boolean function(String str,int start)
    {
        if(start>=str.length()/2)
        {
            return true;
        }
        if(str.charAt(start)!=str.charAt(str.length()-1-start))
        {
            return false;
        }
        return function(str, start+1);
    }
}
// function("malayalam", 0)
//     |
//     |--- function("malayalam", 1)  // str.charAt(0) == str.charAt(8) ('m' == 'm')
//             |
//             |--- function("malayalam", 2)  // str.charAt(1) == str.charAt(7) ('a' == 'a')
//                     |
//                     |--- function("malayalam", 3)  // str.charAt(2) == str.charAt(6) ('l' == 'l')
//                             |
//                             |--- function("malayalam", 4)  // str.charAt(3) == str.charAt(5) ('a' == 'a')
//                                     |
//                                     |--- function("malayalam", 5)  // start >= str.length()/2 (base case)
//                                             |
//                                             |--- return true
//                                     |
//                                     |--- return true
//                             |
//                             |--- return true
//                     |
//                     |--- return true
//             |
//             |--- return true
//     |
//     |--- return true
*/
//13.multiple recursion calls (fibonacce number)
// 0 1 2 3 4 5 6 
// 0 1 1 2 3 5 8
/* 
public class MainJava {
    public static void main(String[] args) {
        System.out.println(fib(6));
    }
    static int fib(int num)
    {
        if(num<=1)
        {
            return num;
        }
        int last=fib(num-1);
        int slast=fib(num-2);
        return last+slast;
    }
}
*/
//-------------------------------------------------------------------------------------------------------------------------------
//4.Hashing or Mapping

//1.Frequencies of Limited Range Array Elements
/*
// Input:
// N = 5
// arr[] = {2, 3, 2, 3, 5}
// Output:
// 0 2 2 0 1 
public class MainJava {
    public static void main(String[] args) {
        int N=5;
        int arr[]={2,3,2,3,5};
        int temp[]=new int[N+1];
        for(int i=0;i<N;i++)
        {
            temp[arr[i]]++;
        }
        for(int i=1;i<=N;i++)
        {
            System.out.println(i+"-->"+temp[i]);
        }
    }
}
*/

//2. 
// int inside of main size will be a arr[1e6] 1e6 ==> 10^6
// int global declaration is size will be arr[1e7] ==> 10^7
// boolean inside of main size will be a arr[1e7] 1e7 ==> 10^7
// boolena global declaration is size will be arr[1e8] ==> 10^8

//-------------------------------------------------------------------------------------------------------------------------------
//5.sorting
//1.bubble sort
//time complexity:o(n^2)
//space complexity:o(1)
/* 
public class MainJava {
    public static void main(String[] args) 
    {
        int arr[]={13,46,24,52,20,9};
        int len=arr.length;
        bubbleSort1(arr, len);
        for(int i=0;i<len;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
    static void bubbleSort1(int arr[],int len)
    {
        for(int i=len-1;i>=0;i--)
        {
            for(int j=0;j<=i-1;j++)
            {
                if(arr[j]>arr[j+1])
                {
                    int temp=arr[j];
                    arr[j]=arr[j+1];
                    arr[j+1]=temp;
                }
            }
        }
    }
}
*/
//2.selection sorting
//time complexity:o(n^2);
//space complexity:o(1)
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={13,46,24,52,20,9,0};
        int len=arr.length;
        for(int i=0;i<len;i++)
        {
            int min=i;
            for(int j=i;j<len;j++)
            {
                if(arr[j]<arr[min])
                {
                    min=j;
                }
            }
            int temp=arr[min];
            arr[min]=arr[i];
            arr[i]=temp;
        }
        for(int i=0;i<len;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
}
*/
//3.inselection sort
//time complexity:o(n^2)
//space complexity:o(1)
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={4,5,1,2,3};
        int len=arr.length;
        for(int i=0;i<arr.length-1;i++)
        {
            for(int j=i+1;j>0;j--)
            {
                if(arr[j]<arr[j-1])
                {
                    int temp=arr[j];
                    arr[j]=arr[j-1];
                    arr[j-1]=temp;
                }
                else
                {
                    break;
                }
            }
        }
        for(int i=0;i<len;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
}
*/
//-------------------------------------------------------------------------------------------------------
//5.arrays
//1.longest second number in  array
/* 
import java.util.*;
public class MainJava {
    public static void main(String[] args) {
        int arr[]={1,23,342,1,12,23};
        System.out.println(longest(arr));
    }
    static int longest(int arr[])
    {
        int f_l=arr[0],s_l=Integer.MAX_VALUE;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]<f_l)
            {
                s_l=f_l;
                f_l=arr[i];
            }
            else if(arr[i]!=f_l&&arr[i]<s_l)
            {
                s_l=arr[i];
            }
        }
        return s_l;
    }
}
*/
//2.array is sorted or not
/*
public class MainJava {
    public static void main(String[] args) {
        int arr[]={2,3,4,5,1};
        for(int i=0;i<arr.length-1;i++)
        {
            if(arr[i]>arr[i+1])
            {
                System.out.println("Array Unsorted");
                return;
            }
        }
        System.out.println("Array is sorted");
    }
}
*/
//3.Left Rotate an array by one place
/* 
public class MainJava 
{
    public static void main(String[] args)
    {
        int arr[]={1,2,3,4,5};
        int temp=arr[0],i;
        for(i=1;i<arr.length;i++)
        {
            arr[i-1]=arr[i];
        }
        arr[i-1]=temp;
        for(i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");//2 3 4 5 1 
        }
    }
}
*/
//4.Left rotate an array by D places
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={1,2,3,4,5,6,7,8,9},k=3;
        // 4 5 6 7 8 9 1 2 3
        if(k>=arr.length)
        {
            k=k%arr.length;
        }
        int i=k;
        while(i<arr.length)
        {
            System.out.print(arr[i++]+" ");
        }
        i=0;
        while(i<k)
        {
            System.out.print(arr[i++]+" ");
        }

    }
}
*/
//5.Move Zeros to end
/* 
public class MainJava {
    public static void main(String[] args) {
        int[] arr = {1, 0, 2, 3, 2, 0, 0, 4, 5, 1};
        int j=0,z=0;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]!=0){arr[j++]=arr[i];}
            else{z++;}
        }
        while(j<arr.length)
        {
            arr[j++]=0;
        }
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
}
*/
//6.missing number 
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={3,0,1};
        for(int i=0;i<arr.length;)
        {
            int index=arr[i];
            if(arr[i]<arr.length&&arr[i]!=arr[index])
            {
                int temp=arr[i];
                arr[i]=arr[index];
                arr[index]=temp;
            }
            else
            {
                i++;
            }
        }
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]!=i)
            {
                System.out.println(i);
                return;
            }
        }
        System.out.println(arr.length);
    }
}
//output:2
*/
//7.Maximum Consecutive Ones
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={1,1,0,1,1,1,0,1,1,1,1,0};
        int ctr=0,max=0;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]==1){ctr++;}
            else
            {
                if(max<ctr)
                {
                    max=ctr;
                    ctr=0;
                }
            }
            if(i==arr.length-1)
            {
                if(max<ctr)
                {
                    max=ctr;
                }
            }
        }
        System.out.println(max);//4
    }
}

*/
//8.Find the number that appears once, and other numbers twice.
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={1,1,2,2,3,4,5,4,5};
        int temp=0;
        for(int i=0;i<arr.length;i++)
        {
            temp=temp^arr[i];
        }
        System.out.println(temp); //3
    }
}
*/
//9.longest substring 
/* 
public class MainJava {
    public static void main(String[] args) {
        int A[] = {10, 5, 2, 7, 1, 9};
        int K=15;
        System.out.println(lenOfLongSubarr(A, A.length, K));
    }
    static int lenOfLongSubarr (int A[], int N, int K) {
        int left=0,right=0,max=0;
        long sum=A[0];
        while(right<N)
        {
            while(left<=right&&sum>K)
            {
                sum=sum-A[left];
                left++;
            }
            if(sum==K)
            {
                if(max<right-left+1)
                {
                    max=right-left+1;
                }
            }
            right++;
            if(right<N){sum=sum+A[right];}
        }
        return max;
    }
}
*/
//10.2sum
/* 
import java.util.ArrayList;
import java.util.HashMap;
public class MainJava {
    public static void main(String[] args) {
        int arr[]={2,6,5,8,11};
        int target=14;
        
        System.out.println(fun(arr, target));// YES

        for(int i=0;i<arr.length;i++)
        {
            for(int j=i+1;j<arr.length-1;j++)
            {
                if(arr[i]+arr[j]==target)
                {
                    System.out.println("YES");
                    return;
                }
            }
        }
        System.out.println("NO");

    }
    static String fun(int arr[],int target)
    {
        ArrayList <Integer> list = new ArrayList<>();
        for(int i=0;i<arr.length;i++)
        {
            int temp=target-arr[i];
            if(list.contains(temp))
            {
                return "YES";
            }
            list.add(arr[i]);
        }
        return "NO";
    }
}
*/
//11.sorting in 0 1 2
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={0, 2, 1, 2, 0, 1};
        int s=0,i=0,e=arr.length-1;
        while(i<=e)
        {
            if(arr[i]==0)
            {
                int temp=arr[i];
                arr[i]=arr[s];
                arr[s]=temp;
                s++;
                i++;
            }
            else if(arr[i]==2)
            {
                int temp=arr[i];
                arr[i]=arr[e];
                arr[e]=temp;
                e--;
            }
            else if(arr[i]==1)
            {
                i++;
            }
        }
        for(int k=0;k<arr.length;k++)
        {
            System.out.print(arr[k]+" ");
        }
    }
}
*/
//12.Majority Element n/2
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={2,2,3,3,1,2,2};
        System.out.println(Brute(arr));// 2

        System.out.println(Brute(arr));// 2
    }
    static int Brute(int arr[])
    {
        for(int i=0;i<arr.length;i++)
        {
            int ctr=0;
            for(int j=0;j<arr.length;j++)
            {
                if(arr[i]==arr[j])
                {
                    ctr++;
                }
            }
            if(ctr>arr.length/2)
            {
                return arr[i];
            }
        }
        return -1;
    }
    static int DryRun(int arr[])
    {
        int element=0,ctr=0;
        for(int i=0;i<arr.length;i++)
        {
            if(ctr==0)
            {
                element=arr[i];
                ctr=1;
            }
            else if(element==arr[i])
            {
                ctr++;
            }
            else
            {
                ctr--;
            }
        }
        return element;
    }

}
*/
//13.Kadane's Algorithm maximum subarray 
/* 
import java.util.*;
public class MainJava {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int arr[]={-2,1,-3,4,-1,2,1,-5,4};
        // 4 -1 2 1 ==> 6
        int max=0,sum=0;
        for(int i=0;i<arr.length;i++)
        {
            sum+=arr[i];
            if(sum>max){max=sum;}
            if(sum<0){sum=0;}
        }
        System.out.println(max);
    }
}
*/
//14.Rearrange Array Elements by Sign positive == negative size
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={3,1,-2,-5,2,-4},e=0,o=1;
        int temp[]=new int[arr.length];
        //  3 -2 1 -5 2 -4
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]>0)
            {
                temp[e]=arr[i];
                e=e+2;
            }
            else
            {
                temp[o]=arr[i];
                o=o+2;
            }
        }
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(temp[i]+" ");
        }
    }
}
*/
//15.Rearrange Array Elements by Sign positive != negative size
/* 
     it's not a posible to do optimal solution so use butte or butter
*/

//16.Leaders in an Array problem
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={10,22,12,3,0,6};
        int max=0;
        for(int i=arr.length-1;i>=0;i--)
        {
            if(max<arr[i])
            {
                System.out.print(arr[i]+" ");//6 12 22
                max=arr[i];
            }
        }
        //using recursion in java
        System.out.println();
        function(arr, arr.length-1,0);//6 12 22
    }
    static void function(int arr[],int end,int max)
    {
        if(end==-1)
        {
            return;
        }
        if(max<arr[end])
        {
            System.out.print(arr[end]+" ");
            max=arr[end];
        }
        function(arr, end-1, max);
    }
}
*/


//17.Longest Consecutive Sequence
/* 
import java.util.*;
public class MainJava {
    public static void main(String[] args) {
        int arr[]={102,4,100,1,101,3,2,1,1},max=0;
        ArrayList<Integer> array = new ArrayList<>();
        for(int i=0;i<arr.length;i++)
        {
            if(!array.contains(arr[i])){array.add(arr[i]);}
        }
        for(int i=0;i<array.size();i++)
        {
            int len=0;
            int element=array.get(i);
            while(array.contains(element))
            {
                len++;
                element++;
            }
            if(max<len){max=len;}
        }
        System.out.println(max);
    }
}
*/

//18.set matrix as zero  
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[][]=
        {
            {1,1,1},
            {1,0,1},
            {1,1,1}
        };
        setZeroes(arr);
    }
    static void setZeroes(int[][] arr) {
        int col00=1;
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr[i].length;j++)
            {
                if(arr[i][j]==0)
                {
                    //row
                    arr[i][0]=0;
                    //col
                    if(j!=0)
                    {
                        arr[0][j]=0;
                    }
                    else
                    {
                        col00=0;
                    }
                }
            }
        }
        //inside a arr without col1 and row1
        for(int i=1;i<arr.length;i++)
        {
            for(int j=1;j<arr[i].length;j++)
            {
                if(arr[i][0]==0||arr[0][j]==0)
                {
                    arr[i][j]=0;
                }
            }
        }
        if(arr[0][0]==0)
        {
            for(int i=0;i<arr[0].length;i++)
            {
                arr[0][i]=0;
            }
        }
        if(col00==0)
        {
            for(int i=0;i<arr.length;i++)
            {
                arr[i][0]=0;
            }
        }
    }
}
*/
//19.Rotate Image by 90 degree
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[][]=
        {
            {1,2,3},
            {4,5,6},
            {7,8,9}
        };
        int len=arr.length;
        for(int i=0;i<len;i++)
        {
            for(int j=0;j<len;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
        function(arr);
        System.out.println("----------90-----------");
        for(int i=0;i<len;i++)
        {
            for(int j=0;j<len;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
        function(arr);
        System.out.println("----------180-----------");
        for(int i=0;i<len;i++)
        {
            for(int j=0;j<len;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
        function(arr);
        System.out.println("----------270-----------");
        for(int i=0;i<len;i++)
        {
            for(int j=0;j<len;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
        function(arr);
        System.out.println("----------360-----------");
        for(int i=0;i<len;i++)
        {
            for(int j=0;j<len;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
    }
    static void function(int arr[][])
    {
        //transpose
        for(int i=0;i<arr.length;i++)
        {
            for(int j=i;j<arr[0].length;j++)
            {
                int temp=arr[i][j];
                arr[i][j]=arr[j][i];
                arr[j][i]=temp;
            }
        } 
        //reverse
        int len=arr.length;
        for(int i=0;i<len;i++)
        {
            for(int j=0;j<len/2;j++)
            {
                int temp=arr[i][j];
                arr[i][j]=arr[i][len-1-j];
                arr[i][len-1-j]=temp;
            }
        }
    }
}
*/
//20.sprial matrix 
/* 
import java.util.ArrayList;
import java.util.List;

public class MainJava {
    public static void main(String[] args) {
        int arr[][]=
        {
            {1,2,3,4,5},
            {6,7,8,9,10},
            {11,12,13,14,15},
            {16,17,18,19,20},
            {21,22,23,24,25}
        };
        List<Integer> temp = new ArrayList<Integer>();
        int row_s=0,row_e=arr.length-1,col_s=0,col_e=arr[0].length-1;
        while(row_s<=row_e&&col_s<=col_e)
        {
            for(int i=col_s;i<=col_e;i++)
            {
                temp.add(arr[row_s][i]);
            }
            row_s++;
            for(int i=row_s;i<=row_e;i++)
            {
                temp.add(arr[i][col_e]);
            }
            col_e--;
            if(row_s>row_e||col_s>col_e)
            {
                break;
            }
            for(int i=col_e;i>=col_s;i--)
            {
                temp.add(arr[row_e][i]);
            }
            row_e--;
            for(int i=row_e;i>=row_s;i--)
            {
                temp.add(arr[i][col_s]);
            }
            col_s++;
        }
        for(int i=0;i<temp.size();i++)
        {
            System.out.print(temp.get(i)+" ");
        }
    }
}
*/
//21.pascal triangle
/* 
class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> col = new ArrayList<>();
        for(int i=0;i<numRows;i++)
        {
            List<Integer> row =new ArrayList<>();
            for(int j=0;j<=i;j++)
            {
                if(j==0||j==i)
                {
                    row.add(1);
                }
                else
                {
                    List<Integer> pre = col.get(i-1);
                    row.add(pre.get(j)+pre.get(j-1));
                }
            }
            col.add(row);
        }
        return col;
        
    }
}
*/
//-------------------------------------------------------------------------------------------------------
//binary search:

//1.binary search in recursion
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={3,4,6,7,9,12,16,17},target=17;
        System.out.println(fun(arr, 0, arr.length-1, target));
    }
    static int fun(int arr[],int start,int end,int target)
    {
        if(start>end)
        {
            return -1;
        }
        int mid=start+(end-start)/2;
        if(target>arr[mid])
        {
            start=mid+1;
            return fun(arr, start, end, target);
        }
        else if(target<arr[mid])
        {
            end=mid-1;
            return fun(arr, start, end, target);
        }
        return mid;
    }
}
*/
//2.Search Insert Position
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={1,3,5,6},target=5;
        int start=0,end=arr.length-1,ans=arr.length;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(arr[mid]>=target)
            {
                ans=mid;
                end=mid-1;
            }
            else
            {
                start=mid+1;
            }
        }
        System.out.println(ans);
    }
}
*/

//3.Search Element in Rotated Sorted Array-I
/* 
public class MainJava {
    public static void main(String[] args)
    {
        int arr[]={7,8,9,1,2,3,4,5,6},target=1;
        int start=0,end=arr.length-1;
        while(start<=end)
        {
            int mid=start+(end-start);
            if(arr[mid]==target)
            {
                System.out.println(mid);
                return;
            }
            if(arr[start]<=arr[mid])
            {
                if(arr[start]<=target &&target<=arr[mid])
                {
                    end=mid-1;
                }
                else
                {
                    start=mid+1;
                }
            }
            else
            {
                if(arr[mid]<=target &&target<=arr[end])
                {
                    start=mid+1;
                }
                else
                {
                    end=mid-1;
                }
            }
        }
        System.out.println(-1);
    }
}
*/
//4.Minimum in Rotated Sorted Array
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[]={4,5,1,2,3};
        int start=0,end=arr.length-1;
        int ans=Integer.MAX_VALUE;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(arr[start]<arr[mid])
            {
                ans=Math.min(ans,arr[start]);
                start=mid+1;
            }
            else
            {
                ans=Math.min(ans,arr[mid]);
                end=mid-1;
            }
        }
        System.out.println(ans);
    }
}
*/

//-------------------------------------------------------------------------------------------------------------------------------------
//recursion
//1.Merge sort
/* 
public class MainJava {
    public static void main(String[] args) {
        int arr[] = {38, 27, 43, 3, 9, 82, 10};
        int left = 0, right = arr.length - 1;
        mergesort(arr, left, right);
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
    }
    static void mergesort(int arr[], int left, int right) {
        if (left < right) {
            int mid = left + (right - left) / 2;
            mergesort(arr, left, mid);
            mergesort(arr, mid + 1, right);
            merge(arr, left, mid, right);
        }
    }
    static void merge(int arr[], int left, int mid, int right) {
        int n1 = mid - left + 1;
        int n2 = right - mid;
        int L[] = new int[n1];
        int R[] = new int[n2];
        for (int i = 0; i < n1; i++) {
            L[i] = arr[left + i];
        }
        for (int j = 0; j < n2; j++) {
            R[j] = arr[mid + 1 + j];
        }
        int i = 0, j = 0, k = left;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }
}
*/
//2.pow function 
/* 
public class Main {
    public static void main(String[] args)
    {
        double x=2.00000;
        int n=10;
       System.out.println( myPow(x, n));
    }
    static double myPow(double x, int n)
    {
        double ans = 1.0;
        long nn = n;
        if (nn < 0) nn = -1 * nn;
        while (nn > 0) {
          if (nn % 2 == 1) {
            ans = ans * x;
            nn = nn - 1;
          } else {
            x = x * x;
            nn = nn / 2;
          }
        }
        if (n < 0) ans = (double)(1.0) / (double)(ans);
        return ans;
      }
}
*/
//3.sqrt
/* 
public class Main {
    public static void main(String[] args) {
        int x=4;
        int start=0,end=x;
        int ans=0;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(mid<=x/mid)
            {
                start=mid+1;
                ans=mid;
            }
            else
            {
                end=mid-1;
            }
        }
        System.out.println(ans);
    }
}
*/

//------------------------------------------------------------------------------------------------------------------------
//bit manipulation in java
//  int x=1 --->            ..000 0001  --->32 bit   
//  long x=1 --->            ..000 0001  --->64 bit           

//1.check if the ith bit is set or not:
/* 
public class Main {
    public static void main(String[] args) {
        int N=13;
        int i=2;
        //left shift
        if( ( N & (1<<2))!=0)
        {
            System.out.println("ith bit is set...." ); 
        }
        else
        {
            System.out.println("ith bit is not set....");
        }
        //right shift
        if( ((N>>2)&1) !=0)
        {
            System.out.println("ith bit is set...." ); 
        }
        else
        {
            System.out.println("ith bit is not set....");
        }
        System.out.println(N); //13
    }
}
*/
//2.get ith bit
/* 
public class Main {
    public static void main(String[] args) {
        int N=13;
        int i=2;
        System.out.println( ((N>>2)&1) );
    }
}
*/
//3.set the ith bit
/* 
public class Main {
    public static void main(String[] args) {
        int N=9;
        int i=2;
        System.out.println( (N|( 1<<i)) );//13
    }
}
*/
//4.clear ith bit 
/* 
public class Main {
    public static void main(String[] args) {
        int N=13;
        int i=2;
        System.out.println( ( N & ~(1<<iv )) );//9
    }
}
*/
//5.toggle the ith bit
/* 
public class Main {
    public static void main(String[] args) {
        int N=13;
        int i=2;
        System.out.println( (N ^ (1<<i)));//7
    }
}
*/
//6.remove the last set bit (right most)
/* 
public class Main {
    public static void main(String[] args) {
        int num=13;
        System.out.println( num&num-1);// 12
    }
}
*/
//7.check if the number is a power 2
/* 
public class Main {
    public static void main(String[] args) {
        int num=15;
        if((num&num-1)==0)
        {
            System.out.println("power 2");
        }
        else
        {
            System.out.println("Not power 2");
        }
    }
}
*/
//8.count set bit in given number
/* 
public class Main {
    public static void main(String[] args) {
        int num=12,ctr=0;
        while(num>0)
        {
            if(num%2==1)
            {
                ctr++;
            }
            num/=2;
        }
        System.out.println(ctr);
        num=12;
        ctr=0;
        while(num>0)
        {
            ctr+=num&1;
            num=num>>1;//num=num/2
        }
        System.out.println(ctr);
        num=12;
        ctr=0;
        while(num!=0)
        {
          num=num&(num-1);
          ctr++;
        }
        System.out.println(ctr);
    }
        //in binary search ---> use (low+high)>>1
}
*/
//9.mininum bit flips to covert the number a to b
/* 
public class Main {
    public static void main(String[] args) {
        int a=10,b=7;
        int ans=a^b;
        //10 --> 1 0 1 0
        //7  --> 0 1 1 1
        //^  --> 1 1 0 1
        int ctr=0;
        while(ans!=0)
        {
            ans=ans&ans-1;
            ctr++;
        } 
        System.out.println(ctr);//3
    }
}
*/
//10.power set (print all subsets)  
/* 
import java.util.*;
pubic class Main {
    public static void main(String[] args) {
        int num = 3;
        int arr[] = {1, 2, 3};
        int subset = 1 << num;
        List<List<Integer>> ans = new ArrayList<>();

        for (int i = 0; i < subset; i++) {
            List<Integer> temp = new ArrayList<>();
            for (int j = 0; j < num; j++) {
                if ((i & (1 << j)) != 0) {
                    temp.add(arr[j]);
                }
            }
            ans.add(temp);
        }

        for (int i = 0; i < ans.size(); i++) {
            System.out.println(ans.get(i));
        }
    }
}
*/ 
//11.single number I
/* 
public class Main {
    public static void main(String[] args) {
        int arr[]={4,1,2,1,2};
        int ans=0;
        for(int i=0;i<arr.length;i++)
        {
            ans=ans^arr[i];
        }
        System.out.println(ans);//4
    }
}
*/
//12.xor 1 to n
/* 
public class Main {
    public static void main(String[] args) {
        int num=7;
        // num=1    --->       1      ---> 1
        // num=2    --->      1^2     ---> 3   
        // num=3    --->     1^2^3    ---> 0
        // num=4    --->    1^2^3^4   ---> 4
        
        // num=5    --->              ---> 1
        // num=6    --->              ---> 7   
        // num=7    --->              ---> 0
        // num=8    --->              ---> 8
        System.out.println(fun(6));//7
    }
    static int fun(int num)
    {
        if(num%4==1)
        {
            return 1;
        }
        else if(num%4==2)
        {
            return num+1;
        }
        else if(num%4==3)
        {
            return 0;
        }
        else
        {
            return num;
        }
    }
}
*/
//13.xor a to b
/* 
public class Main {
    public static void main(String[] args) {
        int a=4,b=7;
        System.out.println(fun(a-1)^fun(b));//7
    }
    static int fun(int num)
    {
        if(num%4==1)
        {
            return 1;
        }
        else if(num%4==2)
        {
            return num+1;
        }
        else if(num%4==3)
        {
            return 0;
        }
        else
        {
            return num;
        }
    }
}
*/
//divide two integers without using 
/* 
public class Main {
    public static void main(String[] args) {
        int dividend=22,divisor=3;
        int sum=0,ctr=0;
        while(sum+divisor<=dividend)
        {
            ctr++;
            sum+=divisor;
        }
        System.out.println("Div: "+ctr); //7
        System.out.println("Mod: "+(dividend-sum));//1
    }
}
*/
//1.island
/* 
class Solution {
    public int numIslands(char[][] grid) {
        int ans=0;
        for(int i=0;i<grid.length;i++)
        {
            for(int j=0;j<grid[0].length;j++)
            {
                if(grid[i][j]=='1')
                {
                    ans+=1;
                    fn(grid,i,j);
                }
            }
        }
        return ans;
    }
    static void fn(char ch[][],int i,int j)
    {
        if(i<0 || i>=ch.length ||j<0||j>=ch[0].length||ch[i][j]=='0')
        {
            return;
        }
        ch[i][j]='0';
        fn(ch,i,j+1);
        fn(ch,i,j-1);
        fn(ch,i+1,j);
        fn(ch,i-1,j);
    }
}
*/
//2.time to buy and sell
/* 
class Solution {
    public int maxProfit(int[] prices) {
        int minsharebuy=prices[0],maxprofit=0;
        for(int i=1;i<prices.length;i++)
        {
            int cost = prices[i]-minsharebuy;
            if(cost>maxprofit)
            {
                maxprofit=cost;
            }
            if(minsharebuy>prices[i])
            {
                minsharebuy=prices[i];
            }
        }
        return maxprofit;
    }
}
*/
//3.jump game
/* 
public class Main {
    public static void main(String[] args) {
        int arr[]={2,3,1,1,4};
        int step=arr[i];
        for(int i=1;i<arr.length;i++)
        {
            step--;
            if(step<0)
            {
                System.out.println("TRUE");
                break;
            }
            if(i==arr.length-1)
            {
                System.out.println("FALSE");
                break;
            }
            if(step<arr[i])
            {
                step=arr[i];
            }
        }
        System.out.println(step);
    }
}
*/
//4.
/* 
class Solution {
    public int romanToInt(String s) {
        Map <Character,Integer> temp = new HashMap<>();
        temp.put('I',1);
        temp.put('V',5);
        temp.put('X',10);
        temp.put('L',50);
        temp.put('C',100);
        temp.put('D',500);
        temp.put('M',1000);
        int i,result=temp.get(s.charAt(s.length()-1));
        for(i=s.length()-2;i>=0;i--)
        {
            if(temp.get(s.charAt(i))<temp.get(s.charAt(i+1)))
            {
                result-=temp.get(s.charAt(i));
            }
            else 
            {
                result+=temp.get(s.charAt(i));
            }
        }
        return result;
     }
}
*/

//---------------------------------------------------------------------------------------------------------------------
//two pointer
//1.constant window
/* 
    longest sub sum in size of k 
    arr[]={-1,2,3,3,4,5,-1};
    k=4;
public class Main {
    public static void main(String[] args) {
        int arr[]={-1,2,3,3,4,5,-1};
        //          -1 2 3 3 => 7
        //             2 3 3 4 => 12
        //               3 3 4 5 => 15
        //                 3 4 5 -1 ==> 11
        int k=4,sum=0,j=0;
        k--;
        for(int i=0;i<arr.length;i++)
        {
            sum+=arr[i];
            if(i>=k)
            {
                System.out.println(sum);
                sum=sum-arr[j];
                j++;
            }
        }
    }
}
*/
//2.longest subarray/substring sum<=k retur size of max len
/* 
public class Main {
    public static void main(String[] args) {
        int arr[]={2,5,1,7,10},k=14,max=0;
        int sum=0;
        //  2                ==> 1 
        //  2+5=7            ==> 2 
        //  2+5+1=8          ==> 3 
        //  2+5+1+7=15       ==> 4 X
        //    5              ==> 1
        //    5+1            ==> 2
        //    5+1+7=13       ==> 3
        //    5+1+7+10=23    ==> 3 X
        //    1              ==> 1
        //    1+7            ==> 2
        //    1+7+10=18      ==> 3 X
        //    7              ==> 1
        //    7+10           ==> 2 X
        //    10             ==> 1  
        //1.brute
        //tc - o(n^2)
        //sp - o(1)
        for(int i=0;i<arr.length;i++)
        {
            sum=0;
            for(int j=i;j<arr.length;j++)
            {
                sum+=arr[j];
                if(sum<=k)
                {
                    max=Math.max(max, j-i+1);
                }
            }
        }
        System.out.println("Brute: "+max);
        //2.better
        // tc - o(2N)
        // sp - o(1)
        int arr1[]={2,5,1,10,10};
        int l=0,r=0;
        sum=0;
        max=0;
        while (r<arr1.length) 
        {
            sum+=arr[r];
            while(sum>k)
            {
                sum=sum-arr[r];
                l++;
            }
            if(sum<=k)
            {
                max=Math.max(max, r-l+1);
            }
            r++;    
        }
        System.out.println("Better: "+max);
        //3.optimal
        int arr2[]={2,5,1,10,10};
        l=0;
        r=0;
        sum=0;
        max=0;
        while(r<arr2.length)
        {
            sum+=arr[r];
            if(sum>k)
            {
                sum=sum-arr[r];
                l++;
            }
            if(sum<=k)
            {
                max=Math.max(max, r-l+1);
            }
            r++;   
        }
        System.out.println("optimal: "+max);
    }
}
*/
//3.maximum points you can obtain form the cards 
/*
public class Main {
    public static void main(String[] args) {
        // time complexity : o(2*k)
        // space complexity: o(1)
        int arr[]={6,2,3,4,7,2,1,7,1},k=4;
        int leftsum=0,rightsum=0;
        int i;
        for(i=0;i<k;i++)
        {
            leftsum+=arr[i];
        }
        int max=leftsum;
        int j=arr.length-1;
        for(i=k-1;i>=0;i--)
        {
            leftsum=leftsum-arr[i];
            // 6+2+3 ==> 11
            // 6+2   ==> 8 
            // 6     ==> 6
            // 0     ==> 0
            rightsum=rightsum+arr[j];
            // 1       ==> 1
            // 1+7     ==> 8
            // 1+7+1   ==> 9
            // 1+7+1+2 ==> 11 
            j=j-1;
            System.out.println(leftsum+rightsum);
            max=Math.max(max,leftsum+rightsum);// 11+1,8+8,6+9,0+11 ==> 12,16,15,11
        }
       System.out.println("Maximum is :"+max);
    }
}
*/
//4.longest substring without repeating characters
/*  
public class Main {
    public static void main(String[] args) {
        String str="cadbzabcd"; 
        //          cadbz
        //           adbz
        //            dbza
        //             bza
        //               zabcd
        //                abcd
        //1.brute
        //time complexity:o(n^2)
        //space complexity:o(256)
        int max=0;
        for(int i=0;i<str.length();i++)
        {
            boolean arr[]=new boolean[256];
            for(int j=i;j<str.length();j++)
            {
                if(arr[str.charAt(j)])
                {
                    break;
                }
                max=Math.max(max,j-i+1);
                arr[str.charAt(j)]=true;
            }
        }
        System.out.println("1.brute: "+max);
        int l=0,r=0;
        max=0;
        int arr[]=new int[256];
        while(r<str.length())
        {
            if(arr[str.charAt(r)]!=0)
            {
                if(arr[str.charAt(r)]>=l)
                {
                    l=arr[str.charAt(r)]+1;
                }

            }
            max=Math.max(max,r-l+1);
            arr[str.charAt(r)]=r;
            r++; 
        }
        System.out.println("1.optimal: "+max);
        
    }
}
*/
//4.Max consecutive ones (longest subarray with at most k zero)
/* 
public class Main {
    public static void main(String[] args) {
        int arr[]={1,1,1,0,0,0,1,1,1,1,0};
        int k=2,max=0;
        //1.brute
        //tc:o(n^2)
        //sc:o(1)
         for(int i=0;i<arr.length;i++)
        {
            int K=k,ctr=0;
            for(int j=i;j<arr.length;j++)
            {
                if(arr[j]==1)
                {
                    ctr++;
                    System.out.print(arr[j]+" ");
                }
                else if(arr[j]==0&&K!=0) 
                {
                    ctr++;
                    K=K-1;
                    System.out.print(arr[j]+" ");
                }
                else
                {
                    if(max<ctr){max=ctr;}
                    break;
                }
            }
            System.out.println();
            // 0 0
            // 0 0 1 1 1 1
            // 0 1 1 1 1 0
            // 1 1 1 1 0
            // 1 1 1 0
            // 1 1 0
            // 1 0
            // 0
            //2.optimal
            
        }
        System.out.println("1.brute:"+max);
        int left=0,right=0,zero=0;
        max=0;
        while(right<arr.length)
        {
            if(arr[right]==0)
            {
                zero++;
            }
            if(zero>k)
            {
                if(arr[left++]==0)
                {
                    zero--;
                }
            }
            if(zero<=k)
            {
                max=Math.max(max,right-left+1);
            }
            right++;
        }
        System.out.println("2.Optimal: "+max);
        
    }
}
*/

//5.Sum of Square Numbers
/* 
Given a non-negative integer c, decide whether there're two integers a and b such that a2 + b2 = c.
Example 1:
    Input: c = 5
    Output: true
    Explanation: 1 * 1 + 2 * 2 = 5
Example 2:
    Input: c = 3
    Output: false

public class Main {
    public static void main(String[] args) {
        int num=2;
        System.out.println(judgeSquareSum(num));
    }
    static boolean judgeSquareSum(int c) {
        long right=(int)(Math.sqrt(c)),left=0;
        while(left<=right)
        {
            long sum = (left*left)+(right*right);
            if( sum > c)
            {
                right--;
            }
            else if ( sum < c )
            {
                left++;
            }
            else 
            {
                return true;
            }
        }
        return false;
    }
}
*/

//6.Fruit Into Baskets (leetcode:904)
// two basket contains only unique fruits
/* 
import java.util.*;
public class Main {
    public static void main(String[] args) {
        int arr[]={3,3,3,1,2,1,1,2,3,3,4};
        int max=0;
        //1.brute 
        //tc:o(n^2)
        //sc:o(3)
        for(int i=0;i<arr.length;i++)
        {
            Set<Integer>temp=new HashSet<>();
            for(int j=i;j<arr.length;j++)
            {
                temp.add(arr[j]);
                if(temp.size()<=2)
                {
                    max=Math.max(max,j-i+1);
                }
                else
                {
                    break;
                }
            }
        }
        System.out.println(max);
        //2.
    }
}
*/
//7.longest substring with at most k distinct character
/* 
import java.util.*;
public class Main {
    public static void main(String[] args) {
        String str="aabbccd";
        int k=2,max=0;
        //1.brute
        //tc:o(n^2)
        //sc:o(3)
        for(int i=0;i<str.length();i++)
        {
            Set<Character>temp=new HashSet<>();
            for(int j=i;j<str.length();j++)
            {
                temp.add(str.charAt(j));
                if(temp.size()<=k)
                {
                    max=Math.max(max, j-i+1);
                }
                else
                {
                    break;
                }
            }
        }
        System.out.println("1.brute: "+max); 
        int i = 0;
        // aabbccd 
        Map<Character, Integer> map = new HashMap<>();
        for (int j = 0; j < str.length(); j++) 
        {
            char ch = str.charAt(j);
            map.put(ch, map.getOrDefault(ch, 0) + 1);
            while (map.size() > k)
            {
                char leftChar = str.charAt(i);
                map.put(leftChar, map.get(leftChar) - 1);
                if (map.get(leftChar) == 0) {
                    map.remove(leftChar);
                }
                i++;
            }
            max = Math.max(max, j - i + 1);
        }
        System.out.println(max);
    }
}
*/
//number of substring containing all three character
/* 
import java.util.*;
public class Main {
    public static void main(String[] args) {
        String str="bbacba";
        int k=3,max=0;
        //1.brute
        for(int i=0;i<str.length();i++)
        {
            Set<Character> temp = new HashSet<>();
            for(int j=i;j<str.length();j++)
            {
                temp.add(str.charAt(j));
                if(temp.size()<=k)
                {
                    max=Math.max(max, j-i+1);
                }
                else
                {
                    break;
                }
            }
        }
        System.out.println(max);
        //2.two pointers
        int i = 0;
        // bba 
        Map<Character, Integer> map = new HashMap<>();
        for (int j = 0; j < str.length(); j++) 
        {
            char ch = str.charAt(j);
            map.put(ch, map.getOrDefault(ch, 0) + 1);
            while (map.size() > k)
            {
                char leftChar = str.charAt(i);
                map.put(leftChar, map.get(leftChar) - 1);
                if (map.get(leftChar) == 0) {
                    map.remove(leftChar);
                }
                i++;
            }
            max = Math.max(max, j - i + 1);
        }
        System.out.println(max);
    }
}
*/
//binary subarray with sum is equal to goal count it
/* 
public class Main {
    public static void main(String[] args) {
        int arr[]={1,0,0,1,1,0};
        int goal=2;
        int l=0,r=0,sum=0,ctr=0;
        while(r<arr.length)
        {
            sum+=arr[r];
            while(sum>goal)
            {
                sum=sum-arr[l];
                l++;
            }
            ctr=ctr+(r-l+1);
            r++;
        }
        System.out.println(ctr);
    }
}
*/
//count the number of nice subarray 
// mean that k the subarraya contains only k odd number
/* 
public class Main {
    public static void main(String[] args) {
        int arr[]={1,1,2,1,1},k=3;
        for(int i=0;i<arr.length;i++)
        {
            arr[i]=arr[i]%2==1?1:0;
        }
        int l=0,r=0,sum=0,ctr=0;
        while(r<arr.length)
        {    
            sum+=arr[r];
            while(sum>r)
            {
                sum=sum-arr[l];
                l++;
            }
            ctr++;
            r++;
        }
        System.out.println(ctr);
    }
}
*/
//----------------------------------------------------------------------------------------------------------------------------
//greedy algorithm:

//1.assign cookies:
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args) 
    {
        int greed[]={1,5,3,3,4};//children
        int s[]={4,2,1,2,1,3};//cookies
        //assign cookies by the children<=cookies
        Arrays.sort(greed);
        Arrays.sort(s);
        int children=0,cookies=0;
        while(cookies<s.length&&children<greed.length)
        {
            if(s[cookies]>=greed[children])
            {
                children++;
                cookies++;
            }
            else
            {
                cookies++;
            }
        }
        System.out.println(children);
    }
}
*/
//2. 860.Lemonade Change lemon cost ($5)
/* 
public class Main 
{
    public static void main(String[] args) 
    {
        int arr[]={5,5,5,10,20};
        int five=0,ten=0;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]==5)
            {
                five++;
            }
            else if(arr[i]==10)
            {
                ten++;
                if(five>=1)
                {
                    five--;
                }
                else
                {
                    System.out.println("False");
                    return;
                }
            }
            else 
            {
                if(five>=3)
                {
                    five=five-3;
                }
                else if(five>=1&&ten>=1)
                {
                    five--;
                    ten--;
                }
                else
                {
                    System.out.println("False");
                    return;
                }
            }
        }
        System.out.println("True");
    }
}
*/
//3.shortest job first:
/* 
import java.util.*;
public class Main 
{
    public static void main(String[] args)
    {
        int arr[]={4,3,7,1,2};
        Arrays.sort(arr);
        int waiting_time=0,sum_of_wating_time=0;
        for(int i=0;i<arr.length-1;i++)
        {
            System.out.print(waiting_time+" ");
            waiting_time=waiting_time+arr[i];
            sum_of_wating_time+=waiting_time;
        } 
        System.out.println();
        System.out.println(waiting_time+" "+sum_of_wating_time);
        System.out.println(sum_of_wating_time/arr.length);
    }
}
*/
//1.Reverse Paris leetcode:492

public class Main {
    public static void main(String[] args) {
        int arr[]={40,25,19,12,9,6,2},ctr=0;
        //  2 6 9 12 19 25 40
        brute(arr);
    } 
    static int brute(int arr[])
    {
        int ctr=0;
        for(int i=0;i<arr.length;i++)
        {
            for(int j=i+1;j<arr.length;j++)
            {
                if(arr[i]>(arr[j]*2))
                {
                    System.out.println(arr[i]+" "+arr[j]);
                    ctr++;
                }
            }
        }
        return ctr;
    }
}




















//-------------------------------------------------------------------------------------------------------
//5.String:

//1.
//1021.remove outer most element:
// Input: s = "(()())(())"
// Output: "()()()"
/* 
public class MainJava {
    public static void main(String[] args) {
        System.out.println(removeOuterParentheses("(()())(())"));//()()()
    }
    static String removeOuterParentheses(String s) {
        String str="";
        boolean temp=false;
        for(int i=0,ctr=0;i<s.length();i++)
        {
            if(s.charAt(i)=='(')
            {
                ctr++;
            }
            else
            {
                ctr--;
            }
            if(ctr==2&&s.charAt(i)=='(')
            {
                temp=true;
            }
            else if(ctr==0&&s.charAt(i)==')')
            {
                temp=false;
            }
            if(temp)
            {
                str+=s.charAt(i);
            }
        }
        return str;
    }
}
*/
//2.reverse word in recursion:
/* 
public class MainJava {
    public static void main(String[] args) {
        String str[]={"the","End","Of","Year"};
        function(str, 0);
        for(int i=0;i<str.length;i++)
        {
            System.out.print(str[i]+" ");//Year Of End the 
        }
    }
    static void function(String str[],int i)
    {
        if(i>=str.length/2)
        {
            return;
        }
        String temp=str[i];
        str[i]=str[str.length-1-i];
        str[str.length-1-i]=temp;
        function(str, i+1);
    }
}
*/
//3.1903. Largest Odd Number in String
/* 
public class MainJava {
    public static void main(String[] args) {
        int num=1231242322;
        while(num>0)
        {
            if((num&1)==1)
            {
                System.out.print(num);//12312423
                return;
            }
            num/=10;
        }
    }
}
*/
//4.Longest Common Prefix
/* 
public class MainJava {
    public static void main(String[] args) {
        String str[]={"flower","flow","flight"};
        int min=0;
        for(int i=0;i<str.length;i++)
        {
            if(min>str[i].length())
            {
                min=str[i].length();
            }
        }
        String temp1="";
        for(int i=0;i<min;i++)
        {
            String temp2="";
            for(int j=0;j<str.length;j++)
            {
                if(str[i].charAt(0)==str[j].charAt(j))
                {
                    temp2+=str[j].charAt(i);
                }
                else
                {
                    break;
                }
            }
            if(temp2.length()>temp1.length())
            {
                temp1=temp2;
            }
        }
        System.out.println(temp1);;
    }
}
*/

//1.Program to print the diamond shape
/* 
public class javasoho1 
{
    public static void main(String[] args) 
    {
        int num=5;
        diamond_shape1(num);
        diamond_shape2(num);
    }
    static void diamond_shape1(int num)
    {
        for(int i=1;i<=num*2;i++)
        {
            for(int j=1;j<=num;j++)
            {
                if(i<=num)
                {
                    System.out.print(j<=num-i?" ":"* ");
                }
                else
                {
                    System.out.print(j<=(i%(num+1))?" ":"* ");
                }
            }
            System.out.println();
        }
    }
    static void diamond_shape2(int num)
    {
        for(int i=1;i<=num*2;i++)
        {
            for(int j=1;j<=num;j++)
            {
                System.out.print( i<=num ?j<=num-i?" ":"* ":j<=(i%(num+1))?" ":"* ");
            }            
            System.out.println();
        }
    }
}
*/
//2.Make a Distinct Digit Array
// Input: nums = [131, 11, 48]
// Output: 1 3 4 8
/* 
public class javasoho1 
{
    public static void main(String[] args)
    {
        int Array1[]={131,11,48};
        simple1(Array1);
    }
    static void simple1(int arr[])
    {
        int Distinct_Digit_Array[]=new int[10];
        for(int i:arr)
        {
            int number=i;
            while(number>0)
            {
                Distinct_Digit_Array[number%10]++;
                number/=10;
            }
        }
        for(int i=0;i<10;i++)
        {
            System.out.print(Distinct_Digit_Array[i]!=0?i+" ":"");
        }
    }

}
*/
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//1.Pangram Checking
/* 
Check whether all english alphabets are present in the given sentence or not
I/P: abc defGhi JklmnOP QRStuv wxyz
O/P: True
I/P: abc defGhi JklmnOP QRStuv
O/P: False

public class javasoho1 
{
    public static void main(String[] args) 
    {
        String str="abc defGhi JklmnOP QRStuv wxyz";
        int arr[]=new int[26];
        for(char i:str.toCharArray())
        {
            if(i>='a'&&i<='z')
            {
                arr[i-'a']++;
            }
            else if(i>='A'&&i<='Z')
            {
                arr[i-'A']++;
            }
        }
        for(int i=0;i<13;i++)
        {
            if(arr[i]==0||arr[25-i]==0)
            {
                System.out.println("False");
                return;
            }
        }
        System.out.println("True"); //True
    }
}
*/

//2. First Occurrences
/* 
    Given two strings, find the first occurrence of all characters of second string in the first string and
    print the characters between the least and the highest index
    I/P: ZOHOCORPORATION PORT
    O/P: OHOCORPORAT

public class javasoho1 
{
    public static void main(String[] args) 
    {
        char str1[]="ZOHOCORPORATION".toCharArray(),str2[]="PORT".toCharArray();
        //O(m*n)
        Brute(str1, str2); //1 11
        //O(m+n)
        Optimal(str1, str2);//1 11
    }
    static void Brute(char[] str1,char[] str2)
    {
        int len=str1.length-1;
        int left=0,right=0,min=9999,max=0;
        while(right<str2.length)
        {
            if(str1[left]==str2[right])
            {
                max=Math.max(max, left);
                min=Math.min(min, left);
                right++;
                left=0;
            }
            left++;
        }
        System.out.println(min+" "+max);
    }
    static void Optimal(char[] str1,char[] str2)
    {
        int arr[]=new int[26],min=9999,max=0;
        for(int i=0;i<str1.length;i++)
        {
            if(arr[str1[i]-'A']==0)
            {
                arr[str1[i]-'A']=-1*i;
            }
        }
        for(int i=0;i<str2.length;i++)
        {
            if(arr[str2[i]-'A']<0)
            {
                max=Math.max(max, -1*arr[str2[i]-'A']);
                min=Math.min(min, -1*arr[str2[i]-'A']);
            }
        }
        System.out.println(min+" "+max);
    }
}
*/

//3.Matrix diagonal sum
/* 
public class javasoho1 
{
    public static void main(String[] args) 
    {
        int arr[][]=
        {
            {1,2,3},
            {4,5,6},
            {7,8,9}
        };
        upper_lower(arr); // 1+2+3+5+6+9=
    }
    static void upper_lower(int arr[][])
    {
        int upper_sum=0;
        int lower_sum=0;
        int i=0,j=0;
        while (i<arr.length) 
        {
            if(i<=j)
            {
                lower_sum+=arr[i][j];
            }
            if(i>=j)
            {
                upper_sum+=arr[i][j];
            }
            j++;
            i=j>=arr.length?++i:i;
            j=j>=arr.length?0:j;
        }
        System.out.println(upper_sum+" "+lower_sum);
    }
}
*/
/* 
public class javasoho1 
{
    public static void main(String[] args) 
    {
        int i=0,j=0;
        int arr[]={1,2,23,23,1,234234,-11};
        BubbleSort(arr);
        for(int temp:arr)
        {
            System.out.print(temp+" ");
        }
        System.out.println();
        BubbleSort2(arr);
        for(int temp:arr)
        {
            System.out.print(temp+" ");
        }
        System.out.println();
        

    }
    static void BubbleSort(int arr[])
    {
        int i=0,j=0;
        int len=arr.length;
        while (i<(len-1))
        {
            if(arr[j]>arr[j+1])
            {
                int temp=arr[j];
                arr[j]=arr[j+1];
                arr[j+1]=temp;
            }
            j++;
            if(j>=len-i-1)
            {
                j=0;
                i++;
            }
        }
    }
    static void BubbleSort2(int arr[])
    {
        for(int i=0;i<arr.length-1;i++)
        {
            for(int j=0;j<arr.length-1-i;j++)
            {
                if(arr[j]>arr[j+1])
                {
                    int temp=arr[j];
                    arr[j]=arr[j+1];
                    arr[j+1]=temp;
                }
            }
        }
    }
}
*/

//5. Matrix Addition
/* 
        Given n integer arrays of different size, find the addititon of numbers represented by the arrays
        I/P: 4
        3 5 4 2
        2 4 5
        4 5 6 7 8
        4 9 2 1
        1 2
        O/P: 50856

import java.util.Scanner;
public class javasoho1 
{
    public static void main(String[] args) 
    {
        int num=4;    
        System.out.println(Brute(num));
    }
    static int Brute(int num)
    {
        Scanner scan = new Scanner(System.in);
        int sum=0;
        for(int i=0;i<num;i++)
        {
            String str=scan.nextLine();
            int temp=0;
            for(char ch:str.toCharArray())
            {
                if(ch>='0'&&ch<='9')
                {
                    temp=temp*10+(int)(ch-'0');
                }
            }
            System.out.println(temp+" ");
            sum+=temp;
        }
        return sum;
    }
}
*/


//5. Cricket Scores
/* 
    Given a timeline of scores, find the individual scores of player 1 and player 2 and Extras
    W – Wide N – No Ball . – Dot Ball
    Consider the game starts from player 1
    I/P:
    1 . 2 . 4 3 6 W 1 . N . 2 1
    O/P:
    P1 – 8
    P2 – 12
    Extras – 2

public class sohomain
 {
    public static void main(String[] args) {
        String input = "1 . 2 . 4 3 6 W 1 . N . 2 1";
        String[] timeline = input.split(" ");
        int p1Score = 0, p2Score = 0, extras = 0;
        boolean isPlayer1 = true;
        for (String event : timeline) {
            switch (event) {
                case ".":
                    break;
                case "W":
                    extras++;
                    break;
                case "N":
                    extras++;
                    break;
                default:
                    int runs = Integer.parseInt(event);
                    if (isPlayer1) {
                        p1Score += runs;
                    } else {
                        p2Score += runs;
                    }
                    if (runs % 2 != 0) {
                        isPlayer1 = !isPlayer1;
                    }
                    break;
            }
        }

        System.out.println("P1 - " + p1Score);
        System.out.println("P2 - " + p2Score);
        System.out.println("Extras - " + extras);
    }
}
*/

//6.shuffle an array
/* 
import java.util.*;
public class sohomain 
{
    public static void main(String[] args)
    {
         int num=3;
         Scanner scan = new Scanner(System.in);
         for(int i=0;i<num;i++)
         {
            int s=scan.nextInt(),e=scan.nextInt();
            int arr[]=new int[e-s+1];
            for(int j=s;j<=e;j++)
            {
                arr[j-s]=j;
            }
            shuffleArray(arr);
            for(int temp:arr)
            {
                System.out.print(temp+" ");
            }
            System.out.println();
         }
    }
    static void shuffleArray(int[] arr) 
    {
        Random rand = new Random();
        for (int i = arr.length - 1; i > 0; i--) {
            int j = rand.nextInt(i + 1); // Random index from 0 to i
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
}
*/
//-------------------------------------------------------------------------------------------------------

//7.
/* 
public class Main {
    public static void main(String[] args) {
        int[][] mat = {
            {1, 2, 3, 4, 6},
            {5, 3, 8, 1, 2},
            {4, 6, 7, 5, 5},
            {2, 4, 8, 9, 4}
        };
        
        int x1 = 2, y1 = 0; // Top-left corner index
        int x2 = 3, y2 = 4; // Bottom-right corner index
        
        printSubmatrix(mat, x1, y1, x2, y2);
    }
    
    static void printSubmatrix(int[][] mat, int x1, int y1, int x2, int y2) {
        // Check if indices are valid
        if (x1 < 0 || x1 >= mat.length || y1 < 0 || y1 >= mat[0].length ||
            x2 < 0 || x2 >= mat.length || y2 < 0 || y2 >= mat[0].length) {
            System.out.println("Invalid indices.");
            return;
        }
        
        // Swap indices if necessary to ensure x1 <= x2 and y1 <= y2
        if (x1 > x2) {
            int temp = x1;
            x1 = x2;
            x2 = temp;
        }
        if (y1 > y2) {
            int temp = y1;
            y1 = y2;
            y2 = temp;
        }
        
        // Print the submatrix
        System.out.println("Rectangle");
        int sum = 0;
        for (int i = x1; i <= x2; i++) {
            for (int j = y1; j <= y2; j++) {
                System.out.print(mat[i][j] + " ");
                sum += mat[i][j];
            }
            System.out.println();
        }
        System.out.println("sum " + sum);
    }
}
*/

//-----------------------------------------------------------------------------------------------
//8.
/* 
public class DateDifference {

    static int[] monthDays = {31, 28, 31, 30, 31, 30,31, 31, 30, 31, 30, 31};

    static boolean isLeap(int year) {
        // If a year is multiple of 400 or (multiple of 4 and not multiple of 100), it's a leap year
        return (year % 400 == 0) || ((year % 4 == 0) && (year % 100 != 0));
    }


    static int countDays(int d, int m, int y) {
        int days = y * 365 + d;

        for (int i = 0; i < m - 1; i++) {
            days += monthDays[i];
        }

        for (int i = 1; i < y; i++) {
            if (isLeap(i)) {
                days++;
            }
        }

        return days;
    }

    // Function to calculate difference in days between two dates
    static int getDifference(int d1, int m1, int y1, int d2, int m2, int y2) {
        // Get total days from 01-Jan to both dates
        int days1 = countDays(d1, m1, y1);
        int days2 = countDays(d2, m2, y2);

        // Return the absolute difference
        return Math.abs(days2 - days1);
    }

    // Main method to test the functions
    public static void main(String[] args) {
        // Example dates
        int d1 = 1, m1 = 2, y1 = 2004; // 01-Feb-2000
        int d2 = 6, m2 = 2, y2 = 2004; // 01-Feb-2004

        // Calculate and print the difference in days
        System.out.println("Difference between two dates is " +
                getDifference(d1, m1, y1, d2, m2, y2));
    }
}
*/
//------------
//9.Print longest sequence between same character
/* 
    Ex I/p abcccccbba
    O/p 8 (from a to a)
    I/p aaaaaaaa
    O/p 6

public class ZOHO
{
    public static void main(String[] args)
    {
        System.out.println(longestSequenceBetweenSameCharacters("abcccccbba")); // 8  a to a 
    }
    static int longestSequenceBetweenSameCharacters(String str) 
    {
        int maxLength = 0;
        int len = str.length();

        // Iterate through each character in the string
        for (int i = 0; i < len; i++) {
            char currentChar = str.charAt(i);

            // Find the last occurrence of the current character
            int lastIndex = str.lastIndexOf(currentChar);

            // Calculate the length of the sequence between the first and last occurrence
            if (lastIndex != i) {
                int sequenceLength = lastIndex - i + 1;
                maxLength = Math.max(maxLength, sequenceLength);
            }
        }

        return maxLength;
    }   
}
*/

//------------
//10.sort the array odd numbers in ascending and even numbers in descending.
// I/p 5 8 11 6 2 1 7
// O/p 1 5 7 11 8 6 2
/* 
import java.util.*;
public class ZOHO
{
    public static void main(String[] args) {
        int arr[]={5,8,11,6,2,1,7},odd=0;
        for(int i=0;i<arr.length;i++)
        {
            arr[i]=arr[i]%2==1?arr[i]:-1*arr[i];
            if(arr[i]%2==1){odd++;}
        }  
        Arrays.sort(arr);
        for(int i=odd-1;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");
        }
        for(int i=0;i<arr.length-odd;i++)
        {
            System.out.print(-1*arr[i]+" ");
        }
    }
}
*/

//---------------
//11.
/* 
public class ZOHO 
{
    public static void main(String[] args) 
    {
        String str[]={"catch", "got", "tiger", "mat", "eat", "pat", "tap", "tea"};
        String word="ate"; 
        functions(str, word);
    }
    static void functions(String str[],String word)
    {
        int arr[]=new int[26];
        for(int i=0;i<word.length();i++)
        {
            arr[word.charAt(i)-'a']++;
        }
        for(int i=0;i<str.length;i++)
        {
            if(word.length()==str[i].length())
            {
                int temp[]=new int[26];
                char ch1[]=str[i].toCharArray();
                for(char j:ch1)
                {
                    temp[j-'a']++;
                }
                for(int j=0;j<26;j++)
                {
                    if(arr[j]!=temp[j])
                    {
                        temp[0]=-123;
                        break;
                    }
                }
                if(temp[0]!=-123)
                {
                    System.out.println(str[i]+" ");
                }
            }
        }
    }
}
*/

//---------------
//12.4.array of numbers were given to find a number which has same sum of numbers in it’s either side.
// I/p 1, 2, 3, 7, 6
// O/p 7(has 1+ 2+3 in left 6 in right)
/* 
public class ZOHO 
{
    public static void main(String[] args) 
    {
        int arr[]={1,2,3,7,6};
        int totalsum=0;
        for(int i:arr)
        {
            totalsum+=i;
        }
        int leftsum=0;
        for(int i:arr)
        {
            totalsum=totalsum-i;
            if(totalsum==leftsum)
            {
                System.out.println(i);
                return;
            }
            leftsum+=i;
        }    
    }
}
*/

//---------------
//13.1) To find the odd numbers in between the range.
// Input:
// 2
// 15
// Output:
// 3,5,7,9,11,13
/* 
public class ZOHO 
{
    public static void main(String[] args) 
    {
        int s=2,o=15;
        s=s%2==0?s+1:s;
        o=s%2==0?o-1:o;  
        functions(s, o); 
    }
    static void functions(int s,int e)
    {
        if(s>=e)
        {
            return;
        }
        System.out.print(s+" ");
        functions(s+2, e);
    }
}
*/
//-------------------------------------------------------------------------------
//14.Sort even-placed elements in increasing and odd-placed in decreasing order
// Let given array: arr[] = {0, 1, 2, 3, 4, 5, 6, 7}
// Array after multiplying by -1 to even placed elements: arr[] = {0, 1, -2, 3, -4, 5, -6, 7}
// Array after sorting: arr[] = {-6, -4, -2, 0, 1, 3, 5, 7}
// Array after reverting negative values: arr[] = {6, 4, 2, 0, 1, 3, 5, 7}
// After reversing the first half of array: arr[] = {0, 2, 4, 6, 1, 3, 5, 7}
// After reversing the second half of array: arr[] = {0, 2, 4, 6, 7, 5, 3, 1}



//---------------------------------------------------------------------------------
//15.To find the factors of the numbers given in an array and to sort the numbers in descending order according to the factors present in it.
// Input:
// Given array : 8, 2, 3, 12, 16
// Output:
// 12, 16, 8, 2, 3
/* 
public class ZOHO 
{
    public static void main(String[] args) 
    {
        int arr[]={8,2,3,12,16};
        int temp[]=new int[arr.length];
        for(int i=0;i<arr.length;i++)
        {
            temp[i]=factorsCount(arr[i]);
        }
        for(int i=0;i<temp.length-1;i++)
        {
            for(int j=0;j<temp.length-1-i;j++)
            {
                if(temp[j]>temp[j+1])
                {
                    int t=temp[j];
                    temp[j]=temp[j+1];
                    temp[j+1]=t;
                    t=arr[j];
                    arr[j]=arr[j+1];
                    arr[j+1]=t;
                }
            }
        }
        for(int i:arr)
        {
            System.out.print(i+" ");
        }
    }
    static int factorsCount(int num)
    {
        int ctr=0;
        for(int i=1;i*i<=num;i++)
        {
            if(num%i==0)
            {
                ctr++;
             //  System.out.print(i+" ");
                if(num/i!=i)
                {
                    ctr++;
                 //  System.out.print(num/i+" ");
                }
            }   
        }
        return ctr;
    }
}

*/
//----------------------------------
//16.number to word
/* 
public class NumberToWords 
{
    private static final String[] belowTwenty = {"", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", 
        "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
    private static final String[] tens = {"", "", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
    private static final String[] thousands = {"", "Thousand", "Million"};

    public static void main(String[] args) {
        int num = 2342222;
        System.out.println(numberToWords(num));
    }

    public static String numberToWords(int num) {
        if (num == 0) return "Zero";
        int i = 0;
        String words = "";
        
        while (num > 0) 
        {
            if (num % 1000 != 0) {
                words = helper(num % 1000) + thousands[i] + " " + words;
            }
            num /= 1000;
            i++;
        }
        return words.trim();
    }

    private static String helper(int num) {
        if (num == 0) {
            return "";
        } else if (num < 20) {
            return belowTwenty[num] + " ";
        } else if (num < 100) {
            return tens[num / 10] + " " + helper(num % 10);
        } else {
            return belowTwenty[num / 100] + " Hundred " + (num % 100 == 0 ? "" : "and ") + helper(num % 100);
        }
    }
}
*/
//-------------------------
//17. Print the given pattern:
// Input:
// N= 3, M=3
// Output:
// X X X
// X 0 X
// X X X
/* 
public class ZOHO
{
    public static void main(String[] args)
    {
        int r=10,c=7;
        for(int i=1;i<=r;i++)
        {
            for(int j=1;j<=c;j++)
            {
                int temp=Math.min(Math.min(i,j),Math.min(r-i+1,c-j+1));
                System.out.print(temp%2==1?"X ":"O ");
            }
            System.out.println();
        }    
    }
}
*/
//----------------------------
//18.adding a digit to all the digits of a number eg digit=4, number = 2875, o/p= 612119
/* 
public class ZOHO 
{
    public static void main(String[] args) 
    {
        int number=reverse(2875);
        System.out.println(number);//5782
        while(number>0)
        {
            System.out.print((number%10)+4);
            number=number/10;
        }
    }
    static int reverse(int num)
    {
        int temp=0;
        while(num>0)
        {
            temp=temp*10+num%10;
            num/=10;
        }
        return temp;
    }
}
*/
//--------------------------------------
//19.
/* 
public class ZOHO 
{
    public static void main(String[] args) {
        String[] arr = {"Harit", "Girish", "Gritav", "Lovenish", "Nikhil", "Harman","Arun","ArunKumar"};

        // Sort the array in lexicographical order
        sortLexicographically(arr);

        // Print the sorted array
        System.out.println("Sorted array in lexicographical order:");
        for (String s : arr) {
            System.out.print(s + " ");
        }
        System.out.println();
    }

    public static void sortLexicographically(String[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                // Compare adjacent strings and swap if they are in the wrong order
                if (compareStrings(arr[j], arr[j + 1]) > 0) {
                    // Swap arr[j] and arr[j+1]
                    String temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }

    // Custom function to compare two strings lexicographically
    public static int compareStrings(String s1, String s2) {
        int len1 = s1.length();
        int len2 = s2.length();
        int minLen = Math.min(len1, len2);

        for (int i = 0; i < minLen; i++) {
            char c1 = s1.charAt(i);
            char c2 = s2.charAt(i);
            if (c1 != c2) {
                return c1 - c2;
            }
        }

        // If one string is prefix of other, shorter string is smaller
        return len1 - len2;
    }
}
*/

//---------------------
//20.find the extra elements in a index
/* 
public class ZOHO 
{
    public static void main(String[] args) 
    {
        int arr1[]={10,20,30,12,5},arr2[]={10,20,30,12};
        int tsum=0;
        for(int i=0;i<arr1.length;i++)
        {
            tsum+=arr1[i];
        }    
        for(int i:arr2)
        {
            tsum=tsum-i;
        }
        System.out.println(tsum);//5
    }
}
*/
//---------------------
//21.Print true if second string is a substring of first string, else print false.
// Note : * symbol can replace n number of characters
// Input : Spoon  Sp*n  Output : TRUE
//     Zoho     *o*o  Output : TRUE
//     Man       n*     Output : FALSE
//     Subline  line   Output : TRUE
/* 
public class ZOHO 
{
    public static void main(String[] args) 
    {
        String str1="spoon",str2="n*";
        int i=0,j=0;
        while(j<str2.length()-1)
        {
            if(str1.charAt(i)==str2.charAt(j))
            {
                i++;
                j++;
            }
            else if(str1.charAt(i)!=str2.charAt(j) && str2.charAt(j)=='*')
            {
                i++;
            }
            else
            {
                System.out.println("Flase");
                return;
            }
            if(str1.charAt(i)==str2.charAt(j+1))
            {
                j++;
            }
        }    
        System.out.println("True");
    }
}
*/
//--------------------
//22. Given an array, find the minimum of all the greater numbers for each element in the array.  

// Sample: 
// Array : {2, 3, 7, ­1, 8, 5, 11} 
// Output: 
// {2­>3, 3­>5, 7­>8, ­1­>2, 8­>11, 5­>7, 11­>} 
/* 
import java.util.*;
public class ZOHO 
{
    public static void main(String[] args)
    {
        int arr1[]={2,3,7,1,8,5,11};
        for(int i=0;i<arr1.length;i++)
        {
            int min=9999;
            for(int j=0;j<arr1.length;j++)
            {
                if(arr1[i]<arr1[j])
                {
                    min=Math.min(min,arr1[j]);
                }
            }
            System.out.println(arr1[i]+"-->"+(min!=9999?min:""));
        }
    }
}
*/
//---------------------------------------
// 23. Given a string, we have to reverse the string without changing the position of punctuations and spaces.
// Sample:   house no : 123@ cbe 
// Output:    ebc32 1o :  nes@ uoh 
/* 
public class ZOHO 
{
    public static void main(String[] args) 
    {
        char str[]="house no : 123@ cbe".toCharArray();
        int l=0,r=str.length-1;
        while(l<=r)
        {
            if(!isAlphanumeric(str[l]))
            {
                l++;
            }
            else if(!isAlphanumeric(str[r]))
            {
                r--;
            }
            else 
            {
                char ch=str[l];
                str[l]=str[r];
                str[r]=ch;
                l++;
                r--;
            }
        }    
        for(char ch:str)
        {
            System.out.print(ch);
        }
    }  
    static boolean isAlphanumeric(char ch) {
        return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9');
    }  
}
*/
//--------------------------------------
//24.word serach 
/* 
class Solution {
    public boolean exist(char[][] board, String word) {
        if (board == null || board.length == 0 || word == null || word.length() == 0) {
            return false;
        }
        
        int m = board.length;
        int n = board[0].length;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (dfs(board, word, 0, i, j)) {
                    return true;
                }
            }
        }
        
        return false;
    }

    private boolean dfs(char[][] board, String word, int index, int i, int j) {
        if (index == word.length()) {
            return true;
        }
        
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != word.charAt(index)) {
            return false;
        }
        
        char temp = board[i][j];
        board[i][j] = '#'; // Mark as visited
        
        boolean found = dfs(board, word, index + 1, i + 1, j) ||
                        dfs(board, word, index + 1, i - 1, j) ||
                        dfs(board, word, index + 1, i, j + 1) ||
                        dfs(board, word, index + 1, i, j - 1);
        
        board[i][j] = temp; // Restore the original value
        return found;
    }
}
*/
/* 
public class Solution {
    public static void main(String[] args) {
        char[][] board = {
            {'a', 'z', 'o', 'l'},
            {'n', 'x', 'h', 'o'},
            {'v', 'y', 'i', 'v'},
            {'o', 'r', 's', 'e'}
        };

        String[] dictionary = {"van", "zoho", "love", "are", "is"};
        
        for (String word : dictionary) {
            if (exist(board, word)) {
                System.out.println(word);
            }
        }
        for(int i=0;i<board.length;i++)
        {
            for(int j=0;j<board[i].length;j++)
            {
                System.out.print(board[i][j]+" ");
            }
            System.out.println();
        }
    }

    public static boolean exist(char[][] board, String word) {
        if (board == null || board.length == 0 || word == null || word.length() == 0) {
            return false;
        }
        
        int m = board.length;
        int n = board[0].length;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (dfs(board, word, 0, i, j)) {
                    return true;
                }
            }
        }
        
        return false;
    }

    private static boolean dfs(char[][] board, String word, int index, int i, int j) {
        if (index == word.length()) {
            return true;
        }
        
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != word.charAt(index)) {
            return false;
        }
        
        char temp = board[i][j];
        board[i][j] = '#'; // Mark as visited
        
        // Only search right and down
        boolean found = dfs(board, word, index + 1, i + 1, j) || 
                        dfs(board, word, index + 1, i, j + 1);
        
        board[i][j] = temp; // Restore the original value
        return found;
    }
}
*/
///----------------------------
//25) Find the largest sum contiguous subarray which should not have negative numbers. We have to print the sum and the corresponding array elements which brought up the sum.
/* 
public class Solution 
{
    public static void main(String[] args) 
    {
        int arr[]={2,7,5,1,3,2,9,7};
        int sum=14;
        int s=0,e=0,total=0;
        int last=0;
        while(e<arr.length)
        {
            if(total<sum)
            {
                total+=arr[e];
            }
            else if(total>sum)
            {
                total=total-arr[s++];
            }
            if(total==sum)
            {
                last=e;
            }
            e++;
        }    
        System.out.println(s+" "+e);
    }
}
*/
//--------------------------------
//26.
/* 
public class Solution 
{
    public static void main(String[] args) 
    {
        String str[]={"one","two","three"}; 
        reverse(str, 0);

    }
    static void reverse(String str[],int i)
    {
        if(i==str.length)
        {
            return;
        }
        System.out.print(str[i]+" ");
        reverse(str, i+1);
        System.out.print(str[i]+" ");
    }
}
*/
//--------------------------
//27.
// 1  
// 3 2
// 6 5 4
// 10 9 8 7
/* 
public class SOHO
{
    public static void main(String[] args) 
    {
        int num=5,temp=1;
        for(int i=1;i<=num;i++)
        {
            int c=temp;
            for(int j=0;j<i;j++)
            {
                System.out.print(c-j+" ");
            }
            temp+=i+1;`
            System.out.println();
        }    
    }
}
*/
//-------------
//28.Replace every element with the greatest element on right side
/* 
public class SOHO   
{
    public static void main(String[] args) {
        int arr[]={16,17,4,3,5,2},max=arr[arr.length-1];
        arr[arr.length-1]=-1;
        for(int i=arr.length-2;i>=0;i--)
        {
            int temp=arr[i];
            arr[i]=max;
            max=max<temp?temp:max;
        }
        for(int i:arr)
        {
            System.out.print(i+" ");
        }

    }
}
*/
//----------
//29.2. Given a Boolean matrix mat[M][N] of size M X N, modify it such that if a matrix cell mat[i][j] is 1 then make its adjacent cells as 0.
/* 
public class SOHO 
{
    public static void main(String[] args) 
    {
        int arr[][]=
        {
            {1,2,0,3,0},
            {1,2,3,0,1},
            {2,3,4,2,2},
            {2,3,4,1,1}
        };
        for(int i=0;i<arr.length;i++)
        {
            for(int j=arr[i].length-1;j>0;j--)
            {
                if(arr[i][j-1]==0)
                {
                    arr[i][j]=0;
                }
            }
        }
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr[i].length;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
    }
}
*/
//-------------------
//30. Equilibrium index of an array is an index such that the sum of elements at lower indexes is equal to the sum of elements at higher indexes. For example, in an array A:
// Example :
// Input: A[] = {-7, 1, 5, 2, -4, 3, 0}
// Output: 3
// 3 is an equilibrium index, because:
// A[0] + A[1] + A[2] = A[4] + A[5] + A[6]
// Input: A[] = {1, 2, 3}
// Output: -1
/* 
public class SOHO {
    public static void main(String[] args) {
        int arr[] = {-7, 1, 5, 2, -4, 3, 0};
        int left_sum = 0;
        int right_sum = 0;
        for (int i = 0; i < arr.length; i++) 
        {
            right_sum += arr[i];
        }
        for (int i = 0; i < arr.length; i++) 
        {
            right_sum -= arr[i];
            if (left_sum == right_sum) 
            {
                System.out.println("Equilibrium index found at: " + i);
                return;
            }
            left_sum += arr[i];
        }
        System.out.println("No equilibrium index found.");
    }
}
*/
//----------------------------
//31.
/* 
public class DiagonalPrint {
    public static void main(String[] args) {
        int[][] matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        
        int m = matrix.length;
        int n = matrix[0].length;
        
        for (int k = 0; k < m; k++) {
            int i = k;
            int j = 0;
            while (i >= 0) {
                System.out.print(matrix[i][j] + " ");
                i--;
                j++;
            }
        }
        
        for (int k = 1; k < n; k++) {
            int i = m - 1;
            int j = k;
            while (j < n) {
                System.out.print(matrix[i][j] + " ");
                i--;
                j++;
            }
        }
    }
}
//1 4 2 7 5 3 8 6 9     
*/
/* 
public class DiagonalPrint {
    public static void main(String[] args) {
        int[][] matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        
        int m = matrix.length;
        int n = matrix[0].length;
        
        int[] result = new int[m * n];
        int index = 0;
        
        // Traverse each diagonal starting from the top-left to bottom-right
        for (int diagonalSum = 0; diagonalSum <= m + n - 2; diagonalSum++) {
            int startRow = Math.min(diagonalSum, m - 1);
            int startCol = Math.max(0, diagonalSum - (m - 1));
            
            int endRow = Math.max(0, diagonalSum - (n - 1));
            int endCol = Math.min(diagonalSum, n - 1);
            
            if (diagonalSum % 2 == 0) {
                for (int i = startRow, j = startCol; i >= endRow && j <= endCol; i--, j++) {
                    result[index++] = matrix[i][j];
                }
            } else {
                for (int i = endRow, j = endCol; i <= startRow && j >= startCol; i++, j--) {
                    result[index++] = matrix[i][j];
                }
            }
        }
        
        // Print the result array
        for (int num : result) {
            System.out.print(num + " ");
        }
    }
}
//1 2 4 7 5 3 6 8 9 
*/

///--------------------------------------------------------------------------------
/* 
    1.Using Recursion reverse the string such as
    Eg 1: Input: one two three
    Output: three two one
    Eg 2: Input: I love india
    Output: india love I

    public class ZOHO
    {
        public static void main(String[] args) 
        {
            String str[]={"one","two","three"};    
            reverse(str, 0);//three two one 
        }
        static void reverse(String str[],int i)
        {
            if(i==str.length)
            {
                return;
            }
            reverse(str, i+1);
            System.out.print(str[i]+" ");
        }
    }
*/
//---------------------------
/*
    2.Given two sorted arrays, merge them such that the elements are not repeated
    Eg 1: Input:
    Array 1: 2,4,5,6,7,9,10,13
    Array 2: 2,3,4,5,6,7,8,9,11,15
    Output:
    Merged array: 2,3,4,5,6,7,8,9,10,11,13,15

    public class ZOHO 
    {
        public static void main(String[] args) 
        {
            int arr1[]={2,4,5,6,7,9,10,13};
            int arr2[]={2,3,4,5,6,7,8,9,11,15};
            int len1=arr1.length,len2=arr2.length;
            int arr3[]= merge(arr1, arr2);
            for(int i:arr3)
            {
                if(i==0){break;}
                System.out.print(i+" "); //2 3 4 5 6 7 8 9 10 11 13 15 
            }
        }
        static int[] merge(int arr1[],int arr2[])
        {
            int arr3[]=new int[arr1.length+arr2.length];
            int s=0,e=0;
            int index=0;
            while( s<arr1.length && e<arr2.length )
            {
                if(arr1[s]>arr2[e])
                {
                    arr3[index++]=arr2[e++];
                }
                else if(arr1[s]<arr2[e])
                {
                    arr3[index++]=arr1[s++];
                }
                else 
                {
                    arr3[index++]=arr1[s++];
                    e++;
                }
            }
            while(s<arr1.length) 
            {    
                arr3[index++]=arr1[s++];
            }
            while(e<arr2.length)
            {
                arr3[index++]=arr2[e++];
            }
            return arr3;
        }
    }
*/
//-------------------------
/*
    3.Find if a String2 is substring of String1. If it is, return the index of the first occurrence. 
    else return -1.
    Eg 1:Input:
    String 1: test123string
    String 2: 123
    Output: 4
    Eg 2: Input:
    String 1: testing12
    String 2: 1234
    Output: -1
    
    public class ZOHO 
    {
        public static void main(String[] args)
        {
            String str1="test123string";
            String str2="123"; 

            if(indexOf(str1, str2)!=-1)
            {
                System.out.println(indexOf(str1, str2)-str2.length()+1);//4
                System.out.println(indexOf(str1, str2));//6
            }
            else
            {
                System.out.println(-1);
            }
        }
        static int indexOf(String str1,String str2)
        {
            int l=0,r=0,ctr=0;
            while(l<str1.length())
            {
                if(str1.charAt(l)==str2.charAt(r))
                {
                    r++;
                    ctr++;
                    if(ctr==str2.length())
                    {
                        return l;
                    }
                }
                else
                {
                    ctr=0;
                    r=0;
                }
                l++;
            }
            return -1;
        }
    }
*/
//------------------------
/* 
    4.Write a program to print the following output for the given input. You can assume the string is of
      odd length
        Eg 1: Input: 12345
        Output:
        1 5
        2 4
        3
        2 4
        1 5

        public class ZOHO 
        {
            public static void main(String[] args) 
            {
                String str="12345";   
                function(str); 
                function2(str);
            }
            static void function(String str)
            {
                int i=0,j=0;
                for(i=0;i<str.length();i++)
                {
                    for(j=0;j<str.length();j++)
                    {
                        if(i==j)
                        {
                            System.out.print(str.charAt(j));
                        }
                        else if(j==str.length()-i-1)
                        {
                            System.out.print(str.charAt(j));
                        }
                        else
                        {
                            System.out.print("-");
                        }
                    }
                    System.out.println();
                }
            }
            static void function2(String str)
            {
                int i=0,j=0;
                for(i=0;i<str.length();)
                {
                    System.out.print( i==j||j==str.length()-i-1?str.charAt(j):'-');
                    j++;
                    if(j>=str.length()){j=0;i++;System.out.println();}
                }
            }
        }
*/
//------------------------------

/*
    5.
    Write a program to give the following output for the given input
    Eg 1: Input: a1b10
    Output: abbbbbbbbbb
    Eg: 2: Input: b3c6d15
    Output: bbbccccccddddddddddddddd
    The number varies from 1 to 99.
 
    public class ZOHO 
    {
        public static void main(String[] args) 
        {
            char str[] = "a1b12c1".toCharArray();
            char alpha = 0;
            int num = 0;

            for (int i = 0; i < str.length; i++) 
            {
                if (str[i] >= 'a' && str[i] <= 'z')
                {
                    // If there's a previous character to print, print it
                    if (alpha != 0) {
                        for (int j = 0; j < num; j++) {
                            System.out.print(alpha);
                        }
                        num = 0; // Reset num for the next character
                    }
                    alpha = str[i];
                } else if (str[i] >= '0' && str[i] <= '9') {
                    num = num * 10 + (str[i] - '0');
                }
            }
            // Print the last character sequence
            for (int j = 0; j < num; j++) {
                System.out.print(alpha);
            }
        }
    }
*/
//------------------------
/*
    6.Form a number system with only 3 and 4. Find the nth number of the number system.
    Eg.) The numbers are: 3, 4, 33, 34, 43, 44, 333, 334, 343, 344, 433, 434, 443, 444, 3333, 3334,
    3343, 3344, 3433, 3434, 3443, 3444 ....
    

    public class CustomNumberSystem
    {
        public static void main(String[] args) 
        {
            int n = 10; // Example input for nth number
            for(int i=0;i<=20;i++)
            {
                System.out.println(findNthNumber(i));
            }
        }

        static String findNthNumber(int n) 
        {
            String result = "";
            while (n > 0) {
                // Find remainder when n is divided by 2 (as we have two digits in our system)
                int remainder = (n - 1) % 2;
                // Convert remainder to '3' or '4' and prepend to result
                result = (remainder == 0 ? '0' : '1') + result;
                // Update n for the next iteration
                n = (n - 1) / 2;
            }
            return result;
        }
}

*/
//-----------------------
/*
    7.Replace every element with the greatest element on right side
      Given an array of integers, replace every element with the next greatest element 
      (greatest element on the right side) in the array. Since there is no element next to 
      the last element, replace it with -1. For example, if the array is {16, 17, 4, 3, 5, 2},
      then it should be modified to {17, 5, 5, 5, 2, -1}.
 
        public class ZOHO
        {
            public static void main(String[] args)
            {
                int arr[]={16,17,4,3,5,2};
                int max=arr[arr.length-1];
                arr[arr.length-1]=-1;
                for(int i=arr.length-2;i>=0;i--)
                {
                    int temp=arr[i];
                    arr[i]=max;
                    if(max<temp)
                    {
                        max=temp;
                    }
                } 
                for(int i:arr)
                {
                    System.out.print(i+" ");
                }
            }
        }
*/
//-------------------------
/*
     8.Given a Boolean matrix mat[M][N] of size M X N, modify it such that if a matrix 
     cell mat[i][j] is 1 then make its adjacent cells as 0.     

    public class ZOHO 
    {
        public static void main(String[] args) 
        {
            int arr[][]=
            {
                {1,2,0,1},
                {0,1,0,1},
                {2,3,2,1},
                {1,0,1,1},
            };
            for(int i=0;i<arr.length;i++)
            {
                for(int j=arr[0].length-1;j>0;j--)
                {
                    if(arr[i][j]!=0&&arr[i][j-1]==0)
                    {
                        arr[i][j]=0;
                    }
                }
            }
            for(int i=0;i<arr.length;i++)
            {
                for(int j=0;j<arr[0].length;j++)
                {
                    System.out.print(arr[i][j]+" ");
                }
                System.out.println();
            }
        }
    }
    1 2 0 0 
    0 0 0 0 
    2 3 2 1 
    1 0 0 1 
*/
//----------------------
/*
     9.3. Equilibrium index of an array is an index such that the sum of elements at lower indexes is equal to the sum of elements at higher indexes. For example, in an array A:
     Example :
    Input: A[] = {-7, 1, 5, 2, -4, 3, 0}
    Output: 3
    3 is an equilibrium index, because:
    A[0] + A[1] + A[2] = A[4] + A[5] + A[6]
    Input: A[] = {1, 2, 3}
    Output: -1

    public class ZOHO 
    {
        public static void main(String[] args) 
        {
            int arr[]={-7,1,5,2,-4,3,0};
            int left_sum=0,right_sum=0;
            for(int i:arr)
            {
                right_sum+=i;
            }    
            for(int i=0;i<arr.length;i++)
            {
                right_sum=right_sum-arr[i];
                if(left_sum==right_sum)
                {
                    System.out.println(arr[i]);
                    return;
                }
                left_sum=left_sum+arr[i];
            }
        }
    }
    //2
*/
//---------------
/*
     10. Given a matrix of 2D array of n rows and m coloumns.
         Print this matrix in ZIG-ZAG fashion as shown in figure.
 

        public class ZOHO
        {
            public static void main(String[] args) 
            {
                int[][] matrix = {
                    {1, 2, 3},
                    {4, 5, 6},
                    {7, 8, 9}
                };
                
                int m = matrix.length;
                int n = matrix[0].length;
                
                int[] result = new int[m * n];
                int index = 0;
                
                // Traverse each diagonal starting from the top-left to bottom-right
                for (int diagonalSum = 0; diagonalSum <= m + n - 2; diagonalSum++) 
                {
                    int startRow = Math.min(diagonalSum, m - 1);
                    int startCol = Math.max(0, diagonalSum - (m - 1));
                    
                    int endRow = Math.max(0, diagonalSum - (n - 1));
                    int endCol = Math.min(diagonalSum, n - 1);
                    
                    if (diagonalSum % 2 == 0)
                    {
                        for (int i = startRow, j = startCol; i >= endRow && j <= endCol; i--, j++)
                        {
                            result[index++] = matrix[i][j];
                        }
                    }
                    else 
                    {
                        for (int i = endRow, j = endCol; i <= startRow && j >= startCol; i++, j--) {
                            result[index++] = matrix[i][j];
                        }
                    }
               }
               for (int num : result) 
               {
                   System.out.print(num + " ");
               }
            }
        }
*/
//---------------------
/*
    11.Print all possible subsets of the given array whose sum equal to given N.
    example: Input: {1, 2, 3, 4, 5} N=6 Output: {1, 2, 3}, {1, 5}, {2, 4}

        public class ZOHO 
        {
            public static void main(String[] args) 
            {
                int[] array = {1, 2, 3, 4, 5};
                printAllSubsets(array);
            }

            static void printAllSubsets(int[] array) 
            {
                int[] subset = new int[array.length];
                generateSubsets(array, subset, 0);
            }

            static void generateSubsets(int[] array, int[] subset, int index) 
            {
                if (index == array.length)
                {
                    printSubset(subset, index);
                } 
                else
                {
                    subset[index] = 0;
                    generateSubsets(array, subset, index + 1);

                    subset[index] = array[index];
                    generateSubsets(array, subset, index + 1);
                }
            }

            private static void printSubset(int[] subset, int size) {
                System.out.print("{ ");
                for (int i = 0; i < size; i++) {
                    if (subset[i] != 0) {
                        System.out.print(subset[i] + " ");
                    }
                }
                System.out.println("}");
            }
        }
*/
//-----------------
/*
     12.island
 
public class ZOHO 
{
    public static void main(String[] args) 
    {
        char ch[][]=
        {
            {'1','1','1','1','0'},
            {'1','1','0','1','0'},
            {'1','1','0','0','0'},
            {'0','0','0','0','0'}
        };
        System.out.println(numIslands(ch));
    }
    static int numIslands(char[][] grid) {
        int ans=0;
        for(int i=0;i<grid.length;i++)
        {
            for(int j=0;j<grid[0].length;j++)
            {
                if(grid[i][j]=='1')
                {
                    ans+=1;
                    fn(grid,i,j);
                }
            }
        }
        return ans;
    }
    static void fn(char ch[][],int i,int j)
    {
        if(i<0 || i>=ch.length ||j<0||j>=ch[0].length||ch[i][j]=='0')
        {
            return;
        }
        ch[i][j]='0';
        fn(ch,i,j+1);
        fn(ch,i,j-1);
        fn(ch,i+1,j);
        fn(ch,i-1,j);
    }
}
*/
//------------
/* 
  //  13.print all Permutations
//   ABC
// ACB
// BAC
// BCA
// CBA
// CAB
 
public class ZOHO
{
    public static void main(String[] args) {
        String str = "ABC";
        findPermutations(str, 0, str.length() - 1);
    }

    static void findPermutations(String str, int left, int right) {
        if (left == right) {
            System.out.println(str);
        } else {
            for (int i = left; i <= right; i++) {
                str = swap(str, left, i);
                findPermutations(str, left + 1, right);
                str = swap(str, left, i); // backtrack
            }
        }
    }

    static String swap(String str, int i, int j) {
        char[] charArray = str.toCharArray();
        char temp = charArray[i];
        charArray[i] = charArray[j];
        charArray[j] = temp;
        return String.valueOf(charArray);
    }
}
*/
//--------------
//Given a number, print all the code that can be formed with z={a=1, .., z=26}.1123
/* 
public class ZOHO {
    public static void main(String[] args) {
        String number = "111";
        printCodes(number, 0, "");
        System.out.println(count);
    }
    static int count=0;
    static void printCodes(String number, int index, String result) {
        // If the entire number has been processed, print the result
        if (index == number.length())
        {
            System.out.println(result);
            count++;
            return;
        }

        // Take one digit
        int oneDigit = number.charAt(index) - '0';
        if (oneDigit >= 1 && oneDigit <= 9)
        {
            printCodes(number, index + 1, result + (char) ('a' + oneDigit - 1));
        }

        // Take two digits
        if (index + 1 < number.length())
        {
            int twoDigits = (number.charAt(index) - '0') * 10 + (number.charAt(index + 1) - '0');
            if (twoDigits >= 10 && twoDigits <= 26)
            {
                printCodes(number, index + 2, result + (char) ('a' + twoDigits - 1));
            }
        }
    }
}
//---------------
*/


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



//---------------------1.pattern-------------------------------------------------------- 

//1.
// * * *
// * * *
// * * *

// import java.util.*;
// public class java1 
// {
//     public static void main(String[] args) {
//         Scanner scan = new Scanner(System.in);
//         int num=scan.nextInt();
//         String str="";
//         for(int i=0;i<num;i++)
//         {
//             str+="* ";
//         }
//         for(int i=0;i<num;i++)
//         {
//             System.out.print(str+"\n");
//         }
//     }
// }

//2.
// * 
// * * 
// * * * 
// * * * * 
// import java.util.*;
// public class java1 
// {
//     public static void main(String[] args) {
//         Scanner scan = new Scanner(System.in);
//         int num=scan.nextInt();
//         for(int i=0;i<num;i++)
//         {
//             for(int j=0;j<=i;j++)
//             {
//                 System.out.print("* ");
//             }
//             System.out.println();
//         }
//     }
// }


//3.
// 1
// 1 2
// 1 2 3
// 1 2 3 4
// import java.util.*;
// public class java1 
// {
//     public static void main(String[] args) {
//         Scanner scan = new Scanner(System.in);
//         int num=scan.nextInt();
//         for(int i=1;i<=num;i++)
//         {
//             for(int j=1;j<=i;j++)
//             {
//                 System.out.print(j+" ");
//             }
//             System.out.println();
//         }
//     }
// }


//4.
// 1 
// 2 2 
// 3 3 3 
// 4 4 4 4 
// import java.util.*;
// public class java1 
// {
//     public static void main(String[] args) {
//         Scanner scan = new Scanner(System.in);
//         int num=scan.nextInt();
//         for(int i=1;i<=num;i++)
//         {
//             for(int j=1;j<=i;j++)
//             {
//                 System.out.print(i+" ");
//             }
//             System.out.println();
//         }
//     }
// }

//5.
// * * * * 
// * * * 
// * * 
// * 
// import java.util.*;
// public class java1 
// {
//     public static void main(String[] args) {
//         Scanner scan = new Scanner(System.in);
//         int num=scan.nextInt();
//         for(int i=num;i>=1;i--)
//         {
//             for(int j=1;j<=i;j++)
//             {
//                 System.out.print("* ");
//             }
//             System.out.println();
//         }
//     }
// }

//6.
// 1 2 3 4 
// 1 2 3 
// 1 2 
// 1 
// import java.util.*;
// public class java1 
// {
//     public static void main(String[] args) {
//         Scanner scan = new Scanner(System.in);
//         int num=scan.nextInt();
//         for(int i=num;i>=1;i--)
//         {
//             for(int j=1;j<=i;j++)
//             {
//                 System.out.print(j+" ");
//             }
//             System.out.println();
//         }
//     }
// }

//7.
//     *  
//    *** 
//   *****  
// import java.util.*;
// public class java1 
// {
//     public static void main(String[] args) {
//         Scanner scan = new Scanner(System.in);
//         int num=scan.nextInt();
//         for(int i=1;i<=num;i++)
//         {
//             for(int j=1;j<num+i;j++)
//             {
//                 System.out.print((j<=num-i)?"  ":"* ");
//             }
//             System.out.println();
//         }
//     }
// }

//8.
// * * * * * * * * *
//   * * * * * * *
//     * * * * *
//       * * *
//         *
// import java.util.*;
// public class java1 
// {
//     public static void main(String[] args) 
//     {
//         Scanner scan = new Scanner(System.in);
//         int num=scan.nextInt();
//         for(int i=0;i<num;i++)
//         {
//             for(int j=0;j<num+num-i-1;j++)
//             {
//                 System.out.print(i==0?"* ":(j<i)?"  ":"* ");
//             }
//             System.out.println();
//         }
//     }
// }

//9.
//         *
//       * * *
//     * * * * *
//   * * * * * * *
// * * * * * * * * * 
// * * * * * * * * *
//   * * * * * * *
//     * * * * *
//       * * *
//         *
// import java.util.*;
// public class java1 
// {
//     public static void main(String[] args) 
//     {
//         Scanner scan = new Scanner(System.in);
//         int num=scan.nextInt();
//         String s1="",s;
//         for(int i=0;i<num;i++)
//         {
//             s="";
//             for(int j=0;j<num+i;j++)
//             {
//                 System.out.print(j<num-1-i?"  ":"* ");
//                 s+=j<num-1-i?"  ":"* ";
//             }
//             s1=s+"\n"+s1;
//             System.out.println();
//         }
//         System.out.print(s1);
//     }
// }

//10.
// *
// * *
// * * *
// * * * *
// * * * * *
// * * * *
// * * *
// * *
// *
// import java.util.*;
// public class java1 
// {
//     public static void main(String[] args) 
//     {
//         Scanner scan = new Scanner(System.in);
//         int num=scan.nextInt();
//         for(int i=0;i<(num*2)-1;i++)
//         {
//             int t=(i<num)?i:num-(i%num)-2;
//             for(int j=0;j<=t;j++)
//             {
//                 System.out.print("* ");
//             }
//             System.out.println();
//         }
//     }
// }

//11.
// 1
// 0 1
// 0 1 0
// 1 0 1 0
// 1 0 1 0 1
// 0 1 0 1 0 1
// import java.util.*;
// public class java1 
// {
//     public static void main(String[] args) 
//     {
//         Scanner scan = new Scanner(System.in);
//         int num=scan.nextInt(),n=1;
//         for(int i=0;i<num;i++)
//         {
//             for(int j=0;j<=i;j++)
//             {
//                 System.out.print(n+" ");
//                 n=1-n;
//             }
//             System.out.println();
//         }
//     }
// }

//12.
// 1        1
// 12      21
// 123    321
// 1234  4321
// 1234554321
// import java.util.*;
// public class java1 
// {
//     public static void main(String[] args) 
//     {
//         Scanner scan = new Scanner(System.in);
//         int num=scan.nextInt();String str="";
//         for(int i=1;i<=num;i++)
//         {
//             str="";
//             for(int j=1;j<=num;j++)
//             {
//                 System.out.print(j<=i?j:" ");
//                 str=(j<=i?j:" ")+str;
//             }
//             System.out.println(str);
//         }
//     }
// }

//13.
// 1
// 2 3
// 4 5 6
// 7 8 9 10
// 11 12 13 14 15
// import java.util.*;
// public class java1 
// {
//     public static void main(String[] args) 
//     {
//         Scanner scan = new Scanner(System.in);
//         int num=scan.nextInt(),n=1;
//         for(int i=1;i<=num;i++)
//         {
//             for(int j=1;j<=i;j++)
//             {
//                 System.out.print((n++)+" ");
//             }
//             System.out.println();
//         }
//     }
// }

//14.
// A
// A B
// A B C
// A B C D
// A B C D E
// import java.util.*;
// public class java1 
// {
//     public static void main(String[] args) 
//     {
//         Scanner scan = new Scanner(System.in);
//         int num=scan.nextInt();
//         for(int i=0;i<num;i++)
//         {
//             for(int j=0;j<=i;j++)
//             {
//                 System.out.print((char)('A'+j)+" ");
//             }
//             System.out.println();
//         }
//     }
// }


//15.
// A B C D E 
// A B C D
// A B C
// A B
// A
// import java.util.*;
// public class java1 
// {
//     public static void main(String[] args) 
//     {
//         Scanner scan = new Scanner(System.in);
//         int num=scan.nextInt();
//         for(int i=num-1;i>=0;i--)
//         {
//             for(int j=0;j<=i;j++)
//             {
//                 System.out.print((char)('A'+j)+" ");
//             }
//             System.out.println();
//         }
//     }
// }

//16.
// A
// B B
// C C C 
// D D D D
// E E E E E
// import java.util.*;
// public class java1 
// {
//     public static void main(String[] args) 
//     {
//         Scanner scan = new Scanner(System.in);
//         int num=scan.nextInt();
//         for(int i=0;i<num;i++)
//         {
//             for(int j=0;j<=i;j++)
//             {
//                 System.out.print((char)('A'+i)+" ");
//             }
//             System.out.println();
//         }
//     }
// }

// //17.
// 1
// 121
// 12321
// 1234321
// 123454321
// import java.util.*;
// public class java1 
// {
//     public static void main(String[] args) 
//     {
//         Scanner scan = new Scanner(System.in);
//         int num=scan.nextInt();
//         for(int i=0;i<num;i++)
//         {
//             int t=0;
//             for(int j=0;j<num+i;j++)
//             {
//                 if(j>=num-1-i)
//                 {
//                     t=j>num-1?--t:++t;
//                 }
//                 System.out.print(j<num-1-i?" ":(char)(t+64));
  
//             }
//             System.out.println();
//         }
//     }
// }


//18.
// E
// DE
// CDE
// BCDE
// ABCDE
// import java.util.*;
// public class java1 
// {
//     public static void main(String[] args) 
//     {
//         Scanner scan = new Scanner(System.in);
//         int num=scan.nextInt();
//         for(int i=0;i<num;i++)
//         {
//             for(int j=0;j<=i;j++)
//             {
//                 System.out.print((char)(('E'-i)+j));
//             }
//             System.out.println();
//         }
//     }
// }

//19.
// import java.util.*;
// public class java1 
// {
//     public static void main(String[] args) 
//     {
//         Scanner scan = new Scanner(System.in);
//         int num=scan.nextInt();
//         for(int i=0;i<num;i++)
//         {
//             for(int j=0;j<=i;j++)
//             {
//                 System.out.print((char)(('E'-i)+j));
//             }
//             System.out.println();
//         }
//     }
// }


// Input Format: N = 6
// Result:   
// 6 6 6 6 6 6 6 6 6 6 6 
// 6 5 5 5 5 5 5 5 5 5 6 
// 6 5 4 4 4 4 4 4 4 5 6 
// 6 5 4 3 3 3 3 3 4 5 6 
// 6 5 4 3 2 2 2 3 4 5 6 
// 6 5 4 3 2 1 2 3 4 5 6 
// 6 5 4 3 2 2 2 3 4 5 6 
// 6 5 4 3 3 3 3 3 4 5 6 
// 6 5 4 4 4 4 4 4 4 5 6 
// 6 5 5 5 5 5 5 5 5 5 6 
// 6 6 6 6 6 6 6 6 6 6 6

// class Main {
   
//     static void pattern22(int n)
//  {
//        // Outer loop for no. of rows
//        for(int i=0;i<2*n-1;i++){
          
//           // inner loop for no. of columns.
//           for(int j=0;j<2*n-1;j++){
              
//               // Initialising the top, down, left and right indices of a cell.
//               int top = i;
//               int bottom = j;
//               int right = (2*n - 2) - j;
//               int left = (2*n - 2) - i;
              
//               // Min of 4 directions and then we subtract from n
//               // because previously we would get a pattern whose border
//               // has 0's, but we want with border N's and then decrease inside.
//               System.out.print(n- Math.min(Math.min(top,bottom), Math.min(left,right)) + " ");
//           }
          
//           // As soon as the numbers for each iteration are printed, we move to the
//           // next row and give a line break otherwise all numbers
//           // would get printed in 1 line.
//           System.out.println();
//       }
//  }
 
//      public static void main(String[] args) {
         
//          // Here, we have taken the value of N as 5.
//          // We can also take input from the user.
//          int N = 5;
//          pattern22(N);
//      }
//  }




//  import java.util.*;

// class Solution {
//     private static void merge(int[] arr, int low, int mid, int high) {
//         ArrayList<Integer> temp = new ArrayList<>(); // temporary array
//         int left = low;      // starting index of left half of arr
//         int right = mid + 1;   // starting index of right half of arr

//         //storing elements in the temporary array in a sorted manner//

//         while (left <= mid && right <= high) {
//             if (arr[left] <= arr[right]) {
//                 temp.add(arr[left]);
//                 left++;
//             } else {
//                 temp.add(arr[right]);
//                 right++;
//             }
//         }

//         // if elements on the left half are still left //

//         while (left <= mid) {
//             temp.add(arr[left]);
//             left++;
//         }

//         //  if elements on the right half are still left //
//         while (right <= high) {
//             temp.add(arr[right]);
//             right++;
//         }

//         // transfering all elements from temporary to arr //
//         for (int i = low; i <= high; i++) {
//             arr[i] = temp.get(i - low);
//         }
//     }

//     public static void mergeSort(int[] arr, int low, int high) {
//         if (low >= high) return;
//         int mid = (low + high) / 2 ;
//         mergeSort(arr, low, mid);  // left half
//         mergeSort(arr, mid + 1, high); // right half
//         merge(arr, low, mid, high);  // merging sorted halves
//     }
// }
// public class tUf {
//     public static void main(String args[]) {
//         Scanner sc = new Scanner(System.in);
//         int n = 7;
//         int arr[] = { 9, 4, 7, 6, 3, 1, 5 };
//         System.out.println("Before sorting array: ");
//         for (int i = 0; i < n; i++) {
//             System.out.print(arr[i] + " ");
//         }
//         System.out.println();
//         Solution.mergeSort(arr, 0, n - 1);
//         System.out.println("After sorting array: ");
//         for (int i = 0; i < n; i++) {
//             System.out.print(arr[i] + " ");
//         }
//         System.out.println();
//     }

// }
// Output:

// Before Sorting Array:
// 9 4 7 6 3 1 5
// After Sorting Array:
// 1 3 4 5 6 7 9

// Time complexity: O(nlogn) 




----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//zoho questions
1.Pattern Printing  
    Print a triangle pattern of stars.  
    Input:  
        4 
    Output:  
        *
        ***
        *****
        *******

 2. Decimal to Hexadecimal Conversion  
    Convert a given decimal number to hexadecimal.  
    Input: 15  
    Output: F  

    Input: 255  
    Output: FF  

 3. Longest Palindromic Substring   
    Find the longest palindromic substring in a given string.  
    Input: babad  
    Output: bab (or aba)  

    Input: cbbd  
    Output: bb  

 4. A number is called as binary-decimal if all the digits in the number should be either ‘1’ or ‘0’. Any number can be written as a sum of binary-decimals. Our task is to find the minimum number of binary-decimals to represent a number.
        Input : 32
        Output : 10 11 11
        Input : 120
        Output : 10 110



6. Pattern Printing  
   Print the number pattern as shown below.  
   Input:  
   4
   Output:  
   1
   1 2
   1 2 3
   1 2 3 4
     2 3 4
       3 4
         4

7. Find Leaders in an Array  
   Find all leaders in the array (numbers greater than all elements to their right).  
   Input: [16, 17, 4, 3, 5, 2]  
   Output: [17, 5, 2]

   Input: [1, 2, 3, 4, 0]  
   Output: [4, 0] 

8. Find the Longest String in a Paragraph 
   Find the longest string (word) in a paragraph.  
   Input: This is a simple paragraph.  
   Output: paragraph  

   Input: Hello world!  
   Output: Hello  

9.Find Target Element  
   Find the target element in the array.  
   Input: Array: [4, 5, 6, 7, 0, 1, 2], Target: 0  
   Output: Index: 4  

   Input: Array: [4, 5, 6, 7, 0, 1, 2], Target: 3  
   Output: Not Found  

10.Second Largest Element in an Array**  
   Find the second largest element in the array.  
   Input:** [12, 35, 1, 10, 34, 1]  
   Output:** 34  

   Input: [1, 2, 3, 4, 5]  
   Output: 4  
  i need answer and question without useing in-bluid functions and collections in java
ChatGPT said:
Here are the solutions to your problems without using built-in functions or collections in Java:

1. Triangle Pattern Printing
java
Copy
Edit
public class TrianglePattern {
    public static void main(String[] args) {
        int n = 4;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < (2 * i + 1); j++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}
2. Decimal to Hexadecimal Conversion
java
Copy
Edit
public class DecimalToHex {
    public static void main(String[] args) {
        int num = 255;
        char hex[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        String result = "";
        
        while (num > 0) {
            result = hex[num % 16] + result;
            num /= 16;
        }
        
        System.out.println(result);
    }
}
3. Longest Palindromic Substring
java
Copy
Edit
public class LongestPalindrome {
    public static void main(String[] args) {
        String s = "babad";
        String longest = "";

        for (int i = 0; i < s.length(); i++) {
            for (int j = i; j < s.length(); j++) {
                if (isPalindrome(s, i, j)) {
                    String temp = s.substring(i, j + 1);
                    if (temp.length() > longest.length()) {
                        longest = temp;
                    }
                }
            }
        }
        System.out.println(longest);
    }

    static boolean isPalindrome(String s, int start, int end) {
        while (start < end) {
            if (s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}
4. Minimum Binary-Decimals Representation
java
Copy
Edit
public class BinaryDecimal {
    public static void main(String[] args) {
        int num = 120;
        while (num > 0) {
            int temp = num, maxDigit = 0, factor = 1, newNum = 0;
            
            while (temp > 0) {
                if (temp % 10 > 0) {
                    newNum += factor;
                }
                temp /= 10;
                factor *= 10;
            }
            System.out.print(newNum + " ");
            num -= newNum;
        }
    }
}
6. Number Pattern Printing
java
Copy
Edit
public class NumberPattern {
    public static void main(String[] args) {
        int n = 4;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print(j + " ");
            }
            System.out.println();
        }
        for (int i = 2; i <= n; i++) {
            for (int j = 1; j < i; j++) {
                System.out.print("  ");
            }
            for (int j = i; j <= n; j++) {
                System.out.print(j + " ");
            }
            System.out.println();
        }
    }
}
7. Find Leaders in an Array
java
Copy
Edit
public class LeadersInArray {
    public static void main(String[] args) {
        int arr[] = {16, 17, 4, 3, 5, 2};
        int n = arr.length;
        int maxFromRight = arr[n - 1];
        System.out.print(maxFromRight + " ");

        for (int i = n - 2; i >= 0; i--) {
            if (arr[i] > maxFromRight) {
                maxFromRight = arr[i];
                System.out.print(maxFromRight + " ");
            }
        }
    }
}
8. Find the Longest String in a Paragraph
java
Copy
Edit
public class LongestWord {
    public static void main(String[] args) {
        String s = "This is a simple paragraph.";
        int maxLength = 0, start = 0, maxStart = 0;
        
        for (int i = 0; i <= s.length(); i++) {
            if (i == s.length() || s.charAt(i) == ' ' || s.charAt(i) == '.' || s.charAt(i) == '!') {
                int length = i - start;
                if (length > maxLength) {
                    maxLength = length;
                    maxStart = start;
                }
                start = i + 1;
            }
        }
        for (int i = maxStart; i < maxStart + maxLength; i++) {
            System.out.print(s.charAt(i));
        }
    }
}
9. Find Target Element in an Array
java
Copy
Edit
public class FindTarget {
    public static void main(String[] args) {
        int arr[] = {4, 5, 6, 7, 0, 1, 2};
        int target = 0;
        int index = -1;

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == target) {
                index = i;
                break;
            }
        }

        if (index == -1) {
            System.out.println("Not Found");
        } else {
            System.out.println("Index: " + index);
        }
    }
}
10. Second Largest Element in an Array
java
Copy
Edit
public class SecondLargest {
    public static void main(String[] args) {
        int arr[] = {12, 35, 1, 10, 34, 1};
        int first = Integer.MIN_VALUE, second = Integer.MIN_VALUE;

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] > first) {
                second = first;
                first = arr[i];
            } else if (arr[i] > second && arr[i] != first) {
                second = arr[i];
            }
        }
        
        System.out.println(second);
    }
}

11. Trailing Zeroes in Factorial  
   Given n >= 0, return the count of trailing zeroes in n!.

   Sample Input 1: 10  
   Sample Output 1: 2  
   Explanation: 10! = 3628800, 2 trailing zeroes.

   Sample Input 2: 20  
   Sample Output 2: 4  
   Explanation:** 20! = 2432902008176640000, 4 trailing zeroes.

   Sample Input 3: 100  
   Sample Output 3: 24


class TrailingZeroes {
    public static int countTrailingZeroes(int n) {
        int count = 0;
        while (n >= 5) {
            count += n / 5;
            n /= 5;
        }
        return count;
    }

    public static void main(String[] args) {
        System.out.println(countTrailingZeroes(10)); // Output: 2
        System.out.println(countTrailingZeroes(20)); // Output: 4
        System.out.println(countTrailingZeroes(100)); // Output: 24
    }
}

12. Find Missing k-th Positive Integer  
   Given an array of integers, find the k-th missing positive integer.

   Sample Input 1: arr: [-1, 2, 3, 4], k: 2  
   Sample Output 1: 2

   Sample Input 2: arr: [1, 2, 3, 4, -1], k: 1  
   Sample Output 2: 5


import java.util.*;

class KthMissing {
    public static int findKthMissing(int[] arr, int k) {
        Arrays.sort(arr);
        int count = 0, num = 1;
        while (count < k) {
            if (!contains(arr, num)) count++;
            if (count == k) return num;
            num++;
        }
        return -1;
    }

    private static boolean contains(int[] arr, int target) {
        for (int num : arr) {
            if (num == target) return true;
        }
        return false;
    }

    public static void main(String[] args) {
        System.out.println(findKthMissing(new int[]{-1, 2, 3, 4}, 2)); // Output: 2
        System.out.println(findKthMissing(new int[]{1, 2, 3, 4, -1}, 1)); // Output: 5
    }
}



13. Insert n Elements in an Array with Adjacent Empty Condition  
   Given an array where '1' means not empty and '0' means empty, check if you can insert n elements such that adjacent elements are empty.

   Sample Input 1: arr: [1, 0, 0, 0, 1], n: 1  
   Sample Output 1: True

   Sample Input 2: arr: [1, 0, 0, 0, 1], n: 2  
   Sample Output 2: False

class InsertElements {
    public static boolean canInsert(int[] arr, int n) {
        int count = 0;
        for (int i = 1; i < arr.length - 1; i++) {
            if (arr[i] == 0 && arr[i - 1] == 0 && arr[i + 1] == 0) {
                arr[i] = 1;
                count++;
                if (count == n) return true;
            }
        }
        return count >= n;
    }

    public static void main(String[] args) {
        System.out.println(canInsert(new int[]{1, 0, 0, 0, 1}, 1)); // True
        System.out.println(canInsert(new int[]{1, 0, 0, 0, 1}, 2)); // False
    }
}


14. Remove Duplicates in k-length Substring
   Given an array, remove duplicates to form k-length substrings.

   Sample Input 1: arr: [1, 1, 1, 1], k: 2  
   Sample Output 1: 1 1 1

   Sample Input 2: arr: [2, 32, 32, 23, 32], k: 4
   Sample Output 2: 3 2 2
import java.util.*;

class RemoveDuplicates {
    public static void removeDuplicates(int[] arr, int k) {
        Set<Integer> unique = new LinkedHashSet<>();
        for (int num : arr) unique.add(num);
        int count = 0;
        for (int num : unique) {
            System.out.print(num + " ");
            if (++count == k) break;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        removeDuplicates(new int[]{1, 1, 1, 1}, 2); // Output: 1 1 1
        removeDuplicates(new int[]{2, 32, 32, 23, 32}, 4); // Output: 3 2 2
    }
}

15. Count Inversions in an Array
   For a given array of distinct integers, count the number of inversions (where arr[i] > arr[j] and i < j).

   Sample Input 1: array: [3, 2, 1]  
   Sample Output 1: 3

   Sample Input 2: array: [2, 5, 1, 3, 4]  
   Sample Output 2: 4

class CountInversions {
    public static int countInversions(int[] arr) {
        int count = 0;
        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] > arr[j]) count++;
            }
        }
        return count;
    }

    public static void main(String[] args) {
        System.out.println(countInversions(new int[]{3, 2, 1})); // Output: 3
        System.out.println(countInversions(new int[]{2, 5, 1, 3, 4})); // Output: 4
    }
}


16.Max Water Container  
   Given an array where each element represents the height of a line, find two lines that form a container holding the most water.

   Sample Input 1: height = [6, 8, 5, 4, 8, 3, 7]
   Sample Output 1: 42

   Sample Input 2: height = [1, 2, 1]
   Sample Output 2: 2



class MaxWaterContainer {
    public static int maxWater(int[] height) {
        int left = 0, right = height.length - 1, maxArea = 0;
        while (left < right) {
            maxArea = Math.max(maxArea, Math.min(height[left], height[right]) * (right - left));
            if (height[left] < height[right]) left++;
            else right--;
        }
        return maxArea;
    }

    public static void main(String[] args) {
        System.out.println(maxWater(new int[]{6, 8, 5, 4, 8, 3, 7})); // Output: 42
    }
}


17.Sort Array by Factor Count
   Given an array, sort it based on the number of factors each element has.



import java.util.*;

class SortByFactors {
    public static int countFactors(int n) {
        int count = 0;
        for (int i = 1; i <= n; i++) {
            if (n % i == 0) count++;
        }
        return count;
    }

    public static void sortByFactors(int[] arr) {
        Arrays.sort(arr, Comparator.comparingInt(SortByFactors::countFactors));
        System.out.println(Arrays.toString(arr));
    }

    public static void main(String[] args) {
        sortByFactors(new int[]{10, 15, 7, 9}); // Sorted by factor count
    }
}


18. Find Combinations for Balanced Parentheses**  
    Find all valid combinations of balanced parentheses for a given number
        Input:
        n = 3  
        Output:
        4  
        Explanation: 
        Valid combinations:  
        ()()()  
        (())()  
        ()(())  
        ((()))




class BalancedParentheses {
    public static int countCombinations(int n) {
        if (n == 0) return 1;
        return countCombinations(n - 1) * 2;
    }

    public static void main(String[] args) {
        System.out.println(countCombinations(3)); // Output: 4
    }
}

19. Rotate Array by a Given Position
Rotate an array to the right by a given number of positions.  
    Input:  
    Array: [1, 2, 3, 4, 5]  
    Positions: 2  
    Output:
    [4, 5, 1, 2, 3]
    Input:  
    Array: [10, 20, 30, 40]  
    Positions: 1   
    Output:
    [40, 10, 20, 30]




import java.util.*;

class RotateArray {
    public static void rotate(int[] arr, int pos) {
        int n = arr.length;
        int[] rotated = new int[n];
        for (int i = 0; i < n; i++) {
            rotated[(i + pos) % n] = arr[i];
        }
        System.out.println(Arrays.toString(rotated));
    }

    public static void main(String[] args) {
        rotate(new int[]{1, 2, 3, 4, 5}, 2); // Output: [4, 5, 1, 2, 3]
    }
}

20. Find Islands in a Matrix 
Count the number of islands (groups of connected 1s) in a matrix where 0 represents desert and 1 represents water.  
    Input:
    Matrix:  
    1 1 0  
    0 1 0  
    1 0 1  
    Output:  
    1

class CountIslands {
    public static int countIslands(int[][] grid) {
        int count = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 1) count++;
            }
        }
        return count;
    }

    public static void main(String[] args) {
        int[][] matrix = {{1, 1, 0}, {0, 1, 0}, {1, 0, 1}};
        System.out.println(countIslands(matrix)); // Output: 1
    }
}

21. Find Shortest Path in a Triangular Matrix
Find the shortest path in a triangular matrix, starting from the top and moving to adjacent elements j, j-1, j+1. 

    Input:
    Matrix:  
    1  
    2 2  
    3 5 3  
    2 4 4 6  
    Output:
    Path: 1 -> 2 -> 3 -> 2  
    Shortest Path Sum: 8

    Input:
    Matrix:  
    1  
    1 2  
    10 10 3  
    2 4 4 6  
    Output:  
    Path: 1 -> 1 -> 3 -> 4  
    Shortest Path Sum: 9   
class ShortestPath {
    public static int findShortestPath(int[][] triangle) {
        for (int i = triangle.length - 2; i >= 0; i--) {
            for (int j = 0; j <= i; j++) {
                triangle[i][j] += Math.min(triangle[i + 1][j], triangle[i + 1][j + 1]);
            }
        }
        return triangle[0][0];
    }

    public static void main(String[] args) {
        int[][] matrix = {{1}, {2, 2}, {3, 5, 3}, {2, 4, 4, 6}};
        System.out.println(findShortestPath(matrix)); // Output: 8
    }
}



22. String Swap Based on n (Even or Odd)

Problem Statement:
Accept n number of strings. If n is even, swap the strings at even positions. If n is odd, swap the strings at odd positions.

Examples:
Input 1:
n = 4
Strings = ["apple", "banana", "cherry", "date"]
Output 1:
["apple", "cherry", "banana", "date"]

Input 2:
n = 3
Strings = ["cat", "dog", "elephant"]
Output 2:
["dog", "cat", "elephant"]






import java.util.*;

// 22. String Swap Based on n (Even or Odd)
class StringSwap {
    public static void swapStrings(String[] arr, int n) {
        for (int i = (n % 2 == 0) ? 1 : 0; i < n - 1; i += 2) {
            String temp = arr[i];
            arr[i] = arr[i + 1];
            arr[i + 1] = temp;
        }
    }
}

// 23. Minimum Number of Jumps
class MinJumps {
    public static int minJumps(int[] arr) {
        int n = arr.length, jumps = 0, i = 0;
        while (i < n - 1) {
            if (i + 2 < n && arr[i + 2] == 0) i += 2;
            else if (i + 1 < n && arr[i + 1] == 0) i += 1;
            else return -1;
            jumps++;
        }
        return jumps;
    }
}

// 24. Multiply Two Strings Without * Operator
class MultiplyStrings {
    public static int multiplyStrings(String s1, String s2) {
        int num1 = 0, num2 = 0, sign = 1, i = 0;
        if (s1.charAt(0) == '-') { sign *= -1; i++; }
        for (; i < s1.length(); i++) num1 = num1 * 10 + (s1.charAt(i) - '0');
        i = 0;
        if (s2.charAt(0) == '-') { sign *= -1; i++; }
        for (; i < s2.length(); i++) num2 = num2 * 10 + (s2.charAt(i) - '0');
        int res = 0;
        for (int j = 0; j < num2; j++) res += num1;
        return sign * res;
    }
}

// 25. Number of Islands
class NumberOfIslands {
    public static void dfs(char[][] grid, int i, int j) {
        if (i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] == '0') return;
        grid[i][j] = '0';
        dfs(grid, i + 1, j);
        dfs(grid, i - 1, j);
        dfs(grid, i, j + 1);
        dfs(grid, i, j - 1);
    }
    public static int numIslands(char[][] grid) {
        int count = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == '1') {
                    count++;
                    dfs(grid, i, j);
                }
            }
        }
        return count;
    }
}

// 26. Sort Even Numbers in Ascending and Odd Numbers in Descending Order
class SortEvenOdd {
    public static void sortEvenOdd(int[] arr) {
        List<Integer> even = new ArrayList<>(), odd = new ArrayList<>();
        for (int num : arr) {
            if (num % 2 == 0) even.add(num);
            else odd.add(num);
        }
        Collections.sort(even);
        Collections.sort(odd, Collections.reverseOrder());
        int i = 0, e = 0, o = 0;
        while (e < even.size() || o < odd.size()) {
            if (e < even.size()) arr[i++] = even.get(e++);
            if (o < odd.size()) arr[i++] = odd.get(o++);
        }
    }
}

// 27. Compare Two Version Numbers
class CompareVersions {
    public static int compareVersions(String v1, String v2) {
        String[] p1 = v1.split("\\."), p2 = v2.split("\\.");
        for (int i = 0; i < Math.max(p1.length, p2.length); i++) {
            int num1 = (i < p1.length) ? Integer.parseInt(p1[i]) : 0;
            int num2 = (i < p2.length) ? Integer.parseInt(p2[i]) : 0;
            if (num1 > num2) return 1;
            if (num1 < num2) return -1;
        }
        return 0;
    }
}

// 28. Jump Game (Climbing Stairs)
class ClimbingStairs {
    public static int climbStairs(int n) {
        if (n <= 2) return n;
        int a = 1, b = 2, temp;
        for (int i = 3; i <= n; i++) {
            temp = a + b;
            a = b;
            b = temp;
        }
        return b;
    }
}

// 29. Group Anagrams
class GroupAnagrams {
    public static List<List<String>> groupAnagrams(String[] strs) {
        Map<String, List<String>> map = new HashMap<>();
        for (String str : strs) {
            char[] chars = str.toCharArray();
            Arrays.sort(chars);
            String key = new String(chars);
            if (!map.containsKey(key)) map.put(key, new ArrayList<>());
            map.get(key).add(str);
        }
        return new ArrayList<>(map.values());
    }
}

// 30. Print the Given Pattern
class PrintPattern {
    public static void printPattern(int[][] matrix) {
        int rows = matrix.length, cols = matrix[0].length;
        for (int d = 0; d < rows + cols - 1; d++) {
            for (int r = 0; r <= d; r++) {
                int c = d - r;
                if (r < rows && c < cols) System.out.print(matrix[r][c] + " ");
            }
        }
    }
}

// 31. Find if a String Exists in a 2D Matrix (Word Search)
class WordSearch {
    public static boolean exist(char[][] board, String word) {
        for (int i = 0; i < board.length; i++)
            for (int j = 0; j < board[0].length; j++)
                if (dfs(board, i, j, word, 0)) return true;
        return false;
    }
    public static boolean dfs(char[][] board, int i, int j, String word, int index) {
        if (index == word.length()) return true;
        if (i < 0 || j < 0 || i >= board.length || j >= board[0].length || board[i][j] != word.charAt(index)) return false;
        char temp = board[i][j]; board[i][j] = '*';
        boolean found = dfs(board, i+1, j, word, index+1) || dfs(board, i-1, j, word, index+1) ||
                        dfs(board, i, j+1, word, index+1) || dfs(board, i, j-1, word, index+1);
        board[i][j] = temp;
        return found;
    }
}




